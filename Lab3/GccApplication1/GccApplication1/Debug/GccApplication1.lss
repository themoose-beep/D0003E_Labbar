
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080011a  0080011a  0000078e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123e  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9f  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c7  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cc  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 ee       	ldi	r30, 0xE0	; 224
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  92:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
		}
		i += 1;
	}
}

void blink() {
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	00 d0       	rcall	.+0      	; 0xa0 <blink+0x6>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <blink+0x8>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	while(1) {
		volatile long currVal = getInterrupts();
		
		if (currVal >= 10) {
			LCDDR0 = (LCDDR0 & 0xfd) | ((~LCDDR0) & 0x2);
  a6:	0c ee       	ldi	r16, 0xEC	; 236
  a8:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void blink() {
	while(1) {
		volatile long currVal = getInterrupts();
  aa:	0e 94 1b 02 	call	0x436	; 0x436 <getInterrupts>
  ae:	69 83       	std	Y+1, r22	; 0x01
  b0:	7a 83       	std	Y+2, r23	; 0x02
  b2:	8b 83       	std	Y+3, r24	; 0x03
  b4:	9c 83       	std	Y+4, r25	; 0x04
		
		if (currVal >= 10) {
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	ab 81       	ldd	r26, Y+3	; 0x03
  bc:	bc 81       	ldd	r27, Y+4	; 0x04
  be:	0a 97       	sbiw	r24, 0x0a	; 10
  c0:	a1 05       	cpc	r26, r1
  c2:	b1 05       	cpc	r27, r1
  c4:	94 f3       	brlt	.-28     	; 0xaa <blink+0x10>
			LCDDR0 = (LCDDR0 & 0xfd) | ((~LCDDR0) & 0x2);
  c6:	f8 01       	movw	r30, r16
  c8:	80 81       	ld	r24, Z
  ca:	90 81       	ld	r25, Z
  cc:	90 95       	com	r25
  ce:	92 70       	andi	r25, 0x02	; 2
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
			resetInterrupts();
  d6:	0e 94 24 02 	call	0x448	; 0x448 <resetInterrupts>
  da:	e7 cf       	rjmp	.-50     	; 0xaa <blink+0x10>

000000dc <LCD_Init>:
uint16_t sccMap[] = {0x1551, 0x2080, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x1b51, 0x0000};
mutex MTX = MUTEX_INIT;

void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
  e2:	87 eb       	ldi	r24, 0xB7	; 183
  e4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  ee:	80 ec       	ldi	r24, 0xC0	; 192
  f0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  f4:	08 95       	ret

000000f6 <writeChar>:
	bool wrapped;
}blinkData; 



void writeChar(char ch, int pos) {
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
  fe:	66 30       	cpi	r22, 0x06	; 6
 100:	71 05       	cpc	r23, r1
 102:	08 f0       	brcs	.+2      	; 0x106 <writeChar+0x10>
 104:	4b c0       	rjmp	.+150    	; 0x19c <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
 106:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
 108:	8a 30       	cpi	r24, 0x0A	; 10
 10a:	08 f0       	brcs	.+2      	; 0x10e <writeChar+0x18>
		intCh = 10;
 10c:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
 10e:	fb 01       	movw	r30, r22
 110:	f5 95       	asr	r31
 112:	e7 95       	ror	r30
 114:	e4 51       	subi	r30, 0x14	; 20
 116:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
 118:	60 ff       	sbrs	r22, 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
 11c:	50 ef       	ldi	r21, 0xF0	; 240
 11e:	01 c0       	rjmp	.+2      	; 0x122 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
 120:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
 122:	a8 2f       	mov	r26, r24
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	aa 0f       	add	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	a0 50       	subi	r26, 0x00	; 0
 12c:	bf 4f       	sbci	r27, 0xFF	; 255
 12e:	cd 91       	ld	r28, X+
 130:	dc 91       	ld	r29, X
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 13a:	15 2f       	mov	r17, r21
 13c:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 13e:	01 2f       	mov	r16, r17
 140:	06 66       	ori	r16, 0x66	; 102
 142:	04 c0       	rjmp	.+8      	; 0x14c <writeChar+0x56>
 144:	14 96       	adiw	r26, 0x04	; 4
 146:	35 96       	adiw	r30, 0x05	; 5
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
 14c:	ce 01       	movw	r24, r28
 14e:	0a 2e       	mov	r0, r26
 150:	02 c0       	rjmp	.+4      	; 0x156 <writeChar+0x60>
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <writeChar+0x5c>
 15a:	48 2f       	mov	r20, r24
 15c:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	71 05       	cpc	r23, r1
 162:	69 f4       	brne	.+26     	; 0x17e <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 164:	80 81       	ld	r24, Z
 166:	90 2f       	mov	r25, r16
 168:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 16a:	80 e1       	ldi	r24, 0x10	; 16
 16c:	48 9f       	mul	r20, r24
 16e:	90 01       	movw	r18, r0
 170:	11 24       	eor	r1, r1
 172:	84 2f       	mov	r24, r20
 174:	82 2b       	or	r24, r18
 176:	85 23       	and	r24, r21
 178:	89 2b       	or	r24, r25
 17a:	80 83       	st	Z, r24
 17c:	e3 cf       	rjmp	.-58     	; 0x144 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 17e:	80 81       	ld	r24, Z
 180:	91 2f       	mov	r25, r17
 182:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	48 9f       	mul	r20, r24
 188:	90 01       	movw	r18, r0
 18a:	11 24       	eor	r1, r1
 18c:	84 2f       	mov	r24, r20
 18e:	82 2b       	or	r24, r18
 190:	85 23       	and	r24, r21
 192:	89 2b       	or	r24, r25
 194:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
 196:	64 30       	cpi	r22, 0x04	; 4
 198:	71 05       	cpc	r23, r1
 19a:	a4 f2       	brlt	.-88     	; 0x144 <writeChar+0x4e>

	}
	return;
	
	
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <is_prime>:

bool is_prime(long i) {
 1a6:	8f 92       	push	r8
 1a8:	9f 92       	push	r9
 1aa:	af 92       	push	r10
 1ac:	bf 92       	push	r11
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	4b 01       	movw	r8, r22
 1b8:	5c 01       	movw	r10, r24
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	88 16       	cp	r8, r24
 1be:	91 04       	cpc	r9, r1
 1c0:	a1 04       	cpc	r10, r1
 1c2:	b1 04       	cpc	r11, r1
 1c4:	94 f1       	brlt	.+100    	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
		if (i % j == 0) {
 1c6:	d5 01       	movw	r26, r10
 1c8:	c4 01       	movw	r24, r8
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	99 27       	eor	r25, r25
 1ce:	aa 27       	eor	r26, r26
 1d0:	b0 78       	andi	r27, 0x80	; 128
 1d2:	bb 23       	and	r27, r27
 1d4:	54 f4       	brge	.+20     	; 0x1ea <is_prime+0x44>
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	a1 09       	sbc	r26, r1
 1da:	b1 09       	sbc	r27, r1
 1dc:	8e 6f       	ori	r24, 0xFE	; 254
 1de:	9f 6f       	ori	r25, 0xFF	; 255
 1e0:	af 6f       	ori	r26, 0xFF	; 255
 1e2:	bf 6f       	ori	r27, 0xFF	; 255
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	89 2b       	or	r24, r25
 1ec:	8a 2b       	or	r24, r26
 1ee:	8b 2b       	or	r24, r27
 1f0:	f1 f0       	breq	.+60     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 1f2:	c1 2c       	mov	r12, r1
 1f4:	d1 2c       	mov	r13, r1
 1f6:	76 01       	movw	r14, r12
 1f8:	68 94       	set
 1fa:	c1 f8       	bld	r12, 1
 1fc:	0a c0       	rjmp	.+20     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 1fe:	c5 01       	movw	r24, r10
 200:	b4 01       	movw	r22, r8
 202:	a7 01       	movw	r20, r14
 204:	96 01       	movw	r18, r12
 206:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodsi4>
 20a:	67 2b       	or	r22, r23
 20c:	68 2b       	or	r22, r24
 20e:	69 2b       	or	r22, r25
 210:	81 f0       	breq	.+32     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
}

bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	c8 1a       	sub	r12, r24
 216:	d8 0a       	sbc	r13, r24
 218:	e8 0a       	sbc	r14, r24
 21a:	f8 0a       	sbc	r15, r24
 21c:	8c 14       	cp	r8, r12
 21e:	9d 04       	cpc	r9, r13
 220:	ae 04       	cpc	r10, r14
 222:	bf 04       	cpc	r11, r15
 224:	61 f7       	brne	.-40     	; 0x1fe <is_prime+0x58>
		if (i % j == 0) {
			return false;
		}
	}
	return true;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	05 c0       	rjmp	.+10     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	03 c0       	rjmp	.+6      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
		if (i % j == 0) {
			return false;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	01 c0       	rjmp	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 232:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	9f 90       	pop	r9
 242:	8f 90       	pop	r8
 244:	08 95       	ret

00000246 <printAt>:

void printAt(long num, int pos) {
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	00 d0       	rcall	.+0      	; 0x258 <printAt+0x12>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	6b 01       	movw	r12, r22
 25e:	7c 01       	movw	r14, r24
 260:	8a 01       	movw	r16, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 262:	24 e6       	ldi	r18, 0x64	; 100
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodsi4>
 26e:	2a e0       	ldi	r18, 0x0A	; 10
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodsi4>
 27a:	b8 01       	movw	r22, r16
 27c:	80 e3       	ldi	r24, 0x30	; 48
 27e:	82 0f       	add	r24, r18
 280:	0e 94 7b 00 	call	0xf6	; 0xf6 <writeChar>
	for(volatile int i = 0; i < 1000; i++);
 284:	1a 82       	std	Y+2, r1	; 0x02
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	88 3e       	cpi	r24, 0xE8	; 232
 28e:	93 40       	sbci	r25, 0x03	; 3
 290:	54 f4       	brge	.+20     	; 0x2a6 <printAt+0x60>
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	9a 81       	ldd	r25, Y+2	; 0x02
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	9a 83       	std	Y+2, r25	; 0x02
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	88 3e       	cpi	r24, 0xE8	; 232
 2a2:	93 40       	sbci	r25, 0x03	; 3
 2a4:	b4 f3       	brlt	.-20     	; 0x292 <printAt+0x4c>
    pp++;
    writeChar( num % 10 + '0', pp);
 2a6:	0f 5f       	subi	r16, 0xFF	; 255
 2a8:	1f 4f       	sbci	r17, 0xFF	; 255
 2aa:	c7 01       	movw	r24, r14
 2ac:	b6 01       	movw	r22, r12
 2ae:	2a e0       	ldi	r18, 0x0A	; 10
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodsi4>
 2ba:	86 2f       	mov	r24, r22
 2bc:	b8 01       	movw	r22, r16
 2be:	80 5d       	subi	r24, 0xD0	; 208
 2c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <writeChar>

}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	df 90       	pop	r13
 2d6:	cf 90       	pop	r12
 2d8:	08 95       	ret

000002da <button>:


void button() {
    long numPressed = 0;
    bool prev = false;
    LCDDR0 = LCDDR0 | (1 << 2);
 2da:	ec ee       	ldi	r30, 0xEC	; 236
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	84 60       	ori	r24, 0x04	; 4
 2e2:	80 83       	st	Z, r24
}


void button() {
    long numPressed = 0;
    bool prev = false;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
	}
}


void button() {
    long numPressed = 0;
 2e6:	c1 2c       	mov	r12, r1
 2e8:	d1 2c       	mov	r13, r1
 2ea:	76 01       	movw	r14, r12
                numPressed += 1;
                printAt(numPressed, 4);
			}
			prev = true;
			} else {
			prev = false;
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
    LCDDR0 = LCDDR0 | (1 << 2);
	while(1) {
		if (((PINB >> 7) & 0x1) == 0) {
			if (!prev) {
				// Shift the displays
				LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
 2ee:	0c ee       	ldi	r16, 0xEC	; 236
 2f0:	10 e0       	ldi	r17, 0x00	; 0
                numPressed += 1;
                printAt(numPressed, 4);
			}
			prev = true;
 2f2:	d1 e0       	ldi	r29, 0x01	; 1
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <button+0x1e>
			} else {
			prev = false;
 2f6:	8c 2f       	mov	r24, r28
void button() {
    long numPressed = 0;
    bool prev = false;
    LCDDR0 = LCDDR0 | (1 << 2);
	while(1) {
		if (((PINB >> 7) & 0x1) == 0) {
 2f8:	1f 99       	sbic	0x03, 7	; 3
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <button+0x1c>
			if (!prev) {
 2fc:	81 11       	cpse	r24, r1
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <button+0x1e>
				// Shift the displays
				LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
 300:	f8 01       	movw	r30, r16
 302:	80 81       	ld	r24, Z
 304:	90 81       	ld	r25, Z
 306:	90 95       	com	r25
 308:	94 74       	andi	r25, 0x44	; 68
 30a:	8b 7b       	andi	r24, 0xBB	; 187
 30c:	89 2b       	or	r24, r25
 30e:	80 83       	st	Z, r24
                numPressed += 1;
 310:	ff ef       	ldi	r31, 0xFF	; 255
 312:	cf 1a       	sub	r12, r31
 314:	df 0a       	sbc	r13, r31
 316:	ef 0a       	sbc	r14, r31
 318:	ff 0a       	sbc	r15, r31
                printAt(numPressed, 4);
 31a:	44 e0       	ldi	r20, 0x04	; 4
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 23 01 	call	0x246	; 0x246 <printAt>
			}
			prev = true;
 326:	8d 2f       	mov	r24, r29
 328:	e7 cf       	rjmp	.-50     	; 0x2f8 <button+0x1e>

0000032a <__vector_7>:
    pp++;
    writeChar( num % 10 + '0', pp);

}

ISR(TIMER1_COMPA_vect) {
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	yield();
 34c:	0e 94 be 02 	call	0x57c	; 0x57c <yield>
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	bf 91       	pop	r27
 356:	af 91       	pop	r26
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	5f 91       	pop	r21
 362:	4f 91       	pop	r20
 364:	3f 91       	pop	r19
 366:	2f 91       	pop	r18
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <primes>:


void primes() {
    long i = 0;
 372:	c1 2c       	mov	r12, r1
 374:	d1 2c       	mov	r13, r1
 376:	76 01       	movw	r14, r12
	while(1) {
		if (is_prime(i)) {
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <is_prime>
 380:	88 23       	and	r24, r24
 382:	31 f0       	breq	.+12     	; 0x390 <primes+0x1e>
			printAt(i, 0);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	c7 01       	movw	r24, r14
 38a:	b6 01       	movw	r22, r12
 38c:	0e 94 23 01 	call	0x246	; 0x246 <printAt>
		}
		i += 1;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	c8 1a       	sub	r12, r24
 394:	d8 0a       	sbc	r13, r24
 396:	e8 0a       	sbc	r14, r24
 398:	f8 0a       	sbc	r15, r24
	}
 39a:	ee cf       	rjmp	.-36     	; 0x378 <primes+0x6>

0000039c <main>:
	


int main(void)
{
    CLKPR = 0x80;
 39c:	e1 e6       	ldi	r30, 0x61	; 97
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	80 83       	st	Z, r24
	CLKPR = 0x00;
 3a4:	10 82       	st	Z, r1
	PORTB = PORTB | (1 << PB7);
 3a6:	2f 9a       	sbi	0x05, 7	; 5
    LCD_Init();
 3a8:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Init>
    spawn(blink, 0);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	8d e4       	ldi	r24, 0x4D	; 77
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 2d 02 	call	0x45a	; 0x45a <spawn>
    spawn(button, 0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	8d e6       	ldi	r24, 0x6D	; 109
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 2d 02 	call	0x45a	; 0x45a <spawn>
	primes();
 3c4:	0e 94 b9 01 	call	0x372	; 0x372 <primes>

000003c8 <enqueue>:

void resetInterrupts() {
	interrupts = 0;
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 3c8:	dc 01       	movw	r26, r24
 3ca:	15 96       	adiw	r26, 0x05	; 5
 3cc:	1c 92       	st	X, r1
 3ce:	1e 92       	st	-X, r1
 3d0:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 3d2:	db 01       	movw	r26, r22
 3d4:	ed 91       	ld	r30, X+
 3d6:	fc 91       	ld	r31, X
 3d8:	11 97       	sbiw	r26, 0x01	; 1
 3da:	30 97       	sbiw	r30, 0x00	; 0
 3dc:	21 f4       	brne	.+8      	; 0x3e6 <enqueue+0x1e>
        *queue = p;
 3de:	8d 93       	st	X+, r24
 3e0:	9c 93       	st	X, r25
 3e2:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 3e4:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 3e6:	24 81       	ldd	r18, Z+4	; 0x04
 3e8:	35 81       	ldd	r19, Z+5	; 0x05
 3ea:	21 15       	cp	r18, r1
 3ec:	31 05       	cpc	r19, r1
 3ee:	d1 f7       	brne	.-12     	; 0x3e4 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 3f0:	95 83       	std	Z+5, r25	; 0x05
 3f2:	84 83       	std	Z+4, r24	; 0x04
 3f4:	08 95       	ret

000003f6 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <dispatch+0x6>
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	9a 83       	std	Y+2, r25	; 0x02
 402:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 404:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 408:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 40c:	06 96       	adiw	r24, 0x06	; 6
 40e:	0e 94 2d 03 	call	0x65a	; 0x65a <setjmp>
 412:	89 2b       	or	r24, r25
 414:	59 f4       	brne	.+22     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
        current = next;
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 41e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
        longjmp(next->context,1);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	06 96       	adiw	r24, 0x06	; 6
 428:	0e 94 4d 03 	call	0x69a	; 0x69a <longjmp>
    }
}
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <getInterrupts>:

    initialized = 1;
}

long getInterrupts() {
	return interrupts;
 436:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end>
 43a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x1>
 43e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end+0x2>
 442:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x3>
}
 446:	08 95       	ret

00000448 <resetInterrupts>:

void resetInterrupts() {
	interrupts = 0;
 448:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 44c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 450:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end+0x2>
 454:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x3>
 458:	08 95       	ret

0000045a <spawn>:
        current = next;
        longjmp(next->context,1);
    }
}

void spawn(void (* function)(int), int arg) {
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	00 d0       	rcall	.+0      	; 0x460 <spawn+0x6>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 464:	f8 94       	cli
    //lock(&MTX2);
    if (!initialized) initialize();
 466:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 46a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 46e:	23 2b       	or	r18, r19
 470:	69 f5       	brne	.+90     	; 0x4cc <spawn+0x72>
long interrupts = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 472:	2c ef       	ldi	r18, 0xFC	; 252
 474:	31 e0       	ldi	r19, 0x01	; 1
 476:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 47a:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 47e:	29 e6       	ldi	r18, 0x69	; 105
 480:	32 e0       	ldi	r19, 0x02	; 2
 482:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 486:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 48a:	26 ed       	ldi	r18, 0xD6	; 214
 48c:	32 e0       	ldi	r19, 0x02	; 2
 48e:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 492:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 496:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 49a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    //Set compare match
    PORTB = PORTB | (1 << PB5);
 49e:	2d 9a       	sbi	0x05, 5	; 5
    
    //Set timer enabler
    TIMSK1 = (1 << OCIE1A);
 4a0:	22 e0       	ldi	r18, 0x02	; 2
 4a2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    
    //Set pre-scaling factor and CTC
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 4a6:	2d e0       	ldi	r18, 0x0D	; 13
 4a8:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

    //8 000 000 / 1024 /1000 * 50 (Target Time)
    OCR1A = 390.625;
 4ac:	26 e8       	ldi	r18, 0x86	; 134
 4ae:	31 e0       	ldi	r19, 0x01	; 1
 4b0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 4b4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    
    //Set timer
	TCNT1 = 0;
 4b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 4bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    initialized = 1;
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 4c8:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4cc:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <freeQ>
 4d0:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <freeQ+0x1>
 4d4:	3a 83       	std	Y+2, r19	; 0x02
 4d6:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 4d8:	23 2b       	or	r18, r19
 4da:	a9 f0       	breq	.+42     	; 0x506 <__stack+0x7>
        *queue = (*queue)->next;
 4dc:	e9 81       	ldd	r30, Y+1	; 0x01
 4de:	fa 81       	ldd	r31, Y+2	; 0x02
 4e0:	44 81       	ldd	r20, Z+4	; 0x04
 4e2:	55 81       	ldd	r21, Z+5	; 0x05
 4e4:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <freeQ+0x1>
 4e8:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <freeQ>
    DISABLE();
    //lock(&MTX2);
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 4ec:	91 83       	std	Z+1, r25	; 0x01
 4ee:	80 83       	st	Z, r24
    newp->arg = arg;
 4f0:	73 83       	std	Z+3, r23	; 0x03
 4f2:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 4f4:	15 82       	std	Z+5, r1	; 0x05
 4f6:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 4f8:	cf 01       	movw	r24, r30
 4fa:	06 96       	adiw	r24, 0x06	; 6
 4fc:	0e 94 2d 03 	call	0x65a	; 0x65a <setjmp>
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	29 f5       	brne	.+74     	; 0x54e <__stack+0x4f>
 504:	01 c0       	rjmp	.+2      	; 0x508 <__stack+0x9>
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stack+0x7>
        ENABLE();
 508:	78 94       	sei
        //unlock(&MTX2);
        current->function(); //current->arg
 50a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <current>
 50e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <current+0x1>
 512:	01 90       	ld	r0, Z+
 514:	f0 81       	ld	r31, Z
 516:	e0 2d       	mov	r30, r0
 518:	09 95       	icall
        DISABLE();
 51a:	f8 94       	cli
        //lock(&MTX2);

        enqueue(current, &freeQ);
 51c:	68 e1       	ldi	r22, 0x18	; 24
 51e:	71 e0       	ldi	r23, 0x01	; 1
 520:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 524:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 528:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 52c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 530:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 534:	00 97       	sbiw	r24, 0x00	; 0
 536:	51 f0       	breq	.+20     	; 0x54c <__stack+0x4d>
        *queue = (*queue)->next;
 538:	fc 01       	movw	r30, r24
 53a:	24 81       	ldd	r18, Z+4	; 0x04
 53c:	35 81       	ldd	r19, Z+5	; 0x05
 53e:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 542:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        current->function(); //current->arg
        DISABLE();
        //lock(&MTX2);

        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 546:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dispatch>
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__stack+0x4f>
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stack+0x4d>
    }
    SETSTACK(&newp->context, &newp->stack);
 54e:	e9 81       	ldd	r30, Y+1	; 0x01
 550:	fa 81       	ldd	r31, Y+2	; 0x02
 552:	36 96       	adiw	r30, 0x06	; 6
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	9a 81       	ldd	r25, Y+2	; 0x02
 558:	87 59       	subi	r24, 0x97	; 151
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	91 8b       	std	Z+17, r25	; 0x11
 55e:	80 8b       	std	Z+16, r24	; 0x10
 560:	93 8b       	std	Z+19, r25	; 0x13
 562:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 564:	60 e2       	ldi	r22, 0x20	; 32
 566:	71 e0       	ldi	r23, 0x01	; 1
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	9a 81       	ldd	r25, Y+2	; 0x02
 56c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <enqueue>
    //unlock(&MTX2);
    ENABLE();
 570:	78 94       	sei
}
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <yield>:

void yield(void) {
	DISABLE();
 57c:	f8 94       	cli
	interrupts += 1;
 57e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 582:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 586:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__data_end+0x2>
 58a:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__data_end+0x3>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	a1 1d       	adc	r26, r1
 592:	b1 1d       	adc	r27, r1
 594:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 598:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 59c:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <__data_end+0x2>
 5a0:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <__data_end+0x3>
	enqueue(current, &readyQ);
 5a4:	60 e2       	ldi	r22, 0x20	; 32
 5a6:	71 e0       	ldi	r23, 0x01	; 1
 5a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 5ac:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 5b0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5b4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 5b8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	59 f0       	breq	.+22     	; 0x5d6 <yield+0x5a>
        *queue = (*queue)->next;
 5c0:	fc 01       	movw	r30, r24
 5c2:	24 81       	ldd	r18, Z+4	; 0x04
 5c4:	35 81       	ldd	r19, Z+5	; 0x05
 5c6:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 5ca:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>

void yield(void) {
	DISABLE();
	interrupts += 1;
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 5ce:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dispatch>
	ENABLE();
 5d2:	78 94       	sei
}
 5d4:	08 95       	ret
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <yield+0x5a>

000005d8 <__divmodsi4>:
 5d8:	05 2e       	mov	r0, r21
 5da:	97 fb       	bst	r25, 7
 5dc:	1e f4       	brtc	.+6      	; 0x5e4 <__divmodsi4+0xc>
 5de:	00 94       	com	r0
 5e0:	0e 94 03 03 	call	0x606	; 0x606 <__negsi2>
 5e4:	57 fd       	sbrc	r21, 7
 5e6:	07 d0       	rcall	.+14     	; 0x5f6 <__divmodsi4_neg2>
 5e8:	0e 94 0b 03 	call	0x616	; 0x616 <__udivmodsi4>
 5ec:	07 fc       	sbrc	r0, 7
 5ee:	03 d0       	rcall	.+6      	; 0x5f6 <__divmodsi4_neg2>
 5f0:	4e f4       	brtc	.+18     	; 0x604 <__divmodsi4_exit>
 5f2:	0c 94 03 03 	jmp	0x606	; 0x606 <__negsi2>

000005f6 <__divmodsi4_neg2>:
 5f6:	50 95       	com	r21
 5f8:	40 95       	com	r20
 5fa:	30 95       	com	r19
 5fc:	21 95       	neg	r18
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	4f 4f       	sbci	r20, 0xFF	; 255
 602:	5f 4f       	sbci	r21, 0xFF	; 255

00000604 <__divmodsi4_exit>:
 604:	08 95       	ret

00000606 <__negsi2>:
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	08 95       	ret

00000616 <__udivmodsi4>:
 616:	a1 e2       	ldi	r26, 0x21	; 33
 618:	1a 2e       	mov	r1, r26
 61a:	aa 1b       	sub	r26, r26
 61c:	bb 1b       	sub	r27, r27
 61e:	fd 01       	movw	r30, r26
 620:	0d c0       	rjmp	.+26     	; 0x63c <__udivmodsi4_ep>

00000622 <__udivmodsi4_loop>:
 622:	aa 1f       	adc	r26, r26
 624:	bb 1f       	adc	r27, r27
 626:	ee 1f       	adc	r30, r30
 628:	ff 1f       	adc	r31, r31
 62a:	a2 17       	cp	r26, r18
 62c:	b3 07       	cpc	r27, r19
 62e:	e4 07       	cpc	r30, r20
 630:	f5 07       	cpc	r31, r21
 632:	20 f0       	brcs	.+8      	; 0x63c <__udivmodsi4_ep>
 634:	a2 1b       	sub	r26, r18
 636:	b3 0b       	sbc	r27, r19
 638:	e4 0b       	sbc	r30, r20
 63a:	f5 0b       	sbc	r31, r21

0000063c <__udivmodsi4_ep>:
 63c:	66 1f       	adc	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	1a 94       	dec	r1
 646:	69 f7       	brne	.-38     	; 0x622 <__udivmodsi4_loop>
 648:	60 95       	com	r22
 64a:	70 95       	com	r23
 64c:	80 95       	com	r24
 64e:	90 95       	com	r25
 650:	9b 01       	movw	r18, r22
 652:	ac 01       	movw	r20, r24
 654:	bd 01       	movw	r22, r26
 656:	cf 01       	movw	r24, r30
 658:	08 95       	ret

0000065a <setjmp>:
 65a:	dc 01       	movw	r26, r24
 65c:	2d 92       	st	X+, r2
 65e:	3d 92       	st	X+, r3
 660:	4d 92       	st	X+, r4
 662:	5d 92       	st	X+, r5
 664:	6d 92       	st	X+, r6
 666:	7d 92       	st	X+, r7
 668:	8d 92       	st	X+, r8
 66a:	9d 92       	st	X+, r9
 66c:	ad 92       	st	X+, r10
 66e:	bd 92       	st	X+, r11
 670:	cd 92       	st	X+, r12
 672:	dd 92       	st	X+, r13
 674:	ed 92       	st	X+, r14
 676:	fd 92       	st	X+, r15
 678:	0d 93       	st	X+, r16
 67a:	1d 93       	st	X+, r17
 67c:	cd 93       	st	X+, r28
 67e:	dd 93       	st	X+, r29
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	8d b7       	in	r24, 0x3d	; 61
 686:	8d 93       	st	X+, r24
 688:	8e b7       	in	r24, 0x3e	; 62
 68a:	8d 93       	st	X+, r24
 68c:	8f b7       	in	r24, 0x3f	; 63
 68e:	8d 93       	st	X+, r24
 690:	ed 93       	st	X+, r30
 692:	fd 93       	st	X+, r31
 694:	88 27       	eor	r24, r24
 696:	99 27       	eor	r25, r25
 698:	09 94       	ijmp

0000069a <longjmp>:
 69a:	dc 01       	movw	r26, r24
 69c:	cb 01       	movw	r24, r22
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	81 1d       	adc	r24, r1
 6a4:	2d 90       	ld	r2, X+
 6a6:	3d 90       	ld	r3, X+
 6a8:	4d 90       	ld	r4, X+
 6aa:	5d 90       	ld	r5, X+
 6ac:	6d 90       	ld	r6, X+
 6ae:	7d 90       	ld	r7, X+
 6b0:	8d 90       	ld	r8, X+
 6b2:	9d 90       	ld	r9, X+
 6b4:	ad 90       	ld	r10, X+
 6b6:	bd 90       	ld	r11, X+
 6b8:	cd 90       	ld	r12, X+
 6ba:	dd 90       	ld	r13, X+
 6bc:	ed 90       	ld	r14, X+
 6be:	fd 90       	ld	r15, X+
 6c0:	0d 91       	ld	r16, X+
 6c2:	1d 91       	ld	r17, X+
 6c4:	cd 91       	ld	r28, X+
 6c6:	dd 91       	ld	r29, X+
 6c8:	ed 91       	ld	r30, X+
 6ca:	fd 91       	ld	r31, X+
 6cc:	0d 90       	ld	r0, X+
 6ce:	f8 94       	cli
 6d0:	fe bf       	out	0x3e, r31	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	ed bf       	out	0x3d, r30	; 61
 6d6:	ed 91       	ld	r30, X+
 6d8:	fd 91       	ld	r31, X+
 6da:	09 94       	ijmp

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
