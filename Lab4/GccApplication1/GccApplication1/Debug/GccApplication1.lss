
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00002452  000024e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000369  00800140  00800140  00002526  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f3b  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111a  00000000  00000000  0000572b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001707  00000000  00000000  00006845  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c68  00000000  00000000  00007f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000988  00000000  00000000  00008bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002658  00000000  00000000  0000953c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000bb94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_1>
       8:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__vector_2>
       c:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_3>
      10:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_4>
      14:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_9>
      28:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_10>
      2c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_11>
      30:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_12>
      34:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_13>
      38:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_14>
      3c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_15>
      40:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_16>
      44:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_17>
      48:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__vector_18>
      4c:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__vector_19>
      50:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_20>
      54:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_21>
      58:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 e5       	ldi	r30, 0x52	; 82
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a0 34       	cpi	r26, 0x40	; 64
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a0 e4       	ldi	r26, 0x40	; 64
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3a       	cpi	r26, 0xA9	; 169
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 80 03 	call	0x700	; 0x700 <main>
      92:	0c 94 27 12 	jmp	0x244e	; 0x244e <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <initLCD>:
uint16_t sccMap[] = {0x1551, 0x2080, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x1b51, 0x0000};


void initLCD(GUI *self) {
	//Part 1
	CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
      a2:	10 82       	st	Z, r1

	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
      a4:	8f e0       	ldi	r24, 0x0F	; 15
      a6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
      aa:	87 eb       	ldi	r24, 0xB7	; 183
      ac:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      b0:	87 e0       	ldi	r24, 0x07	; 7
      b2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      b6:	90 ec       	ldi	r25, 0xC0	; 192
      b8:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

    PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
      bc:	85 b1       	in	r24, 0x05	; 5
      be:	80 6d       	ori	r24, 0xD0	; 208
      c0:	85 b9       	out	0x05, r24	; 5
    PORTE |= (1<<PE2)|(1<<PE3);
      c2:	8e b1       	in	r24, 0x0e	; 14
      c4:	8c 60       	ori	r24, 0x0C	; 12
      c6:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
      c8:	8f e2       	ldi	r24, 0x2F	; 47
      ca:	84 b9       	out	0x04, r24	; 4
	DDRE   = (1<<DDE6)|(1<<DDE4);
      cc:	80 e5       	ldi	r24, 0x50	; 80
      ce:	8d b9       	out	0x0d, r24	; 13
   
	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
      d0:	8c e0       	ldi	r24, 0x0C	; 12
      d2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
      d6:	80 ed       	ldi	r24, 0xD0	; 208
      d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
      dc:	9d bb       	out	0x1d, r25	; 29
      de:	08 95       	ret

000000e0 <writeChar>:
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
      e0:	66 30       	cpi	r22, 0x06	; 6
      e2:	71 05       	cpc	r23, r1
      e4:	08 f0       	brcs	.+2      	; 0xe8 <writeChar+0x8>
      e6:	44 c0       	rjmp	.+136    	; 0x170 <writeChar+0x90>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
      e8:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
      ea:	8a 30       	cpi	r24, 0x0A	; 10
      ec:	08 f0       	brcs	.+2      	; 0xf0 <writeChar+0x10>
		intCh = 10;
      ee:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
      f0:	fb 01       	movw	r30, r22
      f2:	f5 95       	asr	r31
      f4:	e7 95       	ror	r30
      f6:	e4 51       	subi	r30, 0x14	; 20
      f8:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
      fa:	60 fd       	sbrc	r22, 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <writeChar+0x22>
		mask = 0x0f;
      fe:	5f e0       	ldi	r21, 0x0F	; 15
     100:	01 c0       	rjmp	.+2      	; 0x104 <writeChar+0x24>
	}
	else {
		mask = 0xf0;
     102:	50 ef       	ldi	r21, 0xF0	; 240
	}
	
	uint16_t sccChar = sccMap[intCh];
     104:	a8 2f       	mov	r26, r24
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	aa 0f       	add	r26, r26
     10a:	bb 1f       	adc	r27, r27
     10c:	a0 50       	subi	r26, 0x00	; 0
     10e:	bf 4f       	sbci	r27, 0xFF	; 255
     110:	6d 91       	ld	r22, X+
     112:	7c 91       	ld	r23, X
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	28 c0       	rjmp	.+80     	; 0x16a <writeChar+0x8a>
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
     11a:	c9 01       	movw	r24, r18
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	db 01       	movw	r26, r22
     126:	02 c0       	rjmp	.+4      	; 0x12c <writeChar+0x4c>
     128:	b6 95       	lsr	r27
     12a:	a7 95       	ror	r26
     12c:	8a 95       	dec	r24
     12e:	e2 f7       	brpl	.-8      	; 0x128 <writeChar+0x48>
     130:	4a 2f       	mov	r20, r26
     132:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
     134:	21 15       	cp	r18, r1
     136:	31 05       	cpc	r19, r1
     138:	39 f4       	brne	.+14     	; 0x148 <writeChar+0x68>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
     13a:	80 81       	ld	r24, Z
     13c:	95 2f       	mov	r25, r21
     13e:	90 95       	com	r25
     140:	96 66       	ori	r25, 0x66	; 102
     142:	89 23       	and	r24, r25
     144:	80 83       	st	Z, r24
     146:	05 c0       	rjmp	.+10     	; 0x152 <writeChar+0x72>
			} else {
			*writePos = *writePos & ~mask;
     148:	80 81       	ld	r24, Z
     14a:	95 2f       	mov	r25, r21
     14c:	90 95       	com	r25
     14e:	89 23       	and	r24, r25
     150:	80 83       	st	Z, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
     152:	b0 e1       	ldi	r27, 0x10	; 16
     154:	4b 9f       	mul	r20, r27
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	90 81       	ld	r25, Z
     15c:	84 2b       	or	r24, r20
     15e:	85 23       	and	r24, r21
     160:	89 2b       	or	r24, r25
     162:	80 83       	st	Z, r24
		
		// Next nibble
		writePos += 5;
     164:	35 96       	adiw	r30, 0x05	; 5
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	24 30       	cpi	r18, 0x04	; 4
     16c:	31 05       	cpc	r19, r1
     16e:	ac f2       	brlt	.-86     	; 0x11a <writeChar+0x3a>
     170:	08 95       	ret

00000172 <printAt>:
	return;
	
	
}

void printAt(GUI *self, uint8_t num) {
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	d6 2f       	mov	r29, r22
    int pp = self->pos;
     17c:	fc 01       	movw	r30, r24
     17e:	04 81       	ldd	r16, Z+4	; 0x04
     180:	10 e0       	ldi	r17, 0x00	; 0
    writeChar( (num % 100) / 10 + '0', pp);
     182:	89 e2       	ldi	r24, 0x29	; 41
     184:	68 9f       	mul	r22, r24
     186:	81 2d       	mov	r24, r1
     188:	11 24       	eor	r1, r1
     18a:	82 95       	swap	r24
     18c:	8f 70       	andi	r24, 0x0F	; 15
     18e:	26 2f       	mov	r18, r22
     190:	f4 e6       	ldi	r31, 0x64	; 100
     192:	8f 9f       	mul	r24, r31
     194:	20 19       	sub	r18, r0
     196:	11 24       	eor	r1, r1
     198:	cd ec       	ldi	r28, 0xCD	; 205
     19a:	2c 9f       	mul	r18, r28
     19c:	81 2d       	mov	r24, r1
     19e:	11 24       	eor	r1, r1
     1a0:	86 95       	lsr	r24
     1a2:	86 95       	lsr	r24
     1a4:	86 95       	lsr	r24
     1a6:	b8 01       	movw	r22, r16
     1a8:	80 5d       	subi	r24, 0xD0	; 208
     1aa:	0e 94 70 00 	call	0xe0	; 0xe0 <writeChar>
    pp++;
     1ae:	b8 01       	movw	r22, r16
     1b0:	6f 5f       	subi	r22, 0xFF	; 255
     1b2:	7f 4f       	sbci	r23, 0xFF	; 255
    writeChar( num % 10 + '0', pp);
     1b4:	dc 9f       	mul	r29, r28
     1b6:	c1 2d       	mov	r28, r1
     1b8:	11 24       	eor	r1, r1
     1ba:	c6 95       	lsr	r28
     1bc:	c6 95       	lsr	r28
     1be:	c6 95       	lsr	r28
     1c0:	cc 0f       	add	r28, r28
     1c2:	8c 2f       	mov	r24, r28
     1c4:	88 0f       	add	r24, r24
     1c6:	88 0f       	add	r24, r24
     1c8:	c8 0f       	add	r28, r24
     1ca:	8d 2f       	mov	r24, r29
     1cc:	8c 1b       	sub	r24, r28
     1ce:	80 5d       	subi	r24, 0xD0	; 208
     1d0:	0e 94 70 00 	call	0xe0	; 0xe0 <writeChar>
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <switchActive>:

void switchActive(GUI *self) {
	if (self->pos == 0) {
     1de:	fc 01       	movw	r30, r24
     1e0:	84 81       	ldd	r24, Z+4	; 0x04
     1e2:	81 11       	cpse	r24, r1
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <switchActive+0x16>
		LCDDR0 ^= 0b10;
     1e6:	ec ee       	ldi	r30, 0xEC	; 236
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	89 27       	eor	r24, r25
     1f0:	80 83       	st	Z, r24
     1f2:	08 95       	ret
	}
	else if (self->pos == 4) {
     1f4:	84 30       	cpi	r24, 0x04	; 4
     1f6:	31 f4       	brne	.+12     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
		LCDDR1 ^= 0x1 << 6;
     1f8:	ed ee       	ldi	r30, 0xED	; 237
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	90 81       	ld	r25, Z
     1fe:	80 e4       	ldi	r24, 0x40	; 64
     200:	89 27       	eor	r24, r25
     202:	80 83       	st	Z, r24
     204:	08 95       	ret

00000206 <resetDebounce>:
		}
	}
}

void resetDebounce(CONTROLLER *self) {
	self->debounce = 0;
     206:	fc 01       	movw	r30, r24
     208:	11 8a       	std	Z+17, r1	; 0x11
     20a:	10 8a       	std	Z+16, r1	; 0x10
     20c:	08 95       	ret

0000020e <initialize>:
#define PNB4 (PINB & (1<<PINB4))
#define PNB6 (PINB & (1<<PINB6))
#define PNB7 (PINB & (1<<PINB7))


void initialize (CONTROLLER *self) {
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	ef 92       	push	r14
     214:	ff 92       	push	r15
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	ec 01       	movw	r28, r24
    SYNC(self->gui[0], initLCD, 0);
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	6d e4       	ldi	r22, 0x4D	; 77
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	88 85       	ldd	r24, Y+8	; 0x08
     22a:	99 85       	ldd	r25, Y+9	; 0x09
     22c:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
	ASYNC(self->ArrPulse[0], generatePulse , NULL);
     230:	0c 81       	ldd	r16, Y+4	; 0x04
     232:	1d 81       	ldd	r17, Y+5	; 0x05
     234:	c1 2c       	mov	r12, r1
     236:	d1 2c       	mov	r13, r1
     238:	0f 2e       	mov	r0, r31
     23a:	fc eb       	ldi	r31, 0xBC	; 188
     23c:	ef 2e       	mov	r14, r31
     23e:	f3 e0       	ldi	r31, 0x03	; 3
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	a9 01       	movw	r20, r18
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	cb 01       	movw	r24, r22
     250:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
    ASYNC(self->ArrPulse[1], generatePulse , NULL);
     254:	0e 81       	ldd	r16, Y+6	; 0x06
     256:	1f 81       	ldd	r17, Y+7	; 0x07
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	cb 01       	movw	r24, r22
     264:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
	ASYNC(self->gui[0], printAt, 1);
     268:	08 85       	ldd	r16, Y+8	; 0x08
     26a:	19 85       	ldd	r17, Y+9	; 0x09
     26c:	cc 24       	eor	r12, r12
     26e:	c3 94       	inc	r12
     270:	d1 2c       	mov	r13, r1
     272:	0f 2e       	mov	r0, r31
     274:	f9 eb       	ldi	r31, 0xB9	; 185
     276:	ef 2e       	mov	r14, r31
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ff 2e       	mov	r15, r31
     27c:	f0 2d       	mov	r31, r0
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	a9 01       	movw	r20, r18
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	cb 01       	movw	r24, r22
     28a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
	ASYNC(self->gui[1], printAt, 1);
     28e:	0a 85       	ldd	r16, Y+10	; 0x0a
     290:	1b 85       	ldd	r17, Y+11	; 0x0b
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	a9 01       	movw	r20, r18
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	cb 01       	movw	r24, r22
     29e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
	ASYNC(self->gui[0], switchActive, NULL);
     2a2:	08 85       	ldd	r16, Y+8	; 0x08
     2a4:	19 85       	ldd	r17, Y+9	; 0x09
     2a6:	c1 2c       	mov	r12, r1
     2a8:	d1 2c       	mov	r13, r1
     2aa:	0f 2e       	mov	r0, r31
     2ac:	ff ee       	ldi	r31, 0xEF	; 239
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	ff 2e       	mov	r15, r31
     2b4:	f0 2d       	mov	r31, r0
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	a9 01       	movw	r20, r18
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	cb 01       	movw	r24, r22
     2c2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	08 95       	ret

000002d8 <movevertical>:

void movevertical (CONTROLLER *self) {
     2d8:	3f 92       	push	r3
     2da:	4f 92       	push	r4
     2dc:	5f 92       	push	r5
     2de:	6f 92       	push	r6
     2e0:	7f 92       	push	r7
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
	uint8_t ac = self->active;
     2fc:	ac 84       	ldd	r10, Y+12	; 0x0c
     2fe:	bd 84       	ldd	r11, Y+13	; 0x0d
     300:	bb 24       	eor	r11, r11
	uint8_t frq =  SYNC(self->ArrPulse[ac], getFrequency, NULL);
     302:	f5 01       	movw	r30, r10
     304:	32 96       	adiw	r30, 0x02	; 2
     306:	ee 0f       	add	r30, r30
     308:	ff 1f       	adc	r31, r31
     30a:	e8 0f       	add	r30, r24
     30c:	f9 1f       	adc	r31, r25
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	66 e8       	ldi	r22, 0x86	; 134
     314:	74 e0       	ldi	r23, 0x04	; 4
     316:	80 81       	ld	r24, Z
     318:	91 81       	ldd	r25, Z+1	; 0x01
     31a:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
     31e:	4c 01       	movw	r8, r24
     320:	38 2e       	mov	r3, r24
	//PUSH
	if(!(PNB4)) {
     322:	1c 99       	sbic	0x03, 4	; 3
     324:	70 c0       	rjmp	.+224    	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		if (self->debounce == 0) {
     326:	88 89       	ldd	r24, Y+16	; 0x10
     328:	99 89       	ldd	r25, Y+17	; 0x11
     32a:	89 2b       	or	r24, r25
     32c:	09 f0       	breq	.+2      	; 0x330 <movevertical+0x58>
     32e:	6b c0       	rjmp	.+214    	; 0x406 <__DATA_REGION_LENGTH__+0x6>
			self->debounce = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	99 8b       	std	Y+17, r25	; 0x11
     336:	88 8b       	std	Y+16, r24	; 0x10
			uint8_t prv = SYNC(self->ArrPulse[ac], getPrev, NULL);
     338:	f5 01       	movw	r30, r10
     33a:	32 96       	adiw	r30, 0x02	; 2
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	ec 0f       	add	r30, r28
     342:	fd 1f       	adc	r31, r29
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	6c e8       	ldi	r22, 0x8C	; 140
     34a:	74 e0       	ldi	r23, 0x04	; 4
     34c:	80 81       	ld	r24, Z
     34e:	91 81       	ldd	r25, Z+1	; 0x01
     350:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
			if (frq > 0) {
     354:	88 20       	and	r8, r8
     356:	49 f1       	breq	.+82     	; 0x3aa <movevertical+0xd2>
				SYNC(self->ArrPulse[ac], setPrev, frq);
     358:	35 01       	movw	r6, r10
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	68 0e       	add	r6, r24
     35e:	71 1c       	adc	r7, r1
     360:	66 0c       	add	r6, r6
     362:	77 1c       	adc	r7, r7
     364:	6c 0e       	add	r6, r28
     366:	7d 1e       	adc	r7, r29
     368:	a4 01       	movw	r20, r8
     36a:	55 27       	eor	r21, r21
     36c:	6f e8       	ldi	r22, 0x8F	; 143
     36e:	74 e0       	ldi	r23, 0x04	; 4
     370:	f3 01       	movw	r30, r6
     372:	80 81       	ld	r24, Z
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
				SYNC(self->ArrPulse[ac], setFrequency, 0);
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	69 e8       	ldi	r22, 0x89	; 137
     380:	74 e0       	ldi	r23, 0x04	; 4
     382:	f3 01       	movw	r30, r6
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
				SYNC(self->gui[ac], printAt, 0);
     38c:	f5 01       	movw	r30, r10
     38e:	34 96       	adiw	r30, 0x04	; 4
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ec 0f       	add	r30, r28
     396:	fd 1f       	adc	r31, r29
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	69 eb       	ldi	r22, 0xB9	; 185
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
     3a8:	1c c0       	rjmp	.+56     	; 0x3e2 <movevertical+0x10a>
     3aa:	3c 01       	movw	r6, r24
     3ac:	77 24       	eor	r7, r7
			}
			else {
				SYNC(self->ArrPulse[ac], setFrequency, prv);
     3ae:	f5 01       	movw	r30, r10
     3b0:	32 96       	adiw	r30, 0x02	; 2
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	ec 0f       	add	r30, r28
     3b8:	fd 1f       	adc	r31, r29
     3ba:	a3 01       	movw	r20, r6
     3bc:	69 e8       	ldi	r22, 0x89	; 137
     3be:	74 e0       	ldi	r23, 0x04	; 4
     3c0:	80 81       	ld	r24, Z
     3c2:	91 81       	ldd	r25, Z+1	; 0x01
     3c4:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
				SYNC(self->gui[ac], printAt, prv);
     3c8:	f5 01       	movw	r30, r10
     3ca:	34 96       	adiw	r30, 0x04	; 4
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	ec 0f       	add	r30, r28
     3d2:	fd 1f       	adc	r31, r29
     3d4:	a3 01       	movw	r20, r6
     3d6:	69 eb       	ldi	r22, 0xB9	; 185
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
			}
			AFTER(MSEC(200), self, resetDebounce, NULL);
     3e2:	c1 2c       	mov	r12, r1
     3e4:	d1 2c       	mov	r13, r1
     3e6:	0f 2e       	mov	r0, r31
     3e8:	f3 e0       	ldi	r31, 0x03	; 3
     3ea:	ef 2e       	mov	r14, r31
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	ff 2e       	mov	r15, r31
     3f0:	f0 2d       	mov	r31, r0
     3f2:	8e 01       	movw	r16, r28
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	a9 01       	movw	r20, r18
     3fa:	6a e6       	ldi	r22, 0x6A	; 106
     3fc:	78 e1       	ldi	r23, 0x18	; 24
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		}
	}

    //UP
    if(!PNB6){
     406:	1e 99       	sbic	0x03, 6	; 3
     408:	61 c0       	rjmp	.+194    	; 0x4cc <__DATA_REGION_LENGTH__+0xcc>
		if (self->debounce == 0) {
     40a:	88 89       	ldd	r24, Y+16	; 0x10
     40c:	99 89       	ldd	r25, Y+17	; 0x11
     40e:	89 2b       	or	r24, r25
     410:	09 f0       	breq	.+2      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
     412:	5c c0       	rjmp	.+184    	; 0x4cc <__DATA_REGION_LENGTH__+0xcc>
			self->debounce = 1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	99 8b       	std	Y+17, r25	; 0x11
     41a:	88 8b       	std	Y+16, r24	; 0x10
			if (frq < 99){
     41c:	f2 e6       	ldi	r31, 0x62	; 98
     41e:	f3 15       	cp	r31, r3
     420:	08 f4       	brcc	.+2      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
     422:	42 c0       	rjmp	.+132    	; 0x4a8 <__DATA_REGION_LENGTH__+0xa8>
				self->holding = AFTER(MSEC(1000), self->ArrPulse[ac], smoothIncrement, 0);
     424:	35 01       	movw	r6, r10
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	68 0e       	add	r6, r24
     42a:	71 1c       	adc	r7, r1
     42c:	66 0c       	add	r6, r6
     42e:	77 1c       	adc	r7, r7
     430:	6c 0e       	add	r6, r28
     432:	7d 1e       	adc	r7, r29
     434:	f3 01       	movw	r30, r6
     436:	00 81       	ld	r16, Z
     438:	11 81       	ldd	r17, Z+1	; 0x01
     43a:	c1 2c       	mov	r12, r1
     43c:	d1 2c       	mov	r13, r1
     43e:	0f 2e       	mov	r0, r31
     440:	f2 e3       	ldi	r31, 0x32	; 50
     442:	ef 2e       	mov	r14, r31
     444:	f4 e0       	ldi	r31, 0x04	; 4
     446:	ff 2e       	mov	r15, r31
     448:	f0 2d       	mov	r31, r0
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	62 e1       	ldi	r22, 0x12	; 18
     452:	7a e7       	ldi	r23, 0x7A	; 122
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
     45c:	9f 87       	std	Y+15, r25	; 0x0f
     45e:	8e 87       	std	Y+14, r24	; 0x0e
				ASYNC(self->ArrPulse[ac], setFrequency, frq + 1);
     460:	24 01       	movw	r4, r8
     462:	55 24       	eor	r5, r5
     464:	ff ef       	ldi	r31, 0xFF	; 255
     466:	4f 1a       	sub	r4, r31
     468:	5f 0a       	sbc	r5, r31
     46a:	f3 01       	movw	r30, r6
     46c:	00 81       	ld	r16, Z
     46e:	11 81       	ldd	r17, Z+1	; 0x01
     470:	62 01       	movw	r12, r4
     472:	0f 2e       	mov	r0, r31
     474:	f9 e8       	ldi	r31, 0x89	; 137
     476:	ef 2e       	mov	r14, r31
     478:	f4 e0       	ldi	r31, 0x04	; 4
     47a:	ff 2e       	mov	r15, r31
     47c:	f0 2d       	mov	r31, r0
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	a9 01       	movw	r20, r18
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	cb 01       	movw	r24, r22
     48a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
				SYNC(self->gui[ac], printAt, frq + 1);
     48e:	f5 01       	movw	r30, r10
     490:	34 96       	adiw	r30, 0x04	; 4
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	ec 0f       	add	r30, r28
     498:	fd 1f       	adc	r31, r29
     49a:	a2 01       	movw	r20, r4
     49c:	69 eb       	ldi	r22, 0xB9	; 185
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>

			}
			AFTER(MSEC(200), self, resetDebounce, NULL);
     4a8:	c1 2c       	mov	r12, r1
     4aa:	d1 2c       	mov	r13, r1
     4ac:	0f 2e       	mov	r0, r31
     4ae:	f3 e0       	ldi	r31, 0x03	; 3
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
     4b8:	8e 01       	movw	r16, r28
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	a9 01       	movw	r20, r18
     4c0:	6a e6       	ldi	r22, 0x6A	; 106
     4c2:	78 e1       	ldi	r23, 0x18	; 24
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		}
    }
    //DOWN
    if(!PNB7){
     4cc:	1f 99       	sbic	0x03, 7	; 3
     4ce:	5f c0       	rjmp	.+190    	; 0x58e <__stack+0x8f>
		if (self->debounce == 0) {
     4d0:	88 89       	ldd	r24, Y+16	; 0x10
     4d2:	99 89       	ldd	r25, Y+17	; 0x11
     4d4:	89 2b       	or	r24, r25
     4d6:	09 f0       	breq	.+2      	; 0x4da <__DATA_REGION_LENGTH__+0xda>
     4d8:	5a c0       	rjmp	.+180    	; 0x58e <__stack+0x8f>
			self->debounce = 1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	99 8b       	std	Y+17, r25	; 0x11
     4e0:	88 8b       	std	Y+16, r24	; 0x10
			if (frq > 0) {
     4e2:	33 20       	and	r3, r3
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__DATA_REGION_LENGTH__+0xe8>
     4e6:	41 c0       	rjmp	.+130    	; 0x56a <__stack+0x6b>
				ASYNC(self->ArrPulse[ac], setFrequency, frq - 1);
     4e8:	99 24       	eor	r9, r9
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	8f 1a       	sub	r8, r31
     4ee:	91 08       	sbc	r9, r1
     4f0:	35 01       	movw	r6, r10
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	68 0e       	add	r6, r24
     4f6:	71 1c       	adc	r7, r1
     4f8:	66 0c       	add	r6, r6
     4fa:	77 1c       	adc	r7, r7
     4fc:	6c 0e       	add	r6, r28
     4fe:	7d 1e       	adc	r7, r29
     500:	f3 01       	movw	r30, r6
     502:	00 81       	ld	r16, Z
     504:	11 81       	ldd	r17, Z+1	; 0x01
     506:	64 01       	movw	r12, r8
     508:	0f 2e       	mov	r0, r31
     50a:	f9 e8       	ldi	r31, 0x89	; 137
     50c:	ef 2e       	mov	r14, r31
     50e:	f4 e0       	ldi	r31, 0x04	; 4
     510:	ff 2e       	mov	r15, r31
     512:	f0 2d       	mov	r31, r0
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	a9 01       	movw	r20, r18
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	cb 01       	movw	r24, r22
     520:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
				SYNC(self->gui[ac], printAt, frq - 1);
     524:	f5 01       	movw	r30, r10
     526:	34 96       	adiw	r30, 0x04	; 4
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	ec 0f       	add	r30, r28
     52e:	fd 1f       	adc	r31, r29
     530:	a4 01       	movw	r20, r8
     532:	69 eb       	ldi	r22, 0xB9	; 185
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
				self->holding = AFTER(MSEC(1000), self->ArrPulse[ac], smoothIncrement, 0);
     53e:	f3 01       	movw	r30, r6
     540:	00 81       	ld	r16, Z
     542:	11 81       	ldd	r17, Z+1	; 0x01
     544:	c1 2c       	mov	r12, r1
     546:	d1 2c       	mov	r13, r1
     548:	0f 2e       	mov	r0, r31
     54a:	f2 e3       	ldi	r31, 0x32	; 50
     54c:	ef 2e       	mov	r14, r31
     54e:	f4 e0       	ldi	r31, 0x04	; 4
     550:	ff 2e       	mov	r15, r31
     552:	f0 2d       	mov	r31, r0
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	a9 01       	movw	r20, r18
     55a:	62 e1       	ldi	r22, 0x12	; 18
     55c:	7a e7       	ldi	r23, 0x7A	; 122
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
     566:	9f 87       	std	Y+15, r25	; 0x0f
     568:	8e 87       	std	Y+14, r24	; 0x0e

			}
			AFTER(MSEC(200), self, resetDebounce, NULL);
     56a:	c1 2c       	mov	r12, r1
     56c:	d1 2c       	mov	r13, r1
     56e:	0f 2e       	mov	r0, r31
     570:	f3 e0       	ldi	r31, 0x03	; 3
     572:	ef 2e       	mov	r14, r31
     574:	f1 e0       	ldi	r31, 0x01	; 1
     576:	ff 2e       	mov	r15, r31
     578:	f0 2d       	mov	r31, r0
     57a:	8e 01       	movw	r16, r28
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	a9 01       	movw	r20, r18
     582:	6a e6       	ldi	r22, 0x6A	; 106
     584:	78 e1       	ldi	r23, 0x18	; 24
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		}
    }
	
	//RELEASE DOWN OR UP
	if (PNB7 && PNB6) {
     58e:	1f 9b       	sbis	0x03, 7	; 3
     590:	0a c0       	rjmp	.+20     	; 0x5a6 <__stack+0xa7>
     592:	1e 9b       	sbis	0x03, 6	; 3
     594:	08 c0       	rjmp	.+16     	; 0x5a6 <__stack+0xa7>
		if (self->holding) {
     596:	8e 85       	ldd	r24, Y+14	; 0x0e
     598:	9f 85       	ldd	r25, Y+15	; 0x0f
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	21 f0       	breq	.+8      	; 0x5a6 <__stack+0xa7>
			ABORT(self->holding);
     59e:	0e 94 13 11 	call	0x2226	; 0x2226 <ABORT>
			self->holding = NULL;
     5a2:	1f 86       	std	Y+15, r1	; 0x0f
     5a4:	1e 86       	std	Y+14, r1	; 0x0e
		}
	}
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	7f 90       	pop	r7
     5c0:	6f 90       	pop	r6
     5c2:	5f 90       	pop	r5
     5c4:	4f 90       	pop	r4
     5c6:	3f 90       	pop	r3
     5c8:	08 95       	ret

000005ca <movehorizontal>:

void movehorizontal(CONTROLLER *self) {
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
	
	//LEFT
	if(!PNE2) {
     5dc:	62 99       	sbic	0x0c, 2	; 12
     5de:	43 c0       	rjmp	.+134    	; 0x666 <movehorizontal+0x9c>
		if (self->debounce == 0) {
     5e0:	88 89       	ldd	r24, Y+16	; 0x10
     5e2:	99 89       	ldd	r25, Y+17	; 0x11
     5e4:	89 2b       	or	r24, r25
     5e6:	61 f5       	brne	.+88     	; 0x640 <movehorizontal+0x76>
			self->debounce = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	99 8b       	std	Y+17, r25	; 0x11
     5ee:	88 8b       	std	Y+16, r24	; 0x10
			if (self->active > 0) {
     5f0:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f2:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f4:	18 16       	cp	r1, r24
     5f6:	19 06       	cpc	r1, r25
     5f8:	1c f5       	brge	.+70     	; 0x640 <movehorizontal+0x76>
				SYNC(self->gui[self->active], switchActive, NULL);
     5fa:	fc 01       	movw	r30, r24
     5fc:	34 96       	adiw	r30, 0x04	; 4
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	6f ee       	ldi	r22, 0xEF	; 239
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
				self->active -= 1;
     616:	8c 85       	ldd	r24, Y+12	; 0x0c
     618:	9d 85       	ldd	r25, Y+13	; 0x0d
     61a:	9c 01       	movw	r18, r24
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	31 09       	sbc	r19, r1
     620:	3d 87       	std	Y+13, r19	; 0x0d
     622:	2c 87       	std	Y+12, r18	; 0x0c
				SYNC(self->gui[self->active], switchActive, NULL);
     624:	fc 01       	movw	r30, r24
     626:	33 96       	adiw	r30, 0x03	; 3
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	6f ee       	ldi	r22, 0xEF	; 239
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
			}
		}
		AFTER(MSEC(200), self, resetDebounce, NULL);
     640:	c1 2c       	mov	r12, r1
     642:	d1 2c       	mov	r13, r1
     644:	0f 2e       	mov	r0, r31
     646:	f3 e0       	ldi	r31, 0x03	; 3
     648:	ef 2e       	mov	r14, r31
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	ff 2e       	mov	r15, r31
     64e:	f0 2d       	mov	r31, r0
     650:	8e 01       	movw	r16, r28
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	a9 01       	movw	r20, r18
     658:	6a e6       	ldi	r22, 0x6A	; 106
     65a:	78 e1       	ldi	r23, 0x18	; 24
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
     664:	44 c0       	rjmp	.+136    	; 0x6ee <movehorizontal+0x124>
	}
		
	//RIGHT
	else if(!PNE3) {
     666:	63 99       	sbic	0x0c, 3	; 12
     668:	42 c0       	rjmp	.+132    	; 0x6ee <movehorizontal+0x124>
		if (self->debounce == 0) {
     66a:	88 89       	ldd	r24, Y+16	; 0x10
     66c:	99 89       	ldd	r25, Y+17	; 0x11
     66e:	89 2b       	or	r24, r25
     670:	f1 f5       	brne	.+124    	; 0x6ee <movehorizontal+0x124>
			self->debounce = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	99 8b       	std	Y+17, r25	; 0x11
     678:	88 8b       	std	Y+16, r24	; 0x10
			if (self->active < 1) {
     67a:	8c 85       	ldd	r24, Y+12	; 0x0c
     67c:	9d 85       	ldd	r25, Y+13	; 0x0d
     67e:	18 16       	cp	r1, r24
     680:	19 06       	cpc	r1, r25
     682:	1c f1       	brlt	.+70     	; 0x6ca <movehorizontal+0x100>
				SYNC(self->gui[self->active], switchActive, NULL);
     684:	fc 01       	movw	r30, r24
     686:	34 96       	adiw	r30, 0x04	; 4
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ec 0f       	add	r30, r28
     68e:	fd 1f       	adc	r31, r29
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	6f ee       	ldi	r22, 0xEF	; 239
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
				self->active += 1;
     6a0:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a2:	9d 85       	ldd	r25, Y+13	; 0x0d
     6a4:	9c 01       	movw	r18, r24
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	3d 87       	std	Y+13, r19	; 0x0d
     6ac:	2c 87       	std	Y+12, r18	; 0x0c
				SYNC(self->gui[self->active], switchActive, NULL);
     6ae:	fc 01       	movw	r30, r24
     6b0:	35 96       	adiw	r30, 0x05	; 5
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ec 0f       	add	r30, r28
     6b8:	fd 1f       	adc	r31, r29
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	6f ee       	ldi	r22, 0xEF	; 239
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
			}
		AFTER(MSEC(200), self, resetDebounce, NULL);
     6ca:	c1 2c       	mov	r12, r1
     6cc:	d1 2c       	mov	r13, r1
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f3 e0       	ldi	r31, 0x03	; 3
     6d2:	ef 2e       	mov	r14, r31
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	ff 2e       	mov	r15, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	8e 01       	movw	r16, r28
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	a9 01       	movw	r20, r18
     6e2:	6a e6       	ldi	r22, 0x6A	; 106
     6e4:	78 e1       	ldi	r23, 0x18	; 24
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		}
	}
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	cf 90       	pop	r12
     6fe:	08 95       	ret

00000700 <main>:


int main(void){	
	
	
	ArrPulse[0].PS = &PS;
     700:	e0 e2       	ldi	r30, 0x20	; 32
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	82 e5       	ldi	r24, 0x52	; 82
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	90 87       	std	Z+8, r25	; 0x08
     70a:	87 83       	std	Z+7, r24	; 0x07
	ArrPulse[1].PS = &PS;
     70c:	94 8b       	std	Z+20, r25	; 0x14
     70e:	83 8b       	std	Z+19, r24	; 0x13
	ArrPulse[0].gui = &ArrGui[0];
     710:	26 e1       	ldi	r18, 0x16	; 22
     712:	31 e0       	ldi	r19, 0x01	; 1
     714:	32 87       	std	Z+10, r19	; 0x0a
     716:	21 87       	std	Z+9, r18	; 0x09
	ArrPulse[1].gui = &ArrGui[1];
     718:	8b e1       	ldi	r24, 0x1B	; 27
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	96 8b       	std	Z+22, r25	; 0x16
     71e:	85 8b       	std	Z+21, r24	; 0x15

    input.ArrPulse[0] = &ArrPulse[0];
     720:	a0 e4       	ldi	r26, 0x40	; 64
     722:	b1 e0       	ldi	r27, 0x01	; 1
     724:	15 96       	adiw	r26, 0x05	; 5
     726:	fc 93       	st	X, r31
     728:	ee 93       	st	-X, r30
     72a:	14 97       	sbiw	r26, 0x04	; 4
	input.ArrPulse[1] = &ArrPulse[1];
     72c:	4c e2       	ldi	r20, 0x2C	; 44
     72e:	51 e0       	ldi	r21, 0x01	; 1
     730:	17 96       	adiw	r26, 0x07	; 7
     732:	5c 93       	st	X, r21
     734:	4e 93       	st	-X, r20
     736:	16 97       	sbiw	r26, 0x06	; 6
    input.gui[0] = &ArrGui[0];
     738:	19 96       	adiw	r26, 0x09	; 9
     73a:	3c 93       	st	X, r19
     73c:	2e 93       	st	-X, r18
     73e:	18 97       	sbiw	r26, 0x08	; 8
	input.gui[1] = &ArrGui[1];
     740:	1b 96       	adiw	r26, 0x0b	; 11
     742:	9c 93       	st	X, r25
     744:	8e 93       	st	-X, r24
     746:	1a 97       	sbiw	r26, 0x0a	; 10
	
	INSTALL(&input, movevertical, IRQ_PCINT1);
     748:	42 e0       	ldi	r20, 0x02	; 2
     74a:	6c e6       	ldi	r22, 0x6C	; 108
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 59 11 	call	0x22b2	; 0x22b2 <install>
	INSTALL(&input, movehorizontal, IRQ_PCINT0);
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	65 ee       	ldi	r22, 0xE5	; 229
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <install>
	
	TINYTIMBER(&input, initialize, NULL);
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	67 e0       	ldi	r22, 0x07	; 7
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	80 e4       	ldi	r24, 0x40	; 64
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <tinytimber>
}
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret

00000778 <generatePulse>:
#define PNE3 (PINE & (1<<PINE3))
#define PNB4 (PINB & (1<<PINB4))
#define PNB6 (PINB & (1<<PINB6))
#define PNB7 (PINB & (1<<PINB7))

void generatePulse(PulseGen *self) {	
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	uint8_t frq = self->freq;
     78c:	bd 80       	ldd	r11, Y+5	; 0x05
	if (frq > 0) {
     78e:	bb 20       	and	r11, r11
     790:	d9 f1       	breq	.+118    	; 0x808 <generatePulse+0x90>
		ASYNC(self->PS, sendPulse, self->pin);
     792:	cc 80       	ldd	r12, Y+4	; 0x04
     794:	0f 81       	ldd	r16, Y+7	; 0x07
     796:	18 85       	ldd	r17, Y+8	; 0x08
     798:	d1 2c       	mov	r13, r1
     79a:	0f 2e       	mov	r0, r31
     79c:	f2 e9       	ldi	r31, 0x92	; 146
     79e:	ef 2e       	mov	r14, r31
     7a0:	f4 e0       	ldi	r31, 0x04	; 4
     7a2:	ff 2e       	mov	r15, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		AFTER(USEC(1000000/(frq*2)), self, generatePulse, NULL);
     7b6:	2b 2d       	mov	r18, r11
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	03 2e       	mov	r0, r19
     7c0:	00 0c       	add	r0, r0
     7c2:	44 0b       	sbc	r20, r20
     7c4:	55 0b       	sbc	r21, r21
     7c6:	60 e4       	ldi	r22, 0x40	; 64
     7c8:	72 e4       	ldi	r23, 0x42	; 66
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 8b 11 	call	0x2316	; 0x2316 <__divmodsi4>
     7d2:	ad e7       	ldi	r26, 0x7D	; 125
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	0e 94 aa 11 	call	0x2354	; 0x2354 <__muluhisi3>
     7da:	20 ea       	ldi	r18, 0xA0	; 160
     7dc:	3f e0       	ldi	r19, 0x0F	; 15
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	0e 94 8b 11 	call	0x2316	; 0x2316 <__divmodsi4>
     7e6:	ca 01       	movw	r24, r20
     7e8:	b9 01       	movw	r22, r18
     7ea:	c1 2c       	mov	r12, r1
     7ec:	d1 2c       	mov	r13, r1
     7ee:	0f 2e       	mov	r0, r31
     7f0:	fc eb       	ldi	r31, 0xBC	; 188
     7f2:	ef 2e       	mov	r14, r31
     7f4:	f3 e0       	ldi	r31, 0x03	; 3
     7f6:	ff 2e       	mov	r15, r31
     7f8:	f0 2d       	mov	r31, r0
     7fa:	8e 01       	movw	r16, r28
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	a9 01       	movw	r20, r18
     802:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
     806:	24 c0       	rjmp	.+72     	; 0x850 <generatePulse+0xd8>
	} else {
		ASYNC(self->PS, resetPin, self->pin);
     808:	cc 80       	ldd	r12, Y+4	; 0x04
     80a:	0f 81       	ldd	r16, Y+7	; 0x07
     80c:	18 85       	ldd	r17, Y+8	; 0x08
     80e:	d1 2c       	mov	r13, r1
     810:	0f 2e       	mov	r0, r31
     812:	fd e9       	ldi	r31, 0x9D	; 157
     814:	ef 2e       	mov	r14, r31
     816:	f4 e0       	ldi	r31, 0x04	; 4
     818:	ff 2e       	mov	r15, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	cb 01       	movw	r24, r22
     828:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		AFTER(MSEC(500), self, generatePulse, NULL);
     82c:	c1 2c       	mov	r12, r1
     82e:	d1 2c       	mov	r13, r1
     830:	0f 2e       	mov	r0, r31
     832:	fc eb       	ldi	r31, 0xBC	; 188
     834:	ef 2e       	mov	r14, r31
     836:	f3 e0       	ldi	r31, 0x03	; 3
     838:	ff 2e       	mov	r15, r31
     83a:	f0 2d       	mov	r31, r0
     83c:	8e 01       	movw	r16, r28
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	a9 01       	movw	r20, r18
     844:	69 e0       	ldi	r22, 0x09	; 9
     846:	7d e3       	ldi	r23, 0x3D	; 61
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
	}
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	bf 90       	pop	r11
     862:	08 95       	ret

00000864 <smoothIncrement>:


void smoothIncrement(PulseGen *self){
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
    if (!PNB6 && self->freq < 99){
     876:	1e 99       	sbic	0x03, 6	; 3
     878:	20 c0       	rjmp	.+64     	; 0x8ba <smoothIncrement+0x56>
     87a:	4d 81       	ldd	r20, Y+5	; 0x05
     87c:	43 36       	cpi	r20, 0x63	; 99
     87e:	e8 f4       	brcc	.+58     	; 0x8ba <smoothIncrement+0x56>
        self->freq += 1;
     880:	4f 5f       	subi	r20, 0xFF	; 255
     882:	4d 83       	std	Y+5, r20	; 0x05
        SYNC(self->gui, printAt, self->freq);
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	69 eb       	ldi	r22, 0xB9	; 185
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	9a 85       	ldd	r25, Y+10	; 0x0a
     88e:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
		if (!PNB6) {
     892:	1e 99       	sbic	0x03, 6	; 3
     894:	12 c0       	rjmp	.+36     	; 0x8ba <smoothIncrement+0x56>
			AFTER(MSEC(100), self, smoothIncrement, 0);
     896:	c1 2c       	mov	r12, r1
     898:	d1 2c       	mov	r13, r1
     89a:	0f 2e       	mov	r0, r31
     89c:	f2 e3       	ldi	r31, 0x32	; 50
     89e:	ef 2e       	mov	r14, r31
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	8e 01       	movw	r16, r28
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	a9 01       	movw	r20, r18
     8ae:	65 e3       	ldi	r22, 0x35	; 53
     8b0:	7c e0       	ldi	r23, 0x0C	; 12
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
		}
    }
    if (!PNB7 && self->freq > 0){
     8ba:	1f 99       	sbic	0x03, 7	; 3
     8bc:	1e c0       	rjmp	.+60     	; 0x8fa <smoothIncrement+0x96>
     8be:	4d 81       	ldd	r20, Y+5	; 0x05
     8c0:	44 23       	and	r20, r20
     8c2:	d9 f0       	breq	.+54     	; 0x8fa <smoothIncrement+0x96>
        self->freq -= 1;
     8c4:	41 50       	subi	r20, 0x01	; 1
     8c6:	4d 83       	std	Y+5, r20	; 0x05
        SYNC(self->gui, printAt, self->freq);
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	69 eb       	ldi	r22, 0xB9	; 185
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d2:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
        AFTER(MSEC(100), self, smoothIncrement, 0);
     8d6:	c1 2c       	mov	r12, r1
     8d8:	d1 2c       	mov	r13, r1
     8da:	0f 2e       	mov	r0, r31
     8dc:	f2 e3       	ldi	r31, 0x32	; 50
     8de:	ef 2e       	mov	r14, r31
     8e0:	f4 e0       	ldi	r31, 0x04	; 4
     8e2:	ff 2e       	mov	r15, r31
     8e4:	f0 2d       	mov	r31, r0
     8e6:	8e 01       	movw	r16, r28
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	a9 01       	movw	r20, r18
     8ee:	65 e3       	ldi	r22, 0x35	; 53
     8f0:	7c e0       	ldi	r23, 0x0C	; 12
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
    }
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <getFrequency>:

uint8_t getFrequency(PulseGen *self){
    return self->freq;
}
     90c:	fc 01       	movw	r30, r24
     90e:	85 81       	ldd	r24, Z+5	; 0x05
     910:	08 95       	ret

00000912 <setFrequency>:

void setFrequency(PulseGen *self, int newfreq){
    self->freq = newfreq;
     912:	fc 01       	movw	r30, r24
     914:	65 83       	std	Z+5, r22	; 0x05
     916:	08 95       	ret

00000918 <getPrev>:
}

uint8_t getPrev(PulseGen *self) {
    return self->prev;
}
     918:	fc 01       	movw	r30, r24
     91a:	86 81       	ldd	r24, Z+6	; 0x06
     91c:	08 95       	ret

0000091e <setPrev>:

void setPrev(PulseGen *self, int newPrev) {
    self->prev = newPrev;
     91e:	fc 01       	movw	r30, r24
     920:	66 83       	std	Z+6, r22	; 0x06
     922:	08 95       	ret

00000924 <sendPulse>:
#include <stdint.h>

void sendPulse(PulseSender *self, uint8_t pin){

    //Invert bit at position pin
    PORTE ^= 0x1 << pin;
     924:	2e b1       	in	r18, 0x0e	; 14
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <sendPulse+0xc>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	6a 95       	dec	r22
     932:	e2 f7       	brpl	.-8      	; 0x92c <sendPulse+0x8>
     934:	82 27       	eor	r24, r18
     936:	8e b9       	out	0x0e, r24	; 14
     938:	08 95       	ret

0000093a <resetPin>:
}   

void resetPin(PulseSender *self, uint8_t pin) {
    PORTE &= ~(0x1 << pin);
     93a:	2e b1       	in	r18, 0x0e	; 14
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	02 c0       	rjmp	.+4      	; 0x946 <resetPin+0xc>
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	6a 95       	dec	r22
     948:	e2 f7       	brpl	.-8      	; 0x942 <resetPin+0x8>
     94a:	80 95       	com	r24
     94c:	82 23       	and	r24, r18
     94e:	8e b9       	out	0x0e, r24	; 14
     950:	08 95       	ret

00000952 <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     952:	db 01       	movw	r26, r22
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <remove+0x14>
     95e:	df 01       	movw	r26, r30
     960:	01 90       	ld	r0, Z+
     962:	f0 81       	ld	r31, Z
     964:	e0 2d       	mov	r30, r0
     966:	30 97       	sbiw	r30, 0x00	; 0
     968:	19 f0       	breq	.+6      	; 0x970 <remove+0x1e>
     96a:	e8 17       	cp	r30, r24
     96c:	f9 07       	cpc	r31, r25
     96e:	b9 f7       	brne	.-18     	; 0x95e <remove+0xc>
     970:	30 97       	sbiw	r30, 0x00	; 0
     972:	89 f0       	breq	.+34     	; 0x996 <remove+0x44>
     974:	10 97       	sbiw	r26, 0x00	; 0
     976:	39 f0       	breq	.+14     	; 0x986 <remove+0x34>
     978:	80 81       	ld	r24, Z
     97a:	91 81       	ldd	r25, Z+1	; 0x01
     97c:	8d 93       	st	X+, r24
     97e:	9c 93       	st	X, r25
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	fb 01       	movw	r30, r22
     98c:	91 83       	std	Z+1, r25	; 0x01
     98e:	80 83       	st	Z, r24
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	08 95       	ret
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret

0000099c <initialize>:
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <initialize+0x6>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <initialize+0x8>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	18 c0       	rjmp	.+48     	; 0x9de <initialize+0x42>
     9ae:	ac 01       	movw	r20, r24
     9b0:	4f 5f       	subi	r20, 0xFF	; 255
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	9a 01       	movw	r18, r20
     9b6:	22 95       	swap	r18
     9b8:	32 95       	swap	r19
     9ba:	30 7f       	andi	r19, 0xF0	; 240
     9bc:	32 27       	eor	r19, r18
     9be:	20 7f       	andi	r18, 0xF0	; 240
     9c0:	32 27       	eor	r19, r18
     9c2:	27 5c       	subi	r18, 0xC7	; 199
     9c4:	3d 4f       	sbci	r19, 0xFD	; 253
     9c6:	82 95       	swap	r24
     9c8:	92 95       	swap	r25
     9ca:	90 7f       	andi	r25, 0xF0	; 240
     9cc:	98 27       	eor	r25, r24
     9ce:	80 7f       	andi	r24, 0xF0	; 240
     9d0:	98 27       	eor	r25, r24
     9d2:	fc 01       	movw	r30, r24
     9d4:	e7 5c       	subi	r30, 0xC7	; 199
     9d6:	fd 4f       	sbci	r31, 0xFD	; 253
     9d8:	31 83       	std	Z+1, r19	; 0x01
     9da:	20 83       	st	Z, r18
     9dc:	ca 01       	movw	r24, r20
     9de:	8e 30       	cpi	r24, 0x0E	; 14
     9e0:	91 05       	cpc	r25, r1
     9e2:	2c f3       	brlt	.-54     	; 0x9ae <initialize+0x12>
     9e4:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <messages+0xe1>
     9e8:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <messages+0xe0>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	15 c0       	rjmp	.+42     	; 0xa1c <initialize+0x80>
     9f2:	ac 01       	movw	r20, r24
     9f4:	4f 5f       	subi	r20, 0xFF	; 255
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	6d e1       	ldi	r22, 0x1D	; 29
     9fa:	64 9f       	mul	r22, r20
     9fc:	90 01       	movw	r18, r0
     9fe:	65 9f       	mul	r22, r21
     a00:	30 0d       	add	r19, r0
     a02:	11 24       	eor	r1, r1
     a04:	2c 57       	subi	r18, 0x7C	; 124
     a06:	3e 4f       	sbci	r19, 0xFE	; 254
     a08:	68 9f       	mul	r22, r24
     a0a:	f0 01       	movw	r30, r0
     a0c:	69 9f       	mul	r22, r25
     a0e:	f0 0d       	add	r31, r0
     a10:	11 24       	eor	r1, r1
     a12:	ec 57       	subi	r30, 0x7C	; 124
     a14:	fe 4f       	sbci	r31, 0xFE	; 254
     a16:	31 83       	std	Z+1, r19	; 0x01
     a18:	20 83       	st	Z, r18
     a1a:	ca 01       	movw	r24, r20
     a1c:	83 30       	cpi	r24, 0x03	; 3
     a1e:	91 05       	cpc	r25, r1
     a20:	44 f3       	brlt	.-48     	; 0x9f2 <initialize+0x56>
     a22:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <threads+0x58>
     a26:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <threads+0x57>
     a2a:	1a 82       	std	Y+2, r1	; 0x02
     a2c:	19 82       	std	Y+1, r1	; 0x01
     a2e:	32 c0       	rjmp	.+100    	; 0xa94 <initialize+0xf8>
     a30:	2d e1       	ldi	r18, 0x1D	; 29
     a32:	49 81       	ldd	r20, Y+1	; 0x01
     a34:	5a 81       	ldd	r21, Y+2	; 0x02
     a36:	24 9f       	mul	r18, r20
     a38:	c0 01       	movw	r24, r0
     a3a:	25 9f       	mul	r18, r21
     a3c:	90 0d       	add	r25, r0
     a3e:	11 24       	eor	r1, r1
     a40:	fc 01       	movw	r30, r24
     a42:	e6 57       	subi	r30, 0x76	; 118
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	fc 83       	std	Y+4, r31	; 0x04
     a48:	eb 83       	std	Y+3, r30	; 0x03
     a4a:	cf 01       	movw	r24, r30
     a4c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <setjmp>
     a50:	20 e6       	ldi	r18, 0x60	; 96
     a52:	49 81       	ldd	r20, Y+1	; 0x01
     a54:	5a 81       	ldd	r21, Y+2	; 0x02
     a56:	24 9f       	mul	r18, r20
     a58:	c0 01       	movw	r24, r0
     a5a:	25 9f       	mul	r18, r21
     a5c:	90 0d       	add	r25, r0
     a5e:	11 24       	eor	r1, r1
     a60:	8b 57       	subi	r24, 0x7B	; 123
     a62:	9c 4f       	sbci	r25, 0xFC	; 252
     a64:	eb 81       	ldd	r30, Y+3	; 0x03
     a66:	fc 81       	ldd	r31, Y+4	; 0x04
     a68:	91 8b       	std	Z+17, r25	; 0x11
     a6a:	80 8b       	std	Z+16, r24	; 0x10
     a6c:	93 8b       	std	Z+19, r25	; 0x13
     a6e:	82 8b       	std	Z+18, r24	; 0x12
     a70:	8b eb       	ldi	r24, 0xBB	; 187
     a72:	90 e1       	ldi	r25, 0x10	; 16
     a74:	96 8b       	std	Z+22, r25	; 0x16
     a76:	85 8b       	std	Z+21, r24	; 0x15
     a78:	8d e1       	ldi	r24, 0x1D	; 29
     a7a:	84 9f       	mul	r24, r20
     a7c:	f0 01       	movw	r30, r0
     a7e:	85 9f       	mul	r24, r21
     a80:	f0 0d       	add	r31, r0
     a82:	11 24       	eor	r1, r1
     a84:	ec 57       	subi	r30, 0x7C	; 124
     a86:	fe 4f       	sbci	r31, 0xFE	; 254
     a88:	15 82       	std	Z+5, r1	; 0x05
     a8a:	14 82       	std	Z+4, r1	; 0x04
     a8c:	4f 5f       	subi	r20, 0xFF	; 255
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	5a 83       	std	Y+2, r21	; 0x02
     a92:	49 83       	std	Y+1, r20	; 0x01
     a94:	29 81       	ldd	r18, Y+1	; 0x01
     a96:	3a 81       	ldd	r19, Y+2	; 0x02
     a98:	24 30       	cpi	r18, 0x04	; 4
     a9a:	31 05       	cpc	r19, r1
     a9c:	4c f2       	brlt	.-110    	; 0xa30 <initialize+0x94>
     a9e:	ec e1       	ldi	r30, 0x1C	; 28
     aa0:	f2 e0       	ldi	r31, 0x02	; 2
     aa2:	11 82       	std	Z+1, r1	; 0x01
     aa4:	10 82       	st	Z, r1
     aa6:	15 82       	std	Z+5, r1	; 0x05
     aa8:	14 82       	std	Z+4, r1	; 0x04
     aaa:	13 82       	std	Z+3, r1	; 0x03
     aac:	12 82       	std	Z+2, r1	; 0x02
     aae:	e1 e6       	ldi	r30, 0x61	; 97
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 e8       	ldi	r24, 0x80	; 128
     ab4:	80 83       	st	Z, r24
     ab6:	10 82       	st	Z, r1
     ab8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     abc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ac0:	84 e0       	ldi	r24, 0x04	; 4
     ac2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <dispatch>:
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	00 d0       	rcall	.+0      	; 0xae0 <dispatch+0x6>
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <current>
     aec:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <current+0x1>
     af0:	06 96       	adiw	r24, 0x06	; 6
     af2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <setjmp>
     af6:	89 2b       	or	r24, r25
     af8:	59 f4       	brne	.+22     	; 0xb10 <dispatch+0x36>
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <current+0x1>
     b02:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <current>
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	06 96       	adiw	r24, 0x06	; 6
     b0c:	0e 94 06 12 	call	0x240c	; 0x240c <longjmp>
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <enqueueByDeadline>:
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	eb 01       	movw	r28, r22
     b28:	e8 81       	ld	r30, Y
     b2a:	f9 81       	ldd	r31, Y+1	; 0x01
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <enqueueByDeadline+0x20>
     b32:	ef 01       	movw	r28, r30
     b34:	01 90       	ld	r0, Z+
     b36:	f0 81       	ld	r31, Z
     b38:	e0 2d       	mov	r30, r0
     b3a:	30 97       	sbiw	r30, 0x00	; 0
     b3c:	79 f0       	breq	.+30     	; 0xb5c <enqueueByDeadline+0x42>
     b3e:	06 81       	ldd	r16, Z+6	; 0x06
     b40:	17 81       	ldd	r17, Z+7	; 0x07
     b42:	20 85       	ldd	r18, Z+8	; 0x08
     b44:	31 85       	ldd	r19, Z+9	; 0x09
     b46:	16 96       	adiw	r26, 0x06	; 6
     b48:	4d 91       	ld	r20, X+
     b4a:	5d 91       	ld	r21, X+
     b4c:	6d 91       	ld	r22, X+
     b4e:	7c 91       	ld	r23, X
     b50:	19 97       	sbiw	r26, 0x09	; 9
     b52:	40 17       	cp	r20, r16
     b54:	51 07       	cpc	r21, r17
     b56:	62 07       	cpc	r22, r18
     b58:	73 07       	cpc	r23, r19
     b5a:	5c f7       	brge	.-42     	; 0xb32 <enqueueByDeadline+0x18>
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	fc 93       	st	X, r31
     b60:	ee 93       	st	-X, r30
     b62:	20 97       	sbiw	r28, 0x00	; 0
     b64:	21 f4       	brne	.+8      	; 0xb6e <enqueueByDeadline+0x54>
     b66:	fc 01       	movw	r30, r24
     b68:	b1 83       	std	Z+1, r27	; 0x01
     b6a:	a0 83       	st	Z, r26
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <enqueueByDeadline+0x58>
     b6e:	b9 83       	std	Y+1, r27	; 0x01
     b70:	a8 83       	st	Y, r26
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <enqueueByBaseline>:
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	eb 01       	movw	r28, r22
     b8a:	e8 81       	ld	r30, Y
     b8c:	f9 81       	ldd	r31, Y+1	; 0x01
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
     b90:	d0 e0       	ldi	r29, 0x00	; 0
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <enqueueByBaseline+0x20>
     b94:	ef 01       	movw	r28, r30
     b96:	01 90       	ld	r0, Z+
     b98:	f0 81       	ld	r31, Z
     b9a:	e0 2d       	mov	r30, r0
     b9c:	30 97       	sbiw	r30, 0x00	; 0
     b9e:	79 f0       	breq	.+30     	; 0xbbe <enqueueByBaseline+0x42>
     ba0:	02 81       	ldd	r16, Z+2	; 0x02
     ba2:	13 81       	ldd	r17, Z+3	; 0x03
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	12 96       	adiw	r26, 0x02	; 2
     baa:	4d 91       	ld	r20, X+
     bac:	5d 91       	ld	r21, X+
     bae:	6d 91       	ld	r22, X+
     bb0:	7c 91       	ld	r23, X
     bb2:	15 97       	sbiw	r26, 0x05	; 5
     bb4:	40 17       	cp	r20, r16
     bb6:	51 07       	cpc	r21, r17
     bb8:	62 07       	cpc	r22, r18
     bba:	73 07       	cpc	r23, r19
     bbc:	5c f7       	brge	.-42     	; 0xb94 <enqueueByBaseline+0x18>
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	fc 93       	st	X, r31
     bc2:	ee 93       	st	-X, r30
     bc4:	20 97       	sbiw	r28, 0x00	; 0
     bc6:	21 f4       	brne	.+8      	; 0xbd0 <enqueueByBaseline+0x54>
     bc8:	fc 01       	movw	r30, r24
     bca:	b1 83       	std	Z+1, r27	; 0x01
     bcc:	a0 83       	st	Z, r26
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <enqueueByBaseline+0x58>
     bd0:	b9 83       	std	Y+1, r27	; 0x01
     bd2:	a8 83       	st	Y, r26
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <dequeue>:
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <dequeue+0x6>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	fc 01       	movw	r30, r24
     bea:	20 81       	ld	r18, Z
     bec:	31 81       	ldd	r19, Z+1	; 0x01
     bee:	3a 83       	std	Y+2, r19	; 0x02
     bf0:	29 83       	std	Y+1, r18	; 0x01
     bf2:	29 81       	ldd	r18, Y+1	; 0x01
     bf4:	3a 81       	ldd	r19, Y+2	; 0x02
     bf6:	23 2b       	or	r18, r19
     bf8:	51 f0       	breq	.+20     	; 0xc0e <dequeue+0x30>
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	20 81       	ld	r18, Z
     c00:	31 81       	ldd	r19, Z+1	; 0x01
     c02:	fc 01       	movw	r30, r24
     c04:	31 83       	std	Z+1, r19	; 0x01
     c06:	20 83       	st	Z, r18
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	0b c0       	rjmp	.+22     	; 0xc24 <dequeue+0x46>
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     c14:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     c18:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	88 95       	sleep
     c22:	fc cf       	rjmp	.-8      	; 0xc1c <dequeue+0x3e>
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <insert>:
     c2e:	fb 01       	movw	r30, r22
     c30:	20 81       	ld	r18, Z
     c32:	31 81       	ldd	r19, Z+1	; 0x01
     c34:	fc 01       	movw	r30, r24
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	20 83       	st	Z, r18
     c3a:	fb 01       	movw	r30, r22
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24
     c40:	08 95       	ret

00000c42 <push>:
     c42:	fb 01       	movw	r30, r22
     c44:	20 81       	ld	r18, Z
     c46:	31 81       	ldd	r19, Z+1	; 0x01
     c48:	fc 01       	movw	r30, r24
     c4a:	31 83       	std	Z+1, r19	; 0x01
     c4c:	20 83       	st	Z, r18
     c4e:	fb 01       	movw	r30, r22
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	80 83       	st	Z, r24
     c54:	08 95       	ret

00000c56 <pop>:
     c56:	dc 01       	movw	r26, r24
     c58:	ed 91       	ld	r30, X+
     c5a:	fc 91       	ld	r31, X
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	20 81       	ld	r18, Z
     c60:	31 81       	ldd	r19, Z+1	; 0x01
     c62:	2d 93       	st	X+, r18
     c64:	3c 93       	st	X, r19
     c66:	cf 01       	movw	r24, r30
     c68:	08 95       	ret

00000c6a <schedule>:
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <activeStack>
     c72:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <activeStack+0x1>
     c76:	c2 81       	ldd	r28, Z+2	; 0x02
     c78:	d3 81       	ldd	r29, Z+3	; 0x03
     c7a:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
     c7e:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	19 f1       	breq	.+70     	; 0xccc <schedule+0x62>
     c86:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <threadPool>
     c8a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <threadPool+0x1>
     c8e:	89 2b       	or	r24, r25
     c90:	e9 f0       	breq	.+58     	; 0xccc <schedule+0x62>
     c92:	20 97       	sbiw	r28, 0x00	; 0
     c94:	69 f0       	breq	.+26     	; 0xcb0 <schedule+0x46>
     c96:	86 81       	ldd	r24, Z+6	; 0x06
     c98:	97 81       	ldd	r25, Z+7	; 0x07
     c9a:	a0 85       	ldd	r26, Z+8	; 0x08
     c9c:	b1 85       	ldd	r27, Z+9	; 0x09
     c9e:	4e 81       	ldd	r20, Y+6	; 0x06
     ca0:	5f 81       	ldd	r21, Y+7	; 0x07
     ca2:	68 85       	ldd	r22, Y+8	; 0x08
     ca4:	79 85       	ldd	r23, Y+9	; 0x09
     ca6:	84 1b       	sub	r24, r20
     ca8:	95 0b       	sbc	r25, r21
     caa:	a6 0b       	sbc	r26, r22
     cac:	b7 0b       	sbc	r27, r23
     cae:	72 f4       	brpl	.+28     	; 0xccc <schedule+0x62>
     cb0:	8c e3       	ldi	r24, 0x3C	; 60
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 2b 06 	call	0xc56	; 0xc56 <pop>
     cb8:	6a e3       	ldi	r22, 0x3A	; 58
     cba:	71 e0       	ldi	r23, 0x01	; 1
     cbc:	0e 94 21 06 	call	0xc42	; 0xc42 <push>
     cc0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <activeStack>
     cc4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <activeStack+0x1>
     cc8:	0e 94 6d 05 	call	0xada	; 0xada <dispatch>
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <__vector_1>:
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
     cfc:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
     d00:	ac 01       	movw	r20, r24
     d02:	09 2e       	mov	r0, r25
     d04:	00 0c       	add	r0, r0
     d06:	66 0b       	sbc	r22, r22
     d08:	77 0b       	sbc	r23, r23
     d0a:	9a 01       	movw	r18, r20
     d0c:	11 27       	eor	r17, r17
     d0e:	00 27       	eor	r16, r16
     d10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	40 2b       	or	r20, r16
     d1e:	51 2b       	or	r21, r17
     d20:	62 2b       	or	r22, r18
     d22:	73 2b       	or	r23, r19
     d24:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
     d28:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
     d2c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
     d30:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
     d34:	b0 9b       	sbis	0x16, 0	; 22
     d36:	1a c0       	rjmp	.+52     	; 0xd6c <__vector_1+0x9a>
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	09 2e       	mov	r0, r25
     d3c:	00 0c       	add	r0, r0
     d3e:	aa 0b       	sbc	r26, r26
     d40:	bb 0b       	sbc	r27, r27
     d42:	bc 01       	movw	r22, r24
     d44:	55 27       	eor	r21, r21
     d46:	44 27       	eor	r20, r20
     d48:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d4c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d50:	a0 e0       	ldi	r26, 0x00	; 0
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	84 2b       	or	r24, r20
     d56:	95 2b       	or	r25, r21
     d58:	a6 2b       	or	r26, r22
     d5a:	b7 2b       	or	r27, r23
     d5c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     d60:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     d64:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     d68:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     d6c:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable>
     d70:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1>
     d74:	30 97       	sbiw	r30, 0x00	; 0
     d76:	39 f0       	breq	.+14     	; 0xd86 <__vector_1+0xb4>
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable>
     d80:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1>
     d84:	09 95       	icall
     d86:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <__vector_2>:
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
     dd6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
     dda:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
     dde:	ac 01       	movw	r20, r24
     de0:	09 2e       	mov	r0, r25
     de2:	00 0c       	add	r0, r0
     de4:	66 0b       	sbc	r22, r22
     de6:	77 0b       	sbc	r23, r23
     de8:	9a 01       	movw	r18, r20
     dea:	11 27       	eor	r17, r17
     dec:	00 27       	eor	r16, r16
     dee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     df2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	40 2b       	or	r20, r16
     dfc:	51 2b       	or	r21, r17
     dfe:	62 2b       	or	r22, r18
     e00:	73 2b       	or	r23, r19
     e02:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
     e06:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
     e0a:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
     e0e:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
     e12:	b0 9b       	sbis	0x16, 0	; 22
     e14:	1a c0       	rjmp	.+52     	; 0xe4a <__vector_2+0x9a>
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	09 2e       	mov	r0, r25
     e1a:	00 0c       	add	r0, r0
     e1c:	aa 0b       	sbc	r26, r26
     e1e:	bb 0b       	sbc	r27, r27
     e20:	bc 01       	movw	r22, r24
     e22:	55 27       	eor	r21, r21
     e24:	44 27       	eor	r20, r20
     e26:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e2a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	84 2b       	or	r24, r20
     e34:	95 2b       	or	r25, r21
     e36:	a6 2b       	or	r26, r22
     e38:	b7 2b       	or	r27, r23
     e3a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e3e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e42:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e46:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e4a:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x2>
     e4e:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x3>
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	39 f0       	breq	.+14     	; 0xe64 <__vector_2+0xb4>
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x2>
     e5e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x3>
     e62:	09 95       	icall
     e64:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_3>:
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
     eb8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
     ebc:	ac 01       	movw	r20, r24
     ebe:	09 2e       	mov	r0, r25
     ec0:	00 0c       	add	r0, r0
     ec2:	66 0b       	sbc	r22, r22
     ec4:	77 0b       	sbc	r23, r23
     ec6:	9a 01       	movw	r18, r20
     ec8:	11 27       	eor	r17, r17
     eca:	00 27       	eor	r16, r16
     ecc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ed0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	40 2b       	or	r20, r16
     eda:	51 2b       	or	r21, r17
     edc:	62 2b       	or	r22, r18
     ede:	73 2b       	or	r23, r19
     ee0:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
     ee4:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
     ee8:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
     eec:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
     ef0:	b0 9b       	sbis	0x16, 0	; 22
     ef2:	1a c0       	rjmp	.+52     	; 0xf28 <__vector_3+0x9a>
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	09 2e       	mov	r0, r25
     ef8:	00 0c       	add	r0, r0
     efa:	aa 0b       	sbc	r26, r26
     efc:	bb 0b       	sbc	r27, r27
     efe:	bc 01       	movw	r22, r24
     f00:	55 27       	eor	r21, r21
     f02:	44 27       	eor	r20, r20
     f04:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f08:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	84 2b       	or	r24, r20
     f12:	95 2b       	or	r25, r21
     f14:	a6 2b       	or	r26, r22
     f16:	b7 2b       	or	r27, r23
     f18:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f1c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f20:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f24:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f28:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x4>
     f2c:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x5>
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	39 f0       	breq	.+14     	; 0xf42 <__vector_3+0xb4>
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x4>
     f3c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x5>
     f40:	09 95       	icall
     f42:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_4>:
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
     f92:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
     f96:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
     f9a:	ac 01       	movw	r20, r24
     f9c:	09 2e       	mov	r0, r25
     f9e:	00 0c       	add	r0, r0
     fa0:	66 0b       	sbc	r22, r22
     fa2:	77 0b       	sbc	r23, r23
     fa4:	9a 01       	movw	r18, r20
     fa6:	11 27       	eor	r17, r17
     fa8:	00 27       	eor	r16, r16
     faa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	40 2b       	or	r20, r16
     fb8:	51 2b       	or	r21, r17
     fba:	62 2b       	or	r22, r18
     fbc:	73 2b       	or	r23, r19
     fbe:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
     fc2:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
     fc6:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
     fca:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
     fce:	b0 9b       	sbis	0x16, 0	; 22
     fd0:	1a c0       	rjmp	.+52     	; 0x1006 <__vector_4+0x9a>
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	09 2e       	mov	r0, r25
     fd6:	00 0c       	add	r0, r0
     fd8:	aa 0b       	sbc	r26, r26
     fda:	bb 0b       	sbc	r27, r27
     fdc:	bc 01       	movw	r22, r24
     fde:	55 27       	eor	r21, r21
     fe0:	44 27       	eor	r20, r20
     fe2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fe6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	84 2b       	or	r24, r20
     ff0:	95 2b       	or	r25, r21
     ff2:	a6 2b       	or	r26, r22
     ff4:	b7 2b       	or	r27, r23
     ff6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     ffa:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     ffe:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1002:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1006:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x6>
    100a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x7>
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	39 f0       	breq	.+14     	; 0x1020 <__vector_4+0xb4>
    1012:	63 e0       	ldi	r22, 0x03	; 3
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x6>
    101a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x7>
    101e:	09 95       	icall
    1020:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_5>:
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1074:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1078:	ac 01       	movw	r20, r24
    107a:	09 2e       	mov	r0, r25
    107c:	00 0c       	add	r0, r0
    107e:	66 0b       	sbc	r22, r22
    1080:	77 0b       	sbc	r23, r23
    1082:	9a 01       	movw	r18, r20
    1084:	11 27       	eor	r17, r17
    1086:	00 27       	eor	r16, r16
    1088:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    108c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	40 2b       	or	r20, r16
    1096:	51 2b       	or	r21, r17
    1098:	62 2b       	or	r22, r18
    109a:	73 2b       	or	r23, r19
    109c:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    10a0:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    10a4:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    10a8:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    10ac:	b0 9b       	sbis	0x16, 0	; 22
    10ae:	1a c0       	rjmp	.+52     	; 0x10e4 <__vector_5+0x9a>
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	09 2e       	mov	r0, r25
    10b4:	00 0c       	add	r0, r0
    10b6:	aa 0b       	sbc	r26, r26
    10b8:	bb 0b       	sbc	r27, r27
    10ba:	bc 01       	movw	r22, r24
    10bc:	55 27       	eor	r21, r21
    10be:	44 27       	eor	r20, r20
    10c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	84 2b       	or	r24, r20
    10ce:	95 2b       	or	r25, r21
    10d0:	a6 2b       	or	r26, r22
    10d2:	b7 2b       	or	r27, r23
    10d4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    10d8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    10dc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    10e0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    10e4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x8>
    10e8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x9>
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	39 f0       	breq	.+14     	; 0x10fe <__vector_5+0xb4>
    10f0:	64 e0       	ldi	r22, 0x04	; 4
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x8>
    10f8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x9>
    10fc:	09 95       	icall
    10fe:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_10>:
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1152:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1156:	ac 01       	movw	r20, r24
    1158:	09 2e       	mov	r0, r25
    115a:	00 0c       	add	r0, r0
    115c:	66 0b       	sbc	r22, r22
    115e:	77 0b       	sbc	r23, r23
    1160:	9a 01       	movw	r18, r20
    1162:	11 27       	eor	r17, r17
    1164:	00 27       	eor	r16, r16
    1166:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    116a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	40 2b       	or	r20, r16
    1174:	51 2b       	or	r21, r17
    1176:	62 2b       	or	r22, r18
    1178:	73 2b       	or	r23, r19
    117a:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    117e:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1182:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1186:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    118a:	b0 9b       	sbis	0x16, 0	; 22
    118c:	1a c0       	rjmp	.+52     	; 0x11c2 <__vector_10+0x9a>
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	09 2e       	mov	r0, r25
    1192:	00 0c       	add	r0, r0
    1194:	aa 0b       	sbc	r26, r26
    1196:	bb 0b       	sbc	r27, r27
    1198:	bc 01       	movw	r22, r24
    119a:	55 27       	eor	r21, r21
    119c:	44 27       	eor	r20, r20
    119e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11a2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11a6:	a0 e0       	ldi	r26, 0x00	; 0
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	84 2b       	or	r24, r20
    11ac:	95 2b       	or	r25, r21
    11ae:	a6 2b       	or	r26, r22
    11b0:	b7 2b       	or	r27, r23
    11b2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    11b6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    11ba:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    11be:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    11c2:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xa>
    11c6:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xb>
    11ca:	30 97       	sbiw	r30, 0x00	; 0
    11cc:	39 f0       	breq	.+14     	; 0x11dc <__vector_10+0xb4>
    11ce:	65 e0       	ldi	r22, 0x05	; 5
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xa>
    11d6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xb>
    11da:	09 95       	icall
    11dc:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_11>:
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1230:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1234:	ac 01       	movw	r20, r24
    1236:	09 2e       	mov	r0, r25
    1238:	00 0c       	add	r0, r0
    123a:	66 0b       	sbc	r22, r22
    123c:	77 0b       	sbc	r23, r23
    123e:	9a 01       	movw	r18, r20
    1240:	11 27       	eor	r17, r17
    1242:	00 27       	eor	r16, r16
    1244:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1248:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	40 2b       	or	r20, r16
    1252:	51 2b       	or	r21, r17
    1254:	62 2b       	or	r22, r18
    1256:	73 2b       	or	r23, r19
    1258:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    125c:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1260:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1264:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1268:	b0 9b       	sbis	0x16, 0	; 22
    126a:	1a c0       	rjmp	.+52     	; 0x12a0 <__vector_11+0x9a>
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	09 2e       	mov	r0, r25
    1270:	00 0c       	add	r0, r0
    1272:	aa 0b       	sbc	r26, r26
    1274:	bb 0b       	sbc	r27, r27
    1276:	bc 01       	movw	r22, r24
    1278:	55 27       	eor	r21, r21
    127a:	44 27       	eor	r20, r20
    127c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1280:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	84 2b       	or	r24, r20
    128a:	95 2b       	or	r25, r21
    128c:	a6 2b       	or	r26, r22
    128e:	b7 2b       	or	r27, r23
    1290:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1294:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1298:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    129c:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    12a0:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xc>
    12a4:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xd>
    12a8:	30 97       	sbiw	r30, 0x00	; 0
    12aa:	39 f0       	breq	.+14     	; 0x12ba <__vector_11+0xb4>
    12ac:	66 e0       	ldi	r22, 0x06	; 6
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xc>
    12b4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xd>
    12b8:	09 95       	icall
    12ba:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_12>:
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	5f 93       	push	r21
    12fa:	6f 93       	push	r22
    12fc:	7f 93       	push	r23
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	af 93       	push	r26
    1304:	bf 93       	push	r27
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
    130a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    130e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1312:	ac 01       	movw	r20, r24
    1314:	09 2e       	mov	r0, r25
    1316:	00 0c       	add	r0, r0
    1318:	66 0b       	sbc	r22, r22
    131a:	77 0b       	sbc	r23, r23
    131c:	9a 01       	movw	r18, r20
    131e:	11 27       	eor	r17, r17
    1320:	00 27       	eor	r16, r16
    1322:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1326:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	40 2b       	or	r20, r16
    1330:	51 2b       	or	r21, r17
    1332:	62 2b       	or	r22, r18
    1334:	73 2b       	or	r23, r19
    1336:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    133a:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    133e:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1342:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1346:	b0 9b       	sbis	0x16, 0	; 22
    1348:	1a c0       	rjmp	.+52     	; 0x137e <__vector_12+0x9a>
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	09 2e       	mov	r0, r25
    134e:	00 0c       	add	r0, r0
    1350:	aa 0b       	sbc	r26, r26
    1352:	bb 0b       	sbc	r27, r27
    1354:	bc 01       	movw	r22, r24
    1356:	55 27       	eor	r21, r21
    1358:	44 27       	eor	r20, r20
    135a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    135e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	84 2b       	or	r24, r20
    1368:	95 2b       	or	r25, r21
    136a:	a6 2b       	or	r26, r22
    136c:	b7 2b       	or	r27, r23
    136e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1372:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1376:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    137a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    137e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0xe>
    1382:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0xf>
    1386:	30 97       	sbiw	r30, 0x00	; 0
    1388:	39 f0       	breq	.+14     	; 0x1398 <__vector_12+0xb4>
    138a:	67 e0       	ldi	r22, 0x07	; 7
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0xe>
    1392:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0xf>
    1396:	09 95       	icall
    1398:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <__vector_13>:
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
    13e8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    13ec:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    13f0:	ac 01       	movw	r20, r24
    13f2:	09 2e       	mov	r0, r25
    13f4:	00 0c       	add	r0, r0
    13f6:	66 0b       	sbc	r22, r22
    13f8:	77 0b       	sbc	r23, r23
    13fa:	9a 01       	movw	r18, r20
    13fc:	11 27       	eor	r17, r17
    13fe:	00 27       	eor	r16, r16
    1400:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1404:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	40 2b       	or	r20, r16
    140e:	51 2b       	or	r21, r17
    1410:	62 2b       	or	r22, r18
    1412:	73 2b       	or	r23, r19
    1414:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    1418:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    141c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1420:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1424:	b0 9b       	sbis	0x16, 0	; 22
    1426:	1a c0       	rjmp	.+52     	; 0x145c <__vector_13+0x9a>
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	09 2e       	mov	r0, r25
    142c:	00 0c       	add	r0, r0
    142e:	aa 0b       	sbc	r26, r26
    1430:	bb 0b       	sbc	r27, r27
    1432:	bc 01       	movw	r22, r24
    1434:	55 27       	eor	r21, r21
    1436:	44 27       	eor	r20, r20
    1438:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    143c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	84 2b       	or	r24, r20
    1446:	95 2b       	or	r25, r21
    1448:	a6 2b       	or	r26, r22
    144a:	b7 2b       	or	r27, r23
    144c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1450:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1454:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1458:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    145c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x10>
    1460:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x11>
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	39 f0       	breq	.+14     	; 0x1476 <__vector_13+0xb4>
    1468:	68 e0       	ldi	r22, 0x08	; 8
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x10>
    1470:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x11>
    1474:	09 95       	icall
    1476:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_14>:
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    14ca:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    14ce:	ac 01       	movw	r20, r24
    14d0:	09 2e       	mov	r0, r25
    14d2:	00 0c       	add	r0, r0
    14d4:	66 0b       	sbc	r22, r22
    14d6:	77 0b       	sbc	r23, r23
    14d8:	9a 01       	movw	r18, r20
    14da:	11 27       	eor	r17, r17
    14dc:	00 27       	eor	r16, r16
    14de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	40 2b       	or	r20, r16
    14ec:	51 2b       	or	r21, r17
    14ee:	62 2b       	or	r22, r18
    14f0:	73 2b       	or	r23, r19
    14f2:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    14f6:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    14fa:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    14fe:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1502:	b0 9b       	sbis	0x16, 0	; 22
    1504:	1a c0       	rjmp	.+52     	; 0x153a <__vector_14+0x9a>
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	09 2e       	mov	r0, r25
    150a:	00 0c       	add	r0, r0
    150c:	aa 0b       	sbc	r26, r26
    150e:	bb 0b       	sbc	r27, r27
    1510:	bc 01       	movw	r22, r24
    1512:	55 27       	eor	r21, r21
    1514:	44 27       	eor	r20, r20
    1516:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    151a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	84 2b       	or	r24, r20
    1524:	95 2b       	or	r25, r21
    1526:	a6 2b       	or	r26, r22
    1528:	b7 2b       	or	r27, r23
    152a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    152e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1532:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1536:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    153a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x12>
    153e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x13>
    1542:	30 97       	sbiw	r30, 0x00	; 0
    1544:	39 f0       	breq	.+14     	; 0x1554 <__vector_14+0xb4>
    1546:	69 e0       	ldi	r22, 0x09	; 9
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x12>
    154e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x13>
    1552:	09 95       	icall
    1554:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_15>:
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    15a8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    15ac:	ac 01       	movw	r20, r24
    15ae:	09 2e       	mov	r0, r25
    15b0:	00 0c       	add	r0, r0
    15b2:	66 0b       	sbc	r22, r22
    15b4:	77 0b       	sbc	r23, r23
    15b6:	9a 01       	movw	r18, r20
    15b8:	11 27       	eor	r17, r17
    15ba:	00 27       	eor	r16, r16
    15bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	40 2b       	or	r20, r16
    15ca:	51 2b       	or	r21, r17
    15cc:	62 2b       	or	r22, r18
    15ce:	73 2b       	or	r23, r19
    15d0:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    15d4:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    15d8:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    15dc:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    15e0:	b0 9b       	sbis	0x16, 0	; 22
    15e2:	1a c0       	rjmp	.+52     	; 0x1618 <__vector_15+0x9a>
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	09 2e       	mov	r0, r25
    15e8:	00 0c       	add	r0, r0
    15ea:	aa 0b       	sbc	r26, r26
    15ec:	bb 0b       	sbc	r27, r27
    15ee:	bc 01       	movw	r22, r24
    15f0:	55 27       	eor	r21, r21
    15f2:	44 27       	eor	r20, r20
    15f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15f8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15fc:	a0 e0       	ldi	r26, 0x00	; 0
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	84 2b       	or	r24, r20
    1602:	95 2b       	or	r25, r21
    1604:	a6 2b       	or	r26, r22
    1606:	b7 2b       	or	r27, r23
    1608:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    160c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1610:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1614:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1618:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x14>
    161c:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x15>
    1620:	30 97       	sbiw	r30, 0x00	; 0
    1622:	39 f0       	breq	.+14     	; 0x1632 <__vector_15+0xb4>
    1624:	6a e0       	ldi	r22, 0x0A	; 10
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x14>
    162c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x15>
    1630:	09 95       	icall
    1632:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <__vector_16>:
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1686:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    168a:	ac 01       	movw	r20, r24
    168c:	09 2e       	mov	r0, r25
    168e:	00 0c       	add	r0, r0
    1690:	66 0b       	sbc	r22, r22
    1692:	77 0b       	sbc	r23, r23
    1694:	9a 01       	movw	r18, r20
    1696:	11 27       	eor	r17, r17
    1698:	00 27       	eor	r16, r16
    169a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    169e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	40 2b       	or	r20, r16
    16a8:	51 2b       	or	r21, r17
    16aa:	62 2b       	or	r22, r18
    16ac:	73 2b       	or	r23, r19
    16ae:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    16b2:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    16b6:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    16ba:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    16be:	b0 9b       	sbis	0x16, 0	; 22
    16c0:	1a c0       	rjmp	.+52     	; 0x16f6 <__vector_16+0x9a>
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	09 2e       	mov	r0, r25
    16c6:	00 0c       	add	r0, r0
    16c8:	aa 0b       	sbc	r26, r26
    16ca:	bb 0b       	sbc	r27, r27
    16cc:	bc 01       	movw	r22, r24
    16ce:	55 27       	eor	r21, r21
    16d0:	44 27       	eor	r20, r20
    16d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	84 2b       	or	r24, r20
    16e0:	95 2b       	or	r25, r21
    16e2:	a6 2b       	or	r26, r22
    16e4:	b7 2b       	or	r27, r23
    16e6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    16ea:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    16ee:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    16f2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    16f6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x16>
    16fa:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x17>
    16fe:	30 97       	sbiw	r30, 0x00	; 0
    1700:	39 f0       	breq	.+14     	; 0x1710 <__vector_16+0xb4>
    1702:	6b e0       	ldi	r22, 0x0B	; 11
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x16>
    170a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x17>
    170e:	09 95       	icall
    1710:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <__vector_17>:
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
    1760:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1764:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1768:	ac 01       	movw	r20, r24
    176a:	09 2e       	mov	r0, r25
    176c:	00 0c       	add	r0, r0
    176e:	66 0b       	sbc	r22, r22
    1770:	77 0b       	sbc	r23, r23
    1772:	9a 01       	movw	r18, r20
    1774:	11 27       	eor	r17, r17
    1776:	00 27       	eor	r16, r16
    1778:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    177c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	40 2b       	or	r20, r16
    1786:	51 2b       	or	r21, r17
    1788:	62 2b       	or	r22, r18
    178a:	73 2b       	or	r23, r19
    178c:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    1790:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1794:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1798:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    179c:	b0 9b       	sbis	0x16, 0	; 22
    179e:	1a c0       	rjmp	.+52     	; 0x17d4 <__vector_17+0x9a>
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	09 2e       	mov	r0, r25
    17a4:	00 0c       	add	r0, r0
    17a6:	aa 0b       	sbc	r26, r26
    17a8:	bb 0b       	sbc	r27, r27
    17aa:	bc 01       	movw	r22, r24
    17ac:	55 27       	eor	r21, r21
    17ae:	44 27       	eor	r20, r20
    17b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	84 2b       	or	r24, r20
    17be:	95 2b       	or	r25, r21
    17c0:	a6 2b       	or	r26, r22
    17c2:	b7 2b       	or	r27, r23
    17c4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    17c8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    17cc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    17d0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    17d4:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x18>
    17d8:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x19>
    17dc:	30 97       	sbiw	r30, 0x00	; 0
    17de:	39 f0       	breq	.+14     	; 0x17ee <__vector_17+0xb4>
    17e0:	6c e0       	ldi	r22, 0x0C	; 12
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x18>
    17e8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x19>
    17ec:	09 95       	icall
    17ee:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	0f 90       	pop	r0
    1814:	1f 90       	pop	r1
    1816:	18 95       	reti

00001818 <__vector_18>:
    1818:	1f 92       	push	r1
    181a:	0f 92       	push	r0
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	2f 93       	push	r18
    1828:	3f 93       	push	r19
    182a:	4f 93       	push	r20
    182c:	5f 93       	push	r21
    182e:	6f 93       	push	r22
    1830:	7f 93       	push	r23
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
    183e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1842:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1846:	ac 01       	movw	r20, r24
    1848:	09 2e       	mov	r0, r25
    184a:	00 0c       	add	r0, r0
    184c:	66 0b       	sbc	r22, r22
    184e:	77 0b       	sbc	r23, r23
    1850:	9a 01       	movw	r18, r20
    1852:	11 27       	eor	r17, r17
    1854:	00 27       	eor	r16, r16
    1856:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    185a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	40 2b       	or	r20, r16
    1864:	51 2b       	or	r21, r17
    1866:	62 2b       	or	r22, r18
    1868:	73 2b       	or	r23, r19
    186a:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    186e:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1872:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1876:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    187a:	b0 9b       	sbis	0x16, 0	; 22
    187c:	1a c0       	rjmp	.+52     	; 0x18b2 <__vector_18+0x9a>
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	09 2e       	mov	r0, r25
    1882:	00 0c       	add	r0, r0
    1884:	aa 0b       	sbc	r26, r26
    1886:	bb 0b       	sbc	r27, r27
    1888:	bc 01       	movw	r22, r24
    188a:	55 27       	eor	r21, r21
    188c:	44 27       	eor	r20, r20
    188e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1892:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	84 2b       	or	r24, r20
    189c:	95 2b       	or	r25, r21
    189e:	a6 2b       	or	r26, r22
    18a0:	b7 2b       	or	r27, r23
    18a2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    18a6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    18aa:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    18ae:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    18b2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1a>
    18b6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1b>
    18ba:	30 97       	sbiw	r30, 0x00	; 0
    18bc:	39 f0       	breq	.+14     	; 0x18cc <__vector_18+0xb4>
    18be:	6d e0       	ldi	r22, 0x0D	; 13
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1a>
    18c6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1b>
    18ca:	09 95       	icall
    18cc:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0f 90       	pop	r0
    18f2:	1f 90       	pop	r1
    18f4:	18 95       	reti

000018f6 <__vector_19>:
    18f6:	1f 92       	push	r1
    18f8:	0f 92       	push	r0
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	2f 93       	push	r18
    1906:	3f 93       	push	r19
    1908:	4f 93       	push	r20
    190a:	5f 93       	push	r21
    190c:	6f 93       	push	r22
    190e:	7f 93       	push	r23
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1920:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1924:	ac 01       	movw	r20, r24
    1926:	09 2e       	mov	r0, r25
    1928:	00 0c       	add	r0, r0
    192a:	66 0b       	sbc	r22, r22
    192c:	77 0b       	sbc	r23, r23
    192e:	9a 01       	movw	r18, r20
    1930:	11 27       	eor	r17, r17
    1932:	00 27       	eor	r16, r16
    1934:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1938:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	40 2b       	or	r20, r16
    1942:	51 2b       	or	r21, r17
    1944:	62 2b       	or	r22, r18
    1946:	73 2b       	or	r23, r19
    1948:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    194c:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1950:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1954:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1958:	b0 9b       	sbis	0x16, 0	; 22
    195a:	1a c0       	rjmp	.+52     	; 0x1990 <__vector_19+0x9a>
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	09 2e       	mov	r0, r25
    1960:	00 0c       	add	r0, r0
    1962:	aa 0b       	sbc	r26, r26
    1964:	bb 0b       	sbc	r27, r27
    1966:	bc 01       	movw	r22, r24
    1968:	55 27       	eor	r21, r21
    196a:	44 27       	eor	r20, r20
    196c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1970:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	84 2b       	or	r24, r20
    197a:	95 2b       	or	r25, r21
    197c:	a6 2b       	or	r26, r22
    197e:	b7 2b       	or	r27, r23
    1980:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1984:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1988:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    198c:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1990:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1c>
    1994:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1d>
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	39 f0       	breq	.+14     	; 0x19aa <__vector_19+0xb4>
    199c:	6e e0       	ldi	r22, 0x0E	; 14
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1c>
    19a4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1d>
    19a8:	09 95       	icall
    19aa:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	0f 90       	pop	r0
    19d0:	1f 90       	pop	r1
    19d2:	18 95       	reti

000019d4 <__vector_20>:
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    19fe:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1a02:	ac 01       	movw	r20, r24
    1a04:	09 2e       	mov	r0, r25
    1a06:	00 0c       	add	r0, r0
    1a08:	66 0b       	sbc	r22, r22
    1a0a:	77 0b       	sbc	r23, r23
    1a0c:	9a 01       	movw	r18, r20
    1a0e:	11 27       	eor	r17, r17
    1a10:	00 27       	eor	r16, r16
    1a12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	40 2b       	or	r20, r16
    1a20:	51 2b       	or	r21, r17
    1a22:	62 2b       	or	r22, r18
    1a24:	73 2b       	or	r23, r19
    1a26:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    1a2a:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1a2e:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1a32:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1a36:	b0 9b       	sbis	0x16, 0	; 22
    1a38:	1a c0       	rjmp	.+52     	; 0x1a6e <__vector_20+0x9a>
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	09 2e       	mov	r0, r25
    1a3e:	00 0c       	add	r0, r0
    1a40:	aa 0b       	sbc	r26, r26
    1a42:	bb 0b       	sbc	r27, r27
    1a44:	bc 01       	movw	r22, r24
    1a46:	55 27       	eor	r21, r21
    1a48:	44 27       	eor	r20, r20
    1a4a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a4e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	84 2b       	or	r24, r20
    1a58:	95 2b       	or	r25, r21
    1a5a:	a6 2b       	or	r26, r22
    1a5c:	b7 2b       	or	r27, r23
    1a5e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a62:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a66:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a6a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a6e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x1e>
    1a72:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x1f>
    1a76:	30 97       	sbiw	r30, 0x00	; 0
    1a78:	39 f0       	breq	.+14     	; 0x1a88 <__vector_20+0xb4>
    1a7a:	6f e0       	ldi	r22, 0x0F	; 15
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x1e>
    1a82:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x1f>
    1a86:	09 95       	icall
    1a88:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <__vector_21>:
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	11 24       	eor	r1, r1
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	2f 93       	push	r18
    1ac2:	3f 93       	push	r19
    1ac4:	4f 93       	push	r20
    1ac6:	5f 93       	push	r21
    1ac8:	6f 93       	push	r22
    1aca:	7f 93       	push	r23
    1acc:	8f 93       	push	r24
    1ace:	9f 93       	push	r25
    1ad0:	af 93       	push	r26
    1ad2:	bf 93       	push	r27
    1ad4:	ef 93       	push	r30
    1ad6:	ff 93       	push	r31
    1ad8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1adc:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	09 2e       	mov	r0, r25
    1ae4:	00 0c       	add	r0, r0
    1ae6:	66 0b       	sbc	r22, r22
    1ae8:	77 0b       	sbc	r23, r23
    1aea:	9a 01       	movw	r18, r20
    1aec:	11 27       	eor	r17, r17
    1aee:	00 27       	eor	r16, r16
    1af0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1af4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	40 2b       	or	r20, r16
    1afe:	51 2b       	or	r21, r17
    1b00:	62 2b       	or	r22, r18
    1b02:	73 2b       	or	r23, r19
    1b04:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    1b08:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1b0c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1b10:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1b14:	b0 9b       	sbis	0x16, 0	; 22
    1b16:	1a c0       	rjmp	.+52     	; 0x1b4c <__vector_21+0x9a>
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	09 2e       	mov	r0, r25
    1b1c:	00 0c       	add	r0, r0
    1b1e:	aa 0b       	sbc	r26, r26
    1b20:	bb 0b       	sbc	r27, r27
    1b22:	bc 01       	movw	r22, r24
    1b24:	55 27       	eor	r21, r21
    1b26:	44 27       	eor	r20, r20
    1b28:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b2c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	84 2b       	or	r24, r20
    1b36:	95 2b       	or	r25, r21
    1b38:	a6 2b       	or	r26, r22
    1b3a:	b7 2b       	or	r27, r23
    1b3c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1b40:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1b44:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1b48:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1b4c:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x20>
    1b50:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x21>
    1b54:	30 97       	sbiw	r30, 0x00	; 0
    1b56:	39 f0       	breq	.+14     	; 0x1b66 <__vector_21+0xb4>
    1b58:	60 e1       	ldi	r22, 0x10	; 16
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x20>
    1b60:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x21>
    1b64:	09 95       	icall
    1b66:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1b6a:	ff 91       	pop	r31
    1b6c:	ef 91       	pop	r30
    1b6e:	bf 91       	pop	r27
    1b70:	af 91       	pop	r26
    1b72:	9f 91       	pop	r25
    1b74:	8f 91       	pop	r24
    1b76:	7f 91       	pop	r23
    1b78:	6f 91       	pop	r22
    1b7a:	5f 91       	pop	r21
    1b7c:	4f 91       	pop	r20
    1b7e:	3f 91       	pop	r19
    1b80:	2f 91       	pop	r18
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	0f 90       	pop	r0
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	0f 90       	pop	r0
    1b8c:	1f 90       	pop	r1
    1b8e:	18 95       	reti

00001b90 <__vector_22>:
    1b90:	1f 92       	push	r1
    1b92:	0f 92       	push	r0
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	0f 92       	push	r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	2f 93       	push	r18
    1ba0:	3f 93       	push	r19
    1ba2:	4f 93       	push	r20
    1ba4:	5f 93       	push	r21
    1ba6:	6f 93       	push	r22
    1ba8:	7f 93       	push	r23
    1baa:	8f 93       	push	r24
    1bac:	9f 93       	push	r25
    1bae:	af 93       	push	r26
    1bb0:	bf 93       	push	r27
    1bb2:	ef 93       	push	r30
    1bb4:	ff 93       	push	r31
    1bb6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1bba:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1bbe:	ac 01       	movw	r20, r24
    1bc0:	09 2e       	mov	r0, r25
    1bc2:	00 0c       	add	r0, r0
    1bc4:	66 0b       	sbc	r22, r22
    1bc6:	77 0b       	sbc	r23, r23
    1bc8:	9a 01       	movw	r18, r20
    1bca:	11 27       	eor	r17, r17
    1bcc:	00 27       	eor	r16, r16
    1bce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bd2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	40 2b       	or	r20, r16
    1bdc:	51 2b       	or	r21, r17
    1bde:	62 2b       	or	r22, r18
    1be0:	73 2b       	or	r23, r19
    1be2:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <timestamp>
    1be6:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <timestamp+0x1>
    1bea:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timestamp+0x2>
    1bee:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timestamp+0x3>
    1bf2:	b0 9b       	sbis	0x16, 0	; 22
    1bf4:	1a c0       	rjmp	.+52     	; 0x1c2a <__vector_22+0x9a>
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	09 2e       	mov	r0, r25
    1bfa:	00 0c       	add	r0, r0
    1bfc:	aa 0b       	sbc	r26, r26
    1bfe:	bb 0b       	sbc	r27, r27
    1c00:	bc 01       	movw	r22, r24
    1c02:	55 27       	eor	r21, r21
    1c04:	44 27       	eor	r20, r20
    1c06:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c0a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c0e:	a0 e0       	ldi	r26, 0x00	; 0
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	84 2b       	or	r24, r20
    1c14:	95 2b       	or	r25, r21
    1c16:	a6 2b       	or	r26, r22
    1c18:	b7 2b       	or	r27, r23
    1c1a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1c1e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1c22:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1c26:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1c2a:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x22>
    1c2e:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x23>
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	39 f0       	breq	.+14     	; 0x1c44 <__vector_22+0xb4>
    1c36:	61 e1       	ldi	r22, 0x11	; 17
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x22>
    1c3e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x23>
    1c42:	09 95       	icall
    1c44:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1c48:	ff 91       	pop	r31
    1c4a:	ef 91       	pop	r30
    1c4c:	bf 91       	pop	r27
    1c4e:	af 91       	pop	r26
    1c50:	9f 91       	pop	r25
    1c52:	8f 91       	pop	r24
    1c54:	7f 91       	pop	r23
    1c56:	6f 91       	pop	r22
    1c58:	5f 91       	pop	r21
    1c5a:	4f 91       	pop	r20
    1c5c:	3f 91       	pop	r19
    1c5e:	2f 91       	pop	r18
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	0f 90       	pop	r0
    1c6a:	1f 90       	pop	r1
    1c6c:	18 95       	reti

00001c6e <idle>:
    1c6e:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1c72:	78 94       	sei
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	83 bf       	out	0x33, r24	; 51
    1c78:	88 95       	sleep
    1c7a:	fc cf       	rjmp	.-8      	; 0x1c74 <idle+0x6>

00001c7c <__vector_9>:
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1c9e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <overflows+0x1>
    1ca8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <overflows>
    1cac:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1cb0:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1cb4:	30 97       	sbiw	r30, 0x00	; 0
    1cb6:	01 f1       	breq	.+64     	; 0x1cf8 <__vector_9+0x7c>
    1cb8:	42 81       	ldd	r20, Z+2	; 0x02
    1cba:	53 81       	ldd	r21, Z+3	; 0x03
    1cbc:	64 81       	ldd	r22, Z+4	; 0x04
    1cbe:	75 81       	ldd	r23, Z+5	; 0x05
    1cc0:	86 17       	cp	r24, r22
    1cc2:	97 07       	cpc	r25, r23
    1cc4:	c9 f4       	brne	.+50     	; 0x1cf8 <__vector_9+0x7c>
    1cc6:	ca 01       	movw	r24, r20
    1cc8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ccc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd0:	42 1b       	sub	r20, r18
    1cd2:	53 0b       	sbc	r21, r19
    1cd4:	41 30       	cpi	r20, 0x01	; 1
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <__vector_9+0x68>
    1cda:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cde:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ce8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cec:	ef e6       	ldi	r30, 0x6F	; 111
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	82 60       	ori	r24, 0x02	; 2
    1cf4:	80 83       	st	Z, r24
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <__vector_9+0x86>
    1cf8:	ef e6       	ldi	r30, 0x6F	; 111
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8d 7f       	andi	r24, 0xFD	; 253
    1d00:	80 83       	st	Z, r24
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <__vector_7>:
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	2f 93       	push	r18
    1d34:	3f 93       	push	r19
    1d36:	4f 93       	push	r20
    1d38:	5f 93       	push	r21
    1d3a:	6f 93       	push	r22
    1d3c:	7f 93       	push	r23
    1d3e:	8f 93       	push	r24
    1d40:	9f 93       	push	r25
    1d42:	af 93       	push	r26
    1d44:	bf 93       	push	r27
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <overflows>
    1d4e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <overflows+0x1>
    1d52:	6c 01       	movw	r12, r24
    1d54:	09 2e       	mov	r0, r25
    1d56:	00 0c       	add	r0, r0
    1d58:	ee 08       	sbc	r14, r14
    1d5a:	ff 08       	sbc	r15, r15
    1d5c:	76 01       	movw	r14, r12
    1d5e:	dd 24       	eor	r13, r13
    1d60:	cc 24       	eor	r12, r12
    1d62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	c4 2a       	or	r12, r20
    1d70:	d5 2a       	or	r13, r21
    1d72:	e6 2a       	or	r14, r22
    1d74:	f7 2a       	or	r15, r23
    1d76:	b0 9b       	sbis	0x16, 0	; 22
    1d78:	1e c0       	rjmp	.+60     	; 0x1db6 <__vector_7+0x96>
    1d7a:	6c 01       	movw	r12, r24
    1d7c:	2f ef       	ldi	r18, 0xFF	; 255
    1d7e:	c2 1a       	sub	r12, r18
    1d80:	d2 0a       	sbc	r13, r18
    1d82:	0d 2c       	mov	r0, r13
    1d84:	00 0c       	add	r0, r0
    1d86:	ee 08       	sbc	r14, r14
    1d88:	ff 08       	sbc	r15, r15
    1d8a:	d6 01       	movw	r26, r12
    1d8c:	99 27       	eor	r25, r25
    1d8e:	88 27       	eor	r24, r24
    1d90:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d94:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d98:	e1 2c       	mov	r14, r1
    1d9a:	f1 2c       	mov	r15, r1
    1d9c:	c8 2a       	or	r12, r24
    1d9e:	d9 2a       	or	r13, r25
    1da0:	ea 2a       	or	r14, r26
    1da2:	fb 2a       	or	r15, r27
    1da4:	08 c0       	rjmp	.+16     	; 0x1db6 <__vector_7+0x96>
    1da6:	8c e5       	ldi	r24, 0x5C	; 92
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	0e 94 ef 05 	call	0xbde	; 0xbde <dequeue>
    1dae:	6e e5       	ldi	r22, 0x5E	; 94
    1db0:	71 e0       	ldi	r23, 0x01	; 1
    1db2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <enqueueByDeadline>
    1db6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1dba:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1dbe:	30 97       	sbiw	r30, 0x00	; 0
    1dc0:	69 f0       	breq	.+26     	; 0x1ddc <__vector_7+0xbc>
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	a4 81       	ldd	r26, Z+4	; 0x04
    1dc8:	b5 81       	ldd	r27, Z+5	; 0x05
    1dca:	8c 19       	sub	r24, r12
    1dcc:	9d 09       	sbc	r25, r13
    1dce:	ae 09       	sbc	r26, r14
    1dd0:	bf 09       	sbc	r27, r15
    1dd2:	18 16       	cp	r1, r24
    1dd4:	19 06       	cpc	r1, r25
    1dd6:	1a 06       	cpc	r1, r26
    1dd8:	1b 06       	cpc	r1, r27
    1dda:	2c f7       	brge	.-54     	; 0x1da6 <__vector_7+0x86>
    1ddc:	30 97       	sbiw	r30, 0x00	; 0
    1dde:	21 f1       	breq	.+72     	; 0x1e28 <__vector_7+0x108>
    1de0:	82 81       	ldd	r24, Z+2	; 0x02
    1de2:	93 81       	ldd	r25, Z+3	; 0x03
    1de4:	a4 81       	ldd	r26, Z+4	; 0x04
    1de6:	b5 81       	ldd	r27, Z+5	; 0x05
    1de8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <overflows>
    1dec:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <overflows+0x1>
    1df0:	2a 17       	cp	r18, r26
    1df2:	3b 07       	cpc	r19, r27
    1df4:	c9 f4       	brne	.+50     	; 0x1e28 <__vector_7+0x108>
    1df6:	9c 01       	movw	r18, r24
    1df8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dfc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e00:	84 1b       	sub	r24, r20
    1e02:	95 0b       	sbc	r25, r21
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	31 f4       	brne	.+12     	; 0x1e14 <__vector_7+0xf4>
    1e08:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e0c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e18:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e1c:	ef e6       	ldi	r30, 0x6F	; 111
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	80 83       	st	Z, r24
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <__vector_7+0x112>
    1e28:	ef e6       	ldi	r30, 0x6F	; 111
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8d 7f       	andi	r24, 0xFD	; 253
    1e30:	80 83       	st	Z, r24
    1e32:	0e 94 35 06 	call	0xc6a	; 0xc6a <schedule>
    1e36:	ff 91       	pop	r31
    1e38:	ef 91       	pop	r30
    1e3a:	bf 91       	pop	r27
    1e3c:	af 91       	pop	r26
    1e3e:	9f 91       	pop	r25
    1e40:	8f 91       	pop	r24
    1e42:	7f 91       	pop	r23
    1e44:	6f 91       	pop	r22
    1e46:	5f 91       	pop	r21
    1e48:	4f 91       	pop	r20
    1e4a:	3f 91       	pop	r19
    1e4c:	2f 91       	pop	r18
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <async>:
    1e60:	3f 92       	push	r3
    1e62:	4f 92       	push	r4
    1e64:	5f 92       	push	r5
    1e66:	6f 92       	push	r6
    1e68:	7f 92       	push	r7
    1e6a:	8f 92       	push	r8
    1e6c:	9f 92       	push	r9
    1e6e:	af 92       	push	r10
    1e70:	bf 92       	push	r11
    1e72:	cf 92       	push	r12
    1e74:	df 92       	push	r13
    1e76:	ef 92       	push	r14
    1e78:	ff 92       	push	r15
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	2b 01       	movw	r4, r22
    1e84:	3c 01       	movw	r6, r24
    1e86:	49 01       	movw	r8, r18
    1e88:	5a 01       	movw	r10, r20
    1e8a:	8f b7       	in	r24, 0x3f	; 63
    1e8c:	80 78       	andi	r24, 0x80	; 128
    1e8e:	38 2e       	mov	r3, r24
    1e90:	f8 94       	cli
    1e92:	8e e3       	ldi	r24, 0x3E	; 62
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	0e 94 ef 05 	call	0xbde	; 0xbde <dequeue>
    1e9a:	ec 01       	movw	r28, r24
    1e9c:	1b 87       	std	Y+11, r17	; 0x0b
    1e9e:	0a 87       	std	Y+10, r16	; 0x0a
    1ea0:	fd 86       	std	Y+13, r15	; 0x0d
    1ea2:	ec 86       	std	Y+12, r14	; 0x0c
    1ea4:	df 86       	std	Y+15, r13	; 0x0f
    1ea6:	ce 86       	std	Y+14, r12	; 0x0e
    1ea8:	33 20       	and	r3, r3
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <async+0x64>
    1eac:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <current>
    1eb0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <current+0x1>
    1eb4:	02 80       	ldd	r0, Z+2	; 0x02
    1eb6:	f3 81       	ldd	r31, Z+3	; 0x03
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	a4 81       	ldd	r26, Z+4	; 0x04
    1ec0:	b5 81       	ldd	r27, Z+5	; 0x05
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <async+0x74>
    1ec4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <timestamp>
    1ec8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <timestamp+0x1>
    1ecc:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <timestamp+0x2>
    1ed0:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <timestamp+0x3>
    1ed4:	48 0e       	add	r4, r24
    1ed6:	59 1e       	adc	r5, r25
    1ed8:	6a 1e       	adc	r6, r26
    1eda:	7b 1e       	adc	r7, r27
    1edc:	4a 82       	std	Y+2, r4	; 0x02
    1ede:	5b 82       	std	Y+3, r5	; 0x03
    1ee0:	6c 82       	std	Y+4, r6	; 0x04
    1ee2:	7d 82       	std	Y+5, r7	; 0x05
    1ee4:	18 14       	cp	r1, r8
    1ee6:	19 04       	cpc	r1, r9
    1ee8:	1a 04       	cpc	r1, r10
    1eea:	1b 04       	cpc	r1, r11
    1eec:	44 f0       	brlt	.+16     	; 0x1efe <async+0x9e>
    1eee:	0f 2e       	mov	r0, r31
    1ef0:	88 24       	eor	r8, r8
    1ef2:	8a 94       	dec	r8
    1ef4:	98 2c       	mov	r9, r8
    1ef6:	a8 2c       	mov	r10, r8
    1ef8:	ff e7       	ldi	r31, 0x7F	; 127
    1efa:	bf 2e       	mov	r11, r31
    1efc:	f0 2d       	mov	r31, r0
    1efe:	84 0c       	add	r8, r4
    1f00:	95 1c       	adc	r9, r5
    1f02:	a6 1c       	adc	r10, r6
    1f04:	b7 1c       	adc	r11, r7
    1f06:	8e 82       	std	Y+6, r8	; 0x06
    1f08:	9f 82       	std	Y+7, r9	; 0x07
    1f0a:	a8 86       	std	Y+8, r10	; 0x08
    1f0c:	b9 86       	std	Y+9, r11	; 0x09
    1f0e:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <overflows>
    1f12:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <overflows+0x1>
    1f16:	c9 01       	movw	r24, r18
    1f18:	03 2e       	mov	r0, r19
    1f1a:	00 0c       	add	r0, r0
    1f1c:	aa 0b       	sbc	r26, r26
    1f1e:	bb 0b       	sbc	r27, r27
    1f20:	dc 01       	movw	r26, r24
    1f22:	99 27       	eor	r25, r25
    1f24:	88 27       	eor	r24, r24
    1f26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	84 2b       	or	r24, r20
    1f34:	95 2b       	or	r25, r21
    1f36:	a6 2b       	or	r26, r22
    1f38:	b7 2b       	or	r27, r23
    1f3a:	b0 9b       	sbis	0x16, 0	; 22
    1f3c:	13 c0       	rjmp	.+38     	; 0x1f64 <async+0x104>
    1f3e:	c9 01       	movw	r24, r18
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	09 2e       	mov	r0, r25
    1f44:	00 0c       	add	r0, r0
    1f46:	aa 0b       	sbc	r26, r26
    1f48:	bb 0b       	sbc	r27, r27
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	99 27       	eor	r25, r25
    1f4e:	88 27       	eor	r24, r24
    1f50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	84 2b       	or	r24, r20
    1f5e:	95 2b       	or	r25, r21
    1f60:	a6 2b       	or	r26, r22
    1f62:	b7 2b       	or	r27, r23
    1f64:	48 1a       	sub	r4, r24
    1f66:	59 0a       	sbc	r5, r25
    1f68:	6a 0a       	sbc	r6, r26
    1f6a:	7b 0a       	sbc	r7, r27
    1f6c:	14 14       	cp	r1, r4
    1f6e:	15 04       	cpc	r1, r5
    1f70:	16 04       	cpc	r1, r6
    1f72:	17 04       	cpc	r1, r7
    1f74:	ac f5       	brge	.+106    	; 0x1fe0 <async+0x180>
    1f76:	6c e5       	ldi	r22, 0x5C	; 92
    1f78:	71 e0       	ldi	r23, 0x01	; 1
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	0e 94 be 05 	call	0xb7c	; 0xb7c <enqueueByBaseline>
    1f80:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1f84:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1f88:	30 97       	sbiw	r30, 0x00	; 0
    1f8a:	21 f1       	breq	.+72     	; 0x1fd4 <async+0x174>
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	a4 81       	ldd	r26, Z+4	; 0x04
    1f92:	b5 81       	ldd	r27, Z+5	; 0x05
    1f94:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <overflows>
    1f98:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <overflows+0x1>
    1f9c:	2a 17       	cp	r18, r26
    1f9e:	3b 07       	cpc	r19, r27
    1fa0:	c9 f4       	brne	.+50     	; 0x1fd4 <async+0x174>
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fa8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fac:	84 1b       	sub	r24, r20
    1fae:	95 0b       	sbc	r25, r21
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	31 f4       	brne	.+12     	; 0x1fc0 <async+0x160>
    1fb4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fb8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1fc4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1fc8:	ef e6       	ldi	r30, 0x6F	; 111
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	82 60       	ori	r24, 0x02	; 2
    1fd0:	80 83       	st	Z, r24
    1fd2:	39 c0       	rjmp	.+114    	; 0x2046 <async+0x1e6>
    1fd4:	ef e6       	ldi	r30, 0x6F	; 111
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8d 7f       	andi	r24, 0xFD	; 253
    1fdc:	80 83       	st	Z, r24
    1fde:	33 c0       	rjmp	.+102    	; 0x2046 <async+0x1e6>
    1fe0:	6e e5       	ldi	r22, 0x5E	; 94
    1fe2:	71 e0       	ldi	r23, 0x01	; 1
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <enqueueByDeadline>
    1fea:	33 20       	and	r3, r3
    1fec:	61 f1       	breq	.+88     	; 0x2046 <async+0x1e6>
    1fee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <threadPool>
    1ff2:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <threadPool+0x1>
    1ff6:	89 2b       	or	r24, r25
    1ff8:	31 f1       	breq	.+76     	; 0x2046 <async+0x1e6>
    1ffa:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
    1ffe:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
    2002:	86 81       	ldd	r24, Z+6	; 0x06
    2004:	97 81       	ldd	r25, Z+7	; 0x07
    2006:	a0 85       	ldd	r26, Z+8	; 0x08
    2008:	b1 85       	ldd	r27, Z+9	; 0x09
    200a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <activeStack>
    200e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <activeStack+0x1>
    2012:	02 80       	ldd	r0, Z+2	; 0x02
    2014:	f3 81       	ldd	r31, Z+3	; 0x03
    2016:	e0 2d       	mov	r30, r0
    2018:	46 81       	ldd	r20, Z+6	; 0x06
    201a:	57 81       	ldd	r21, Z+7	; 0x07
    201c:	60 85       	ldd	r22, Z+8	; 0x08
    201e:	71 85       	ldd	r23, Z+9	; 0x09
    2020:	84 1b       	sub	r24, r20
    2022:	95 0b       	sbc	r25, r21
    2024:	a6 0b       	sbc	r26, r22
    2026:	b7 0b       	sbc	r27, r23
    2028:	72 f4       	brpl	.+28     	; 0x2046 <async+0x1e6>
    202a:	8c e3       	ldi	r24, 0x3C	; 60
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	0e 94 2b 06 	call	0xc56	; 0xc56 <pop>
    2032:	6a e3       	ldi	r22, 0x3A	; 58
    2034:	71 e0       	ldi	r23, 0x01	; 1
    2036:	0e 94 21 06 	call	0xc42	; 0xc42 <push>
    203a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <activeStack>
    203e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <activeStack+0x1>
    2042:	0e 94 6d 05 	call	0xada	; 0xada <dispatch>
    2046:	33 20       	and	r3, r3
    2048:	09 f0       	breq	.+2      	; 0x204c <async+0x1ec>
    204a:	78 94       	sei
    204c:	ce 01       	movw	r24, r28
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	df 90       	pop	r13
    205c:	cf 90       	pop	r12
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	7f 90       	pop	r7
    2068:	6f 90       	pop	r6
    206a:	5f 90       	pop	r5
    206c:	4f 90       	pop	r4
    206e:	3f 90       	pop	r3
    2070:	08 95       	ret

00002072 <sync>:
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
    2084:	7b 01       	movw	r14, r22
    2086:	6a 01       	movw	r12, r20
    2088:	1f b7       	in	r17, 0x3f	; 63
    208a:	10 78       	andi	r17, 0x80	; 128
    208c:	f8 94       	cli
    208e:	a8 81       	ld	r26, Y
    2090:	b9 81       	ldd	r27, Y+1	; 0x01
    2092:	10 97       	sbiw	r26, 0x00	; 0
    2094:	19 f4       	brne	.+6      	; 0x209c <sync+0x2a>
    2096:	35 c0       	rjmp	.+106    	; 0x2102 <sync+0x90>
    2098:	a0 81       	ld	r26, Z
    209a:	b1 81       	ldd	r27, Z+1	; 0x01
    209c:	14 96       	adiw	r26, 0x04	; 4
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	15 97       	sbiw	r26, 0x05	; 5
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	c1 f7       	brne	.-16     	; 0x2098 <sync+0x26>
    20a8:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <current>
    20ac:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <current+0x1>
    20b0:	a2 17       	cp	r26, r18
    20b2:	b3 07       	cpc	r27, r19
    20b4:	11 f0       	breq	.+4      	; 0x20ba <sync+0x48>
    20b6:	11 11       	cpse	r17, r1
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <sync+0x56>
    20ba:	11 23       	and	r17, r17
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <sync+0x4e>
    20be:	4a c0       	rjmp	.+148    	; 0x2154 <sync+0xe2>
    20c0:	78 94       	sei
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f ef       	ldi	r25, 0xFF	; 255
    20c6:	4e c0       	rjmp	.+156    	; 0x2164 <sync+0xf2>
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <sync+0x64>
    20d0:	fc 01       	movw	r30, r24
    20d2:	15 82       	std	Z+5, r1	; 0x05
    20d4:	14 82       	std	Z+4, r1	; 0x04
    20d6:	3b 83       	std	Y+3, r19	; 0x03
    20d8:	2a 83       	std	Y+2, r18	; 0x02
    20da:	f9 01       	movw	r30, r18
    20dc:	d5 83       	std	Z+5, r29	; 0x05
    20de:	c4 83       	std	Z+4, r28	; 0x04
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 6d 05 	call	0xada	; 0xada <dispatch>
    20e6:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <current>
    20ea:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <current+0x1>
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	89 2b       	or	r24, r25
    20f4:	31 f4       	brne	.+12     	; 0x2102 <sync+0x90>
    20f6:	11 23       	and	r17, r17
    20f8:	81 f1       	breq	.+96     	; 0x215a <sync+0xe8>
    20fa:	78 94       	sei
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	31 c0       	rjmp	.+98     	; 0x2164 <sync+0xf2>
    2102:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <current>
    2106:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <current+0x1>
    210a:	99 83       	std	Y+1, r25	; 0x01
    210c:	88 83       	st	Y, r24
    210e:	11 23       	and	r17, r17
    2110:	29 f0       	breq	.+10     	; 0x211c <sync+0xaa>
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	09 f0       	breq	.+2      	; 0x211c <sync+0xaa>
    211a:	78 94       	sei
    211c:	b6 01       	movw	r22, r12
    211e:	ce 01       	movw	r24, r28
    2120:	f7 01       	movw	r30, r14
    2122:	09 95       	icall
    2124:	f8 2e       	mov	r15, r24
    2126:	09 2f       	mov	r16, r25
    2128:	8f b7       	in	r24, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	18 82       	st	Y, r1
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	91 05       	cpc	r25, r1
    2138:	38 f0       	brcs	.+14     	; 0x2148 <sync+0xd6>
    213a:	1b 82       	std	Y+3, r1	; 0x03
    213c:	1a 82       	std	Y+2, r1	; 0x02
    213e:	fc 01       	movw	r30, r24
    2140:	15 82       	std	Z+5, r1	; 0x05
    2142:	14 82       	std	Z+4, r1	; 0x04
    2144:	0e 94 6d 05 	call	0xada	; 0xada <dispatch>
    2148:	11 23       	and	r17, r17
    214a:	51 f0       	breq	.+20     	; 0x2160 <sync+0xee>
    214c:	78 94       	sei
    214e:	8f 2d       	mov	r24, r15
    2150:	90 2f       	mov	r25, r16
    2152:	08 c0       	rjmp	.+16     	; 0x2164 <sync+0xf2>
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	9f ef       	ldi	r25, 0xFF	; 255
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <sync+0xf2>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <sync+0xf2>
    2160:	8f 2d       	mov	r24, r15
    2162:	90 2f       	mov	r25, r16
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	08 95       	ret

00002176 <run>:
    2176:	00 91 38 01 	lds	r16, 0x0138	; 0x800138 <current>
    217a:	10 91 39 01 	lds	r17, 0x0139	; 0x800139 <current+0x1>
    217e:	8e e5       	ldi	r24, 0x5E	; 94
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	0e 94 ef 05 	call	0xbde	; 0xbde <dequeue>
    2186:	ec 01       	movw	r28, r24
    2188:	f8 01       	movw	r30, r16
    218a:	93 83       	std	Z+3, r25	; 0x03
    218c:	82 83       	std	Z+2, r24	; 0x02
    218e:	78 94       	sei
    2190:	6c 85       	ldd	r22, Y+12	; 0x0c
    2192:	7d 85       	ldd	r23, Y+13	; 0x0d
    2194:	4e 85       	ldd	r20, Y+14	; 0x0e
    2196:	5f 85       	ldd	r21, Y+15	; 0x0f
    2198:	8a 85       	ldd	r24, Y+10	; 0x0a
    219a:	9b 85       	ldd	r25, Y+11	; 0x0b
    219c:	0e 94 39 10 	call	0x2072	; 0x2072 <sync>
    21a0:	8f b7       	in	r24, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	6e e3       	ldi	r22, 0x3E	; 62
    21a6:	71 e0       	ldi	r23, 0x01	; 1
    21a8:	ce 01       	movw	r24, r28
    21aa:	0e 94 17 06 	call	0xc2e	; 0xc2e <insert>
    21ae:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <activeStack>
    21b2:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <activeStack+0x1>
    21b6:	01 90       	ld	r0, Z+
    21b8:	f0 81       	ld	r31, Z
    21ba:	e0 2d       	mov	r30, r0
    21bc:	c2 81       	ldd	r28, Z+2	; 0x02
    21be:	d3 81       	ldd	r29, Z+3	; 0x03
    21c0:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
    21c4:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
    21c8:	30 97       	sbiw	r30, 0x00	; 0
    21ca:	a1 f0       	breq	.+40     	; 0x21f4 <run+0x7e>
    21cc:	20 97       	sbiw	r28, 0x00	; 0
    21ce:	99 f2       	breq	.-90     	; 0x2176 <run>
    21d0:	86 81       	ldd	r24, Z+6	; 0x06
    21d2:	97 81       	ldd	r25, Z+7	; 0x07
    21d4:	a0 85       	ldd	r26, Z+8	; 0x08
    21d6:	b1 85       	ldd	r27, Z+9	; 0x09
    21d8:	4e 81       	ldd	r20, Y+6	; 0x06
    21da:	5f 81       	ldd	r21, Y+7	; 0x07
    21dc:	68 85       	ldd	r22, Y+8	; 0x08
    21de:	79 85       	ldd	r23, Y+9	; 0x09
    21e0:	84 1b       	sub	r24, r20
    21e2:	95 0b       	sbc	r25, r21
    21e4:	a6 0b       	sbc	r26, r22
    21e6:	b7 0b       	sbc	r27, r23
    21e8:	18 16       	cp	r1, r24
    21ea:	19 06       	cpc	r1, r25
    21ec:	1a 06       	cpc	r1, r26
    21ee:	1b 06       	cpc	r1, r27
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <run+0x7e>
    21f2:	c1 cf       	rjmp	.-126    	; 0x2176 <run>
    21f4:	8a e3       	ldi	r24, 0x3A	; 58
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	0e 94 2b 06 	call	0xc56	; 0xc56 <pop>
    21fc:	6c e3       	ldi	r22, 0x3C	; 60
    21fe:	71 e0       	ldi	r23, 0x01	; 1
    2200:	0e 94 21 06 	call	0xc42	; 0xc42 <push>
    2204:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <activeStack>
    2208:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <activeStack+0x1>
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <run+0x9c>
    220e:	a0 81       	ld	r26, Z
    2210:	b1 81       	ldd	r27, Z+1	; 0x01
    2212:	14 96       	adiw	r26, 0x04	; 4
    2214:	ed 91       	ld	r30, X+
    2216:	fc 91       	ld	r31, X
    2218:	15 97       	sbiw	r26, 0x05	; 5
    221a:	30 97       	sbiw	r30, 0x00	; 0
    221c:	c1 f7       	brne	.-16     	; 0x220e <run+0x98>
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 6d 05 	call	0xada	; 0xada <dispatch>
    2224:	a8 cf       	rjmp	.-176    	; 0x2176 <run>

00002226 <ABORT>:
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	ec 01       	movw	r28, r24
    222e:	1f b7       	in	r17, 0x3f	; 63
    2230:	10 78       	andi	r17, 0x80	; 128
    2232:	f8 94       	cli
    2234:	6c e5       	ldi	r22, 0x5C	; 92
    2236:	71 e0       	ldi	r23, 0x01	; 1
    2238:	0e 94 a9 04 	call	0x952	; 0x952 <remove>
    223c:	89 2b       	or	r24, r25
    223e:	39 f4       	brne	.+14     	; 0x224e <ABORT+0x28>
    2240:	6e e5       	ldi	r22, 0x5E	; 94
    2242:	71 e0       	ldi	r23, 0x01	; 1
    2244:	ce 01       	movw	r24, r28
    2246:	0e 94 a9 04 	call	0x952	; 0x952 <remove>
    224a:	89 2b       	or	r24, r25
    224c:	31 f0       	breq	.+12     	; 0x225a <ABORT+0x34>
    224e:	6e e3       	ldi	r22, 0x3E	; 62
    2250:	71 e0       	ldi	r23, 0x01	; 1
    2252:	ce 01       	movw	r24, r28
    2254:	0e 94 17 06 	call	0xc2e	; 0xc2e <insert>
    2258:	25 c0       	rjmp	.+74     	; 0x22a4 <ABORT+0x7e>
    225a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <activeStack>
    225e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <activeStack+0x1>
    2262:	1e c0       	rjmp	.+60     	; 0x22a0 <ABORT+0x7a>
    2264:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <current>
    2268:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <current+0x1>
    226c:	e8 17       	cp	r30, r24
    226e:	f9 07       	cpc	r31, r25
    2270:	a1 f0       	breq	.+40     	; 0x229a <ABORT+0x74>
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	c8 17       	cp	r28, r24
    2278:	d9 07       	cpc	r29, r25
    227a:	79 f4       	brne	.+30     	; 0x229a <ABORT+0x74>
    227c:	24 81       	ldd	r18, Z+4	; 0x04
    227e:	35 81       	ldd	r19, Z+5	; 0x05
    2280:	8a 85       	ldd	r24, Y+10	; 0x0a
    2282:	9b 85       	ldd	r25, Y+11	; 0x0b
    2284:	28 17       	cp	r18, r24
    2286:	39 07       	cpc	r19, r25
    2288:	41 f4       	brne	.+16     	; 0x229a <ABORT+0x74>
    228a:	13 82       	std	Z+3, r1	; 0x03
    228c:	12 82       	std	Z+2, r1	; 0x02
    228e:	6e e3       	ldi	r22, 0x3E	; 62
    2290:	71 e0       	ldi	r23, 0x01	; 1
    2292:	ce 01       	movw	r24, r28
    2294:	0e 94 17 06 	call	0xc2e	; 0xc2e <insert>
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <ABORT+0x7e>
    229a:	01 90       	ld	r0, Z+
    229c:	f0 81       	ld	r31, Z
    229e:	e0 2d       	mov	r30, r0
    22a0:	30 97       	sbiw	r30, 0x00	; 0
    22a2:	01 f7       	brne	.-64     	; 0x2264 <ABORT+0x3e>
    22a4:	11 23       	and	r17, r17
    22a6:	09 f0       	breq	.+2      	; 0x22aa <ABORT+0x84>
    22a8:	78 94       	sei
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	08 95       	ret

000022b2 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    22b2:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    22b4:	42 31       	cpi	r20, 0x12	; 18
    22b6:	b8 f4       	brcc	.+46     	; 0x22e6 <install+0x34>
        char status;
        DISABLE(status);
    22b8:	9f b7       	in	r25, 0x3f	; 63
    22ba:	90 78       	andi	r25, 0x80	; 128
    22bc:	f8 94       	cli
        otable[i] = obj;
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	44 0f       	add	r20, r20
    22c2:	55 1f       	adc	r21, r21
    22c4:	da 01       	movw	r26, r20
    22c6:	a0 5a       	subi	r26, 0xA0	; 160
    22c8:	be 4f       	sbci	r27, 0xFE	; 254
    22ca:	ed 93       	st	X+, r30
    22cc:	fc 93       	st	X, r31
        mtable[i] = m;
    22ce:	da 01       	movw	r26, r20
    22d0:	a8 50       	subi	r26, 0x08	; 8
    22d2:	be 4f       	sbci	r27, 0xFE	; 254
    22d4:	6d 93       	st	X+, r22
    22d6:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    22d8:	21 e0       	ldi	r18, 0x01	; 1
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	33 83       	std	Z+3, r19	; 0x03
    22de:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    22e0:	99 23       	and	r25, r25
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <install+0x34>
    22e4:	78 94       	sei
    22e6:	08 95       	ret

000022e8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    22e8:	8c 01       	movw	r16, r24
    22ea:	7b 01       	movw	r14, r22
    22ec:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    22ee:	8f b7       	in	r24, 0x3f	; 63
    22f0:	f8 94       	cli
    initialize();
    22f2:	0e 94 ce 04 	call	0x99c	; 0x99c <initialize>
    ENABLE(1);
    22f6:	78 94       	sei
    if (m != NULL)
    22f8:	e1 14       	cp	r14, r1
    22fa:	f1 04       	cpc	r15, r1
    22fc:	41 f0       	breq	.+16     	; 0x230e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	a9 01       	movw	r20, r18
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	cb 01       	movw	r24, r22
    230a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <async>
    DISABLE(status);
    230e:	8f b7       	in	r24, 0x3f	; 63
    2310:	f8 94       	cli
    idle();
    2312:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <idle>

00002316 <__divmodsi4>:
    2316:	05 2e       	mov	r0, r21
    2318:	97 fb       	bst	r25, 7
    231a:	1e f4       	brtc	.+6      	; 0x2322 <__divmodsi4+0xc>
    231c:	00 94       	com	r0
    231e:	0e 94 a2 11 	call	0x2344	; 0x2344 <__negsi2>
    2322:	57 fd       	sbrc	r21, 7
    2324:	07 d0       	rcall	.+14     	; 0x2334 <__divmodsi4_neg2>
    2326:	0e 94 b5 11 	call	0x236a	; 0x236a <__udivmodsi4>
    232a:	07 fc       	sbrc	r0, 7
    232c:	03 d0       	rcall	.+6      	; 0x2334 <__divmodsi4_neg2>
    232e:	4e f4       	brtc	.+18     	; 0x2342 <__divmodsi4_exit>
    2330:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__negsi2>

00002334 <__divmodsi4_neg2>:
    2334:	50 95       	com	r21
    2336:	40 95       	com	r20
    2338:	30 95       	com	r19
    233a:	21 95       	neg	r18
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	4f 4f       	sbci	r20, 0xFF	; 255
    2340:	5f 4f       	sbci	r21, 0xFF	; 255

00002342 <__divmodsi4_exit>:
    2342:	08 95       	ret

00002344 <__negsi2>:
    2344:	90 95       	com	r25
    2346:	80 95       	com	r24
    2348:	70 95       	com	r23
    234a:	61 95       	neg	r22
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	8f 4f       	sbci	r24, 0xFF	; 255
    2350:	9f 4f       	sbci	r25, 0xFF	; 255
    2352:	08 95       	ret

00002354 <__muluhisi3>:
    2354:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__umulhisi3>
    2358:	a5 9f       	mul	r26, r21
    235a:	90 0d       	add	r25, r0
    235c:	b4 9f       	mul	r27, r20
    235e:	90 0d       	add	r25, r0
    2360:	a4 9f       	mul	r26, r20
    2362:	80 0d       	add	r24, r0
    2364:	91 1d       	adc	r25, r1
    2366:	11 24       	eor	r1, r1
    2368:	08 95       	ret

0000236a <__udivmodsi4>:
    236a:	a1 e2       	ldi	r26, 0x21	; 33
    236c:	1a 2e       	mov	r1, r26
    236e:	aa 1b       	sub	r26, r26
    2370:	bb 1b       	sub	r27, r27
    2372:	fd 01       	movw	r30, r26
    2374:	0d c0       	rjmp	.+26     	; 0x2390 <__udivmodsi4_ep>

00002376 <__udivmodsi4_loop>:
    2376:	aa 1f       	adc	r26, r26
    2378:	bb 1f       	adc	r27, r27
    237a:	ee 1f       	adc	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	a2 17       	cp	r26, r18
    2380:	b3 07       	cpc	r27, r19
    2382:	e4 07       	cpc	r30, r20
    2384:	f5 07       	cpc	r31, r21
    2386:	20 f0       	brcs	.+8      	; 0x2390 <__udivmodsi4_ep>
    2388:	a2 1b       	sub	r26, r18
    238a:	b3 0b       	sbc	r27, r19
    238c:	e4 0b       	sbc	r30, r20
    238e:	f5 0b       	sbc	r31, r21

00002390 <__udivmodsi4_ep>:
    2390:	66 1f       	adc	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	1a 94       	dec	r1
    239a:	69 f7       	brne	.-38     	; 0x2376 <__udivmodsi4_loop>
    239c:	60 95       	com	r22
    239e:	70 95       	com	r23
    23a0:	80 95       	com	r24
    23a2:	90 95       	com	r25
    23a4:	9b 01       	movw	r18, r22
    23a6:	ac 01       	movw	r20, r24
    23a8:	bd 01       	movw	r22, r26
    23aa:	cf 01       	movw	r24, r30
    23ac:	08 95       	ret

000023ae <__umulhisi3>:
    23ae:	a2 9f       	mul	r26, r18
    23b0:	b0 01       	movw	r22, r0
    23b2:	b3 9f       	mul	r27, r19
    23b4:	c0 01       	movw	r24, r0
    23b6:	a3 9f       	mul	r26, r19
    23b8:	70 0d       	add	r23, r0
    23ba:	81 1d       	adc	r24, r1
    23bc:	11 24       	eor	r1, r1
    23be:	91 1d       	adc	r25, r1
    23c0:	b2 9f       	mul	r27, r18
    23c2:	70 0d       	add	r23, r0
    23c4:	81 1d       	adc	r24, r1
    23c6:	11 24       	eor	r1, r1
    23c8:	91 1d       	adc	r25, r1
    23ca:	08 95       	ret

000023cc <setjmp>:
    23cc:	dc 01       	movw	r26, r24
    23ce:	2d 92       	st	X+, r2
    23d0:	3d 92       	st	X+, r3
    23d2:	4d 92       	st	X+, r4
    23d4:	5d 92       	st	X+, r5
    23d6:	6d 92       	st	X+, r6
    23d8:	7d 92       	st	X+, r7
    23da:	8d 92       	st	X+, r8
    23dc:	9d 92       	st	X+, r9
    23de:	ad 92       	st	X+, r10
    23e0:	bd 92       	st	X+, r11
    23e2:	cd 92       	st	X+, r12
    23e4:	dd 92       	st	X+, r13
    23e6:	ed 92       	st	X+, r14
    23e8:	fd 92       	st	X+, r15
    23ea:	0d 93       	st	X+, r16
    23ec:	1d 93       	st	X+, r17
    23ee:	cd 93       	st	X+, r28
    23f0:	dd 93       	st	X+, r29
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	8d b7       	in	r24, 0x3d	; 61
    23f8:	8d 93       	st	X+, r24
    23fa:	8e b7       	in	r24, 0x3e	; 62
    23fc:	8d 93       	st	X+, r24
    23fe:	8f b7       	in	r24, 0x3f	; 63
    2400:	8d 93       	st	X+, r24
    2402:	ed 93       	st	X+, r30
    2404:	fd 93       	st	X+, r31
    2406:	88 27       	eor	r24, r24
    2408:	99 27       	eor	r25, r25
    240a:	09 94       	ijmp

0000240c <longjmp>:
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	81 30       	cpi	r24, 0x01	; 1
    2412:	91 05       	cpc	r25, r1
    2414:	81 1d       	adc	r24, r1
    2416:	2d 90       	ld	r2, X+
    2418:	3d 90       	ld	r3, X+
    241a:	4d 90       	ld	r4, X+
    241c:	5d 90       	ld	r5, X+
    241e:	6d 90       	ld	r6, X+
    2420:	7d 90       	ld	r7, X+
    2422:	8d 90       	ld	r8, X+
    2424:	9d 90       	ld	r9, X+
    2426:	ad 90       	ld	r10, X+
    2428:	bd 90       	ld	r11, X+
    242a:	cd 90       	ld	r12, X+
    242c:	dd 90       	ld	r13, X+
    242e:	ed 90       	ld	r14, X+
    2430:	fd 90       	ld	r15, X+
    2432:	0d 91       	ld	r16, X+
    2434:	1d 91       	ld	r17, X+
    2436:	cd 91       	ld	r28, X+
    2438:	dd 91       	ld	r29, X+
    243a:	ed 91       	ld	r30, X+
    243c:	fd 91       	ld	r31, X+
    243e:	0d 90       	ld	r0, X+
    2440:	f8 94       	cli
    2442:	fe bf       	out	0x3e, r31	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	ed bf       	out	0x3d, r30	; 61
    2448:	ed 91       	ld	r30, X+
    244a:	fd 91       	ld	r31, X+
    244c:	09 94       	ijmp

0000244e <_exit>:
    244e:	f8 94       	cli

00002450 <__stop_program>:
    2450:	ff cf       	rjmp	.-2      	; 0x2450 <__stop_program>
