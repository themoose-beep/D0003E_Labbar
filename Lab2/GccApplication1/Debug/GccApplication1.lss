
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000060e  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  0080011a  0080011a  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001139  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e9  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000801  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000396b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e0       	ldi	r30, 0x0E	; 14
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 34       	cpi	r26, 0x41	; 65
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 92 01 	call	0x324	; 0x324 <main>
  92:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:
int pp;
mutex MTX = MUTEX_INIT;

void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  b2:	08 95       	ret

000000b4 <writeChar>:
	
	return;
}


void writeChar(char ch, int pos) {
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
  bc:	66 30       	cpi	r22, 0x06	; 6
  be:	71 05       	cpc	r23, r1
  c0:	08 f0       	brcs	.+2      	; 0xc4 <writeChar+0x10>
  c2:	4b c0       	rjmp	.+150    	; 0x15a <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
  c4:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x18>
		intCh = 10;
  ca:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
  cc:	fb 01       	movw	r30, r22
  ce:	f5 95       	asr	r31
  d0:	e7 95       	ror	r30
  d2:	e4 51       	subi	r30, 0x14	; 20
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
  d6:	60 ff       	sbrs	r22, 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
  da:	50 ef       	ldi	r21, 0xF0	; 240
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
  de:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
  e0:	a8 2f       	mov	r26, r24
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	aa 0f       	add	r26, r26
  e6:	bb 1f       	adc	r27, r27
  e8:	a0 50       	subi	r26, 0x00	; 0
  ea:	bf 4f       	sbci	r27, 0xFF	; 255
  ec:	cd 91       	ld	r28, X+
  ee:	dc 91       	ld	r29, X
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
  f8:	15 2f       	mov	r17, r21
  fa:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
  fc:	01 2f       	mov	r16, r17
  fe:	06 66       	ori	r16, 0x66	; 102
 100:	04 c0       	rjmp	.+8      	; 0x10a <writeChar+0x56>
 102:	14 96       	adiw	r26, 0x04	; 4
 104:	35 96       	adiw	r30, 0x05	; 5
 106:	6f 5f       	subi	r22, 0xFF	; 255
 108:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
 10a:	ce 01       	movw	r24, r28
 10c:	0a 2e       	mov	r0, r26
 10e:	02 c0       	rjmp	.+4      	; 0x114 <writeChar+0x60>
 110:	96 95       	lsr	r25
 112:	87 95       	ror	r24
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <writeChar+0x5c>
 118:	48 2f       	mov	r20, r24
 11a:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	71 05       	cpc	r23, r1
 120:	69 f4       	brne	.+26     	; 0x13c <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 122:	80 81       	ld	r24, Z
 124:	90 2f       	mov	r25, r16
 126:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	48 9f       	mul	r20, r24
 12c:	90 01       	movw	r18, r0
 12e:	11 24       	eor	r1, r1
 130:	84 2f       	mov	r24, r20
 132:	82 2b       	or	r24, r18
 134:	85 23       	and	r24, r21
 136:	89 2b       	or	r24, r25
 138:	80 83       	st	Z, r24
 13a:	e3 cf       	rjmp	.-58     	; 0x102 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 13c:	80 81       	ld	r24, Z
 13e:	91 2f       	mov	r25, r17
 140:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	48 9f       	mul	r20, r24
 146:	90 01       	movw	r18, r0
 148:	11 24       	eor	r1, r1
 14a:	84 2f       	mov	r24, r20
 14c:	82 2b       	or	r24, r18
 14e:	85 23       	and	r24, r21
 150:	89 2b       	or	r24, r25
 152:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
 154:	64 30       	cpi	r22, 0x04	; 4
 156:	71 05       	cpc	r23, r1
 158:	a4 f2       	brlt	.-88     	; 0x102 <writeChar+0x4e>

	}
	return;
	
	
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <is_prime>:

bool is_prime(long i) {
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	88 16       	cp	r8, r24
 17c:	91 04       	cpc	r9, r1
 17e:	a1 04       	cpc	r10, r1
 180:	b1 04       	cpc	r11, r1
 182:	94 f1       	brlt	.+100    	; 0x1e8 <is_prime+0x84>
		if (i % j == 0) {
 184:	d5 01       	movw	r26, r10
 186:	c4 01       	movw	r24, r8
 188:	81 70       	andi	r24, 0x01	; 1
 18a:	99 27       	eor	r25, r25
 18c:	aa 27       	eor	r26, r26
 18e:	b0 78       	andi	r27, 0x80	; 128
 190:	bb 23       	and	r27, r27
 192:	54 f4       	brge	.+20     	; 0x1a8 <is_prime+0x44>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	a1 09       	sbc	r26, r1
 198:	b1 09       	sbc	r27, r1
 19a:	8e 6f       	ori	r24, 0xFE	; 254
 19c:	9f 6f       	ori	r25, 0xFF	; 255
 19e:	af 6f       	ori	r26, 0xFF	; 255
 1a0:	bf 6f       	ori	r27, 0xFF	; 255
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 1d       	adc	r26, r1
 1a6:	b1 1d       	adc	r27, r1
 1a8:	89 2b       	or	r24, r25
 1aa:	8a 2b       	or	r24, r26
 1ac:	8b 2b       	or	r24, r27
 1ae:	f1 f0       	breq	.+60     	; 0x1ec <is_prime+0x88>
 1b0:	c1 2c       	mov	r12, r1
 1b2:	d1 2c       	mov	r13, r1
 1b4:	76 01       	movw	r14, r12
 1b6:	68 94       	set
 1b8:	c1 f8       	bld	r12, 1
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <is_prime+0x6c>
 1bc:	c5 01       	movw	r24, r10
 1be:	b4 01       	movw	r22, r8
 1c0:	a7 01       	movw	r20, r14
 1c2:	96 01       	movw	r18, r12
 1c4:	0e 94 83 02 	call	0x506	; 0x506 <__divmodsi4>
 1c8:	67 2b       	or	r22, r23
 1ca:	68 2b       	or	r22, r24
 1cc:	69 2b       	or	r22, r25
 1ce:	81 f0       	breq	.+32     	; 0x1f0 <is_prime+0x8c>
}

bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	c8 1a       	sub	r12, r24
 1d4:	d8 0a       	sbc	r13, r24
 1d6:	e8 0a       	sbc	r14, r24
 1d8:	f8 0a       	sbc	r15, r24
 1da:	8c 14       	cp	r8, r12
 1dc:	9d 04       	cpc	r9, r13
 1de:	ae 04       	cpc	r10, r14
 1e0:	bf 04       	cpc	r11, r15
 1e2:	61 f7       	brne	.-40     	; 0x1bc <is_prime+0x58>
		if (i % j == 0) {
			return false;
		}
	}
	return true;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <is_prime+0x8e>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <is_prime+0x8e>
bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
		if (i % j == 0) {
			return false;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <is_prime+0x8e>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	9f 90       	pop	r9
 200:	8f 90       	pop	r8
 202:	08 95       	ret

00000204 <printAt>:

void printAt(long num, int pos) {
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <printAt+0x12>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	6b 01       	movw	r12, r22
 21c:	7c 01       	movw	r14, r24
 21e:	8a 01       	movw	r16, r20

	//Lock to not disturb shared variable pp
	//lock(&MTX);
    pp = pos;
 220:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <pp+0x1>
 224:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 228:	24 e6       	ldi	r18, 0x64	; 100
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	0e 94 83 02 	call	0x506	; 0x506 <__divmodsi4>
 234:	2a e0       	ldi	r18, 0x0A	; 10
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 83 02 	call	0x506	; 0x506 <__divmodsi4>
 240:	b8 01       	movw	r22, r16
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	82 0f       	add	r24, r18
 246:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	for(volatile int i = 0; i < 1000; i++);
 24a:	1a 82       	std	Y+2, r1	; 0x02
 24c:	19 82       	std	Y+1, r1	; 0x01
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	88 3e       	cpi	r24, 0xE8	; 232
 254:	93 40       	sbci	r25, 0x03	; 3
 256:	54 f4       	brge	.+20     	; 0x26c <printAt+0x68>
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	9a 81       	ldd	r25, Y+2	; 0x02
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	88 3e       	cpi	r24, 0xE8	; 232
 268:	93 40       	sbci	r25, 0x03	; 3
 26a:	b4 f3       	brlt	.-20     	; 0x258 <printAt+0x54>
    pp++;
 26c:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <pp>
 270:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <pp+0x1>
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	1f 4f       	sbci	r17, 0xFF	; 255
 278:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <pp+0x1>
 27c:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <pp>
    writeChar( num % 10 + '0', pp);
 280:	c7 01       	movw	r24, r14
 282:	b6 01       	movw	r22, r12
 284:	2a e0       	ldi	r18, 0x0A	; 10
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	0e 94 83 02 	call	0x506	; 0x506 <__divmodsi4>
 290:	86 2f       	mov	r24, r22
 292:	b8 01       	movw	r22, r16
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	//unlock(&MTX);
	//yield();
}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	08 95       	ret

000002b0 <computePrimes>:

void computePrimes(int pos) {
 2b0:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 2b2:	c1 2c       	mov	r12, r1
 2b4:	d1 2c       	mov	r13, r1
 2b6:	76 01       	movw	r14, r12
 2b8:	c3 94       	inc	r12
        if (is_prime(n)) {
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	0e 94 b2 00 	call	0x164	; 0x164 <is_prime>
 2c2:	88 23       	and	r24, r24
 2c4:	29 f0       	breq	.+10     	; 0x2d0 <computePrimes+0x20>
            printAt(n, pos);
 2c6:	ae 01       	movw	r20, r28
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	0e 94 02 01 	call	0x204	; 0x204 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	c8 1a       	sub	r12, r24
 2d4:	d8 0a       	sbc	r13, r24
 2d6:	e8 0a       	sbc	r14, r24
 2d8:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 2da:	ef cf       	rjmp	.-34     	; 0x2ba <computePrimes+0xa>

000002dc <__vector_7>:
}


//Every 50 ms
ISR(TIMER1_COMPA_vect) {
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	yield();
 2fe:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <yield>
}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <main>:

int main() {
	LCD_Init();
 324:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
    spawn(computePrimes, 0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	88 e5       	ldi	r24, 0x58	; 88
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spawn>
    computePrimes(3);
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 58 01 	call	0x2b0	; 0x2b0 <computePrimes>

0000033c <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 33c:	dc 01       	movw	r26, r24
 33e:	15 96       	adiw	r26, 0x05	; 5
 340:	1c 92       	st	X, r1
 342:	1e 92       	st	-X, r1
 344:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 346:	db 01       	movw	r26, r22
 348:	ed 91       	ld	r30, X+
 34a:	fc 91       	ld	r31, X
 34c:	11 97       	sbiw	r26, 0x01	; 1
 34e:	30 97       	sbiw	r30, 0x00	; 0
 350:	21 f4       	brne	.+8      	; 0x35a <enqueue+0x1e>
        *queue = p;
 352:	8d 93       	st	X+, r24
 354:	9c 93       	st	X, r25
 356:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 358:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 35a:	24 81       	ldd	r18, Z+4	; 0x04
 35c:	35 81       	ldd	r19, Z+5	; 0x05
 35e:	21 15       	cp	r18, r1
 360:	31 05       	cpc	r19, r1
 362:	d1 f7       	brne	.-12     	; 0x358 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 364:	95 83       	std	Z+5, r25	; 0x05
 366:	84 83       	std	Z+4, r24	; 0x04
 368:	08 95       	ret

0000036a <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	00 d0       	rcall	.+0      	; 0x370 <dispatch+0x6>
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	9a 83       	std	Y+2, r25	; 0x02
 376:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 378:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 37c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 380:	06 96       	adiw	r24, 0x06	; 6
 382:	0e 94 c4 02 	call	0x588	; 0x588 <setjmp>
 386:	89 2b       	or	r24, r25
 388:	59 f4       	brne	.+22     	; 0x3a0 <dispatch+0x36>
        current = next;
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	9a 81       	ldd	r25, Y+2	; 0x02
 38e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 392:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
        longjmp(next->context,1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	06 96       	adiw	r24, 0x06	; 6
 39c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <longjmp>
    }
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <spawn>:

void spawn(void (* function)(int), int arg) {
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <spawn+0x6>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 3b4:	f8 94       	cli
    //lock(&MTX2);
    if (!initialized) initialize();
 3b6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 3ba:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 3be:	23 2b       	or	r18, r19
 3c0:	69 f5       	brne	.+90     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 3c2:	2a ef       	ldi	r18, 0xFA	; 250
 3c4:	31 e0       	ldi	r19, 0x01	; 1
 3c6:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <threads+0x5>
 3ca:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <threads+0x4>
 3ce:	27 e6       	ldi	r18, 0x67	; 103
 3d0:	32 e0       	ldi	r19, 0x02	; 2
 3d2:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <threads+0x72>
 3d6:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <threads+0x71>
 3da:	24 ed       	ldi	r18, 0xD4	; 212
 3dc:	32 e0       	ldi	r19, 0x02	; 2
 3de:	30 93 6c 02 	sts	0x026C, r19	; 0x80026c <threads+0xdf>
 3e2:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 3e6:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <threads+0x14c>
 3ea:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <threads+0x14b>

    //Set compare match
    PORTB = PORTB | (1 << PB5);
 3ee:	2d 9a       	sbi	0x05, 5	; 5
    
    //Set timer enabler
    TIMSK1 = (1 << OCIE1A);
 3f0:	22 e0       	ldi	r18, 0x02	; 2
 3f2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    
    //Set pre-scaling factor and CTC
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 3f6:	2d e0       	ldi	r18, 0x0D	; 13
 3f8:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

    //8 000 000 / 1024 /1000 * 50 (Target Time)
    OCR1A = 390.625;
 3fc:	26 e8       	ldi	r18, 0x86	; 134
 3fe:	31 e0       	ldi	r19, 0x01	; 1
 400:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 404:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    
    //Set timer
	TCNT1 = 0;
 408:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 40c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    initialized = 1;
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 418:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 41c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <freeQ>
 420:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <freeQ+0x1>
 424:	3a 83       	std	Y+2, r19	; 0x02
 426:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 428:	23 2b       	or	r18, r19
 42a:	a9 f0       	breq	.+42     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
        *queue = (*queue)->next;
 42c:	e9 81       	ldd	r30, Y+1	; 0x01
 42e:	fa 81       	ldd	r31, Y+2	; 0x02
 430:	44 81       	ldd	r20, Z+4	; 0x04
 432:	55 81       	ldd	r21, Z+5	; 0x05
 434:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <freeQ+0x1>
 438:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <freeQ>
    DISABLE();
    //lock(&MTX2);
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 43c:	91 83       	std	Z+1, r25	; 0x01
 43e:	80 83       	st	Z, r24
    newp->arg = arg;
 440:	73 83       	std	Z+3, r23	; 0x03
 442:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 444:	15 82       	std	Z+5, r1	; 0x05
 446:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 448:	cf 01       	movw	r24, r30
 44a:	06 96       	adiw	r24, 0x06	; 6
 44c:	0e 94 c4 02 	call	0x588	; 0x588 <setjmp>
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	49 f5       	brne	.+82     	; 0x4a6 <__DATA_REGION_LENGTH__+0xa6>
 454:	01 c0       	rjmp	.+2      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 456:	ff cf       	rjmp	.-2      	; 0x456 <__DATA_REGION_LENGTH__+0x56>
        ENABLE();
 458:	78 94       	sei
        //unlock(&MTX2);
        current->function(current->arg);
 45a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <current>
 45e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <current+0x1>
 462:	ed 91       	ld	r30, X+
 464:	fc 91       	ld	r31, X
 466:	11 97       	sbiw	r26, 0x01	; 1
 468:	12 96       	adiw	r26, 0x02	; 2
 46a:	8d 91       	ld	r24, X+
 46c:	9c 91       	ld	r25, X
 46e:	13 97       	sbiw	r26, 0x03	; 3
 470:	09 95       	icall
        DISABLE();
 472:	f8 94       	cli
        //lock(&MTX2);

        enqueue(current, &freeQ);
 474:	68 e1       	ldi	r22, 0x18	; 24
 476:	71 e0       	ldi	r23, 0x01	; 1
 478:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 47c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 480:	0e 94 9e 01 	call	0x33c	; 0x33c <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 484:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 488:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	51 f0       	breq	.+20     	; 0x4a4 <__DATA_REGION_LENGTH__+0xa4>
        *queue = (*queue)->next;
 490:	fc 01       	movw	r30, r24
 492:	24 81       	ldd	r18, Z+4	; 0x04
 494:	35 81       	ldd	r19, Z+5	; 0x05
 496:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 49a:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
        current->function(current->arg);
        DISABLE();
        //lock(&MTX2);

        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 49e:	0e 94 b5 01 	call	0x36a	; 0x36a <dispatch>
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <__DATA_REGION_LENGTH__+0xa6>
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__DATA_REGION_LENGTH__+0xa4>
    }
    SETSTACK(&newp->context, &newp->stack);
 4a6:	e9 81       	ldd	r30, Y+1	; 0x01
 4a8:	fa 81       	ldd	r31, Y+2	; 0x02
 4aa:	36 96       	adiw	r30, 0x06	; 6
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	9a 81       	ldd	r25, Y+2	; 0x02
 4b0:	87 59       	subi	r24, 0x97	; 151
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	91 8b       	std	Z+17, r25	; 0x11
 4b6:	80 8b       	std	Z+16, r24	; 0x10
 4b8:	93 8b       	std	Z+19, r25	; 0x13
 4ba:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 4bc:	6c e1       	ldi	r22, 0x1C	; 28
 4be:	71 e0       	ldi	r23, 0x01	; 1
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	0e 94 9e 01 	call	0x33c	; 0x33c <enqueue>
    //unlock(&MTX2);
    ENABLE();
 4c8:	78 94       	sei
}
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <yield>:

void yield(void) {
	enqueue(current, &readyQ);
 4d4:	6c e1       	ldi	r22, 0x1C	; 28
 4d6:	71 e0       	ldi	r23, 0x01	; 1
 4d8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 4dc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 4e0:	0e 94 9e 01 	call	0x33c	; 0x33c <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 4e8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	51 f0       	breq	.+20     	; 0x504 <__stack+0x5>
        *queue = (*queue)->next;
 4f0:	fc 01       	movw	r30, r24
 4f2:	24 81       	ldd	r18, Z+4	; 0x04
 4f4:	35 81       	ldd	r19, Z+5	; 0x05
 4f6:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 4fa:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    ENABLE();
}

void yield(void) {
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 4fe:	0e 94 b5 01 	call	0x36a	; 0x36a <dispatch>
}
 502:	08 95       	ret
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stack+0x5>

00000506 <__divmodsi4>:
 506:	05 2e       	mov	r0, r21
 508:	97 fb       	bst	r25, 7
 50a:	1e f4       	brtc	.+6      	; 0x512 <__divmodsi4+0xc>
 50c:	00 94       	com	r0
 50e:	0e 94 9a 02 	call	0x534	; 0x534 <__negsi2>
 512:	57 fd       	sbrc	r21, 7
 514:	07 d0       	rcall	.+14     	; 0x524 <__divmodsi4_neg2>
 516:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodsi4>
 51a:	07 fc       	sbrc	r0, 7
 51c:	03 d0       	rcall	.+6      	; 0x524 <__divmodsi4_neg2>
 51e:	4e f4       	brtc	.+18     	; 0x532 <__divmodsi4_exit>
 520:	0c 94 9a 02 	jmp	0x534	; 0x534 <__negsi2>

00000524 <__divmodsi4_neg2>:
 524:	50 95       	com	r21
 526:	40 95       	com	r20
 528:	30 95       	com	r19
 52a:	21 95       	neg	r18
 52c:	3f 4f       	sbci	r19, 0xFF	; 255
 52e:	4f 4f       	sbci	r20, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255

00000532 <__divmodsi4_exit>:
 532:	08 95       	ret

00000534 <__negsi2>:
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__udivmodsi4>:
 544:	a1 e2       	ldi	r26, 0x21	; 33
 546:	1a 2e       	mov	r1, r26
 548:	aa 1b       	sub	r26, r26
 54a:	bb 1b       	sub	r27, r27
 54c:	fd 01       	movw	r30, r26
 54e:	0d c0       	rjmp	.+26     	; 0x56a <__udivmodsi4_ep>

00000550 <__udivmodsi4_loop>:
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	ee 1f       	adc	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	a2 17       	cp	r26, r18
 55a:	b3 07       	cpc	r27, r19
 55c:	e4 07       	cpc	r30, r20
 55e:	f5 07       	cpc	r31, r21
 560:	20 f0       	brcs	.+8      	; 0x56a <__udivmodsi4_ep>
 562:	a2 1b       	sub	r26, r18
 564:	b3 0b       	sbc	r27, r19
 566:	e4 0b       	sbc	r30, r20
 568:	f5 0b       	sbc	r31, r21

0000056a <__udivmodsi4_ep>:
 56a:	66 1f       	adc	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	1a 94       	dec	r1
 574:	69 f7       	brne	.-38     	; 0x550 <__udivmodsi4_loop>
 576:	60 95       	com	r22
 578:	70 95       	com	r23
 57a:	80 95       	com	r24
 57c:	90 95       	com	r25
 57e:	9b 01       	movw	r18, r22
 580:	ac 01       	movw	r20, r24
 582:	bd 01       	movw	r22, r26
 584:	cf 01       	movw	r24, r30
 586:	08 95       	ret

00000588 <setjmp>:
 588:	dc 01       	movw	r26, r24
 58a:	2d 92       	st	X+, r2
 58c:	3d 92       	st	X+, r3
 58e:	4d 92       	st	X+, r4
 590:	5d 92       	st	X+, r5
 592:	6d 92       	st	X+, r6
 594:	7d 92       	st	X+, r7
 596:	8d 92       	st	X+, r8
 598:	9d 92       	st	X+, r9
 59a:	ad 92       	st	X+, r10
 59c:	bd 92       	st	X+, r11
 59e:	cd 92       	st	X+, r12
 5a0:	dd 92       	st	X+, r13
 5a2:	ed 92       	st	X+, r14
 5a4:	fd 92       	st	X+, r15
 5a6:	0d 93       	st	X+, r16
 5a8:	1d 93       	st	X+, r17
 5aa:	cd 93       	st	X+, r28
 5ac:	dd 93       	st	X+, r29
 5ae:	ff 91       	pop	r31
 5b0:	ef 91       	pop	r30
 5b2:	8d b7       	in	r24, 0x3d	; 61
 5b4:	8d 93       	st	X+, r24
 5b6:	8e b7       	in	r24, 0x3e	; 62
 5b8:	8d 93       	st	X+, r24
 5ba:	8f b7       	in	r24, 0x3f	; 63
 5bc:	8d 93       	st	X+, r24
 5be:	ed 93       	st	X+, r30
 5c0:	fd 93       	st	X+, r31
 5c2:	88 27       	eor	r24, r24
 5c4:	99 27       	eor	r25, r25
 5c6:	09 94       	ijmp

000005c8 <longjmp>:
 5c8:	dc 01       	movw	r26, r24
 5ca:	cb 01       	movw	r24, r22
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	91 05       	cpc	r25, r1
 5d0:	81 1d       	adc	r24, r1
 5d2:	2d 90       	ld	r2, X+
 5d4:	3d 90       	ld	r3, X+
 5d6:	4d 90       	ld	r4, X+
 5d8:	5d 90       	ld	r5, X+
 5da:	6d 90       	ld	r6, X+
 5dc:	7d 90       	ld	r7, X+
 5de:	8d 90       	ld	r8, X+
 5e0:	9d 90       	ld	r9, X+
 5e2:	ad 90       	ld	r10, X+
 5e4:	bd 90       	ld	r11, X+
 5e6:	cd 90       	ld	r12, X+
 5e8:	dd 90       	ld	r13, X+
 5ea:	ed 90       	ld	r14, X+
 5ec:	fd 90       	ld	r15, X+
 5ee:	0d 91       	ld	r16, X+
 5f0:	1d 91       	ld	r17, X+
 5f2:	cd 91       	ld	r28, X+
 5f4:	dd 91       	ld	r29, X+
 5f6:	ed 91       	ld	r30, X+
 5f8:	fd 91       	ld	r31, X+
 5fa:	0d 90       	ld	r0, X+
 5fc:	f8 94       	cli
 5fe:	fe bf       	out	0x3e, r31	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	ed bf       	out	0x3d, r30	; 61
 604:	ed 91       	ld	r30, X+
 606:	fd 91       	ld	r31, X+
 608:	09 94       	ijmp

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
