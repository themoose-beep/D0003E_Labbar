
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00002254  000022e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000365  0080013e  0080013e  00002326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c39  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106d  00000000  00000000  00005201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001607  00000000  00000000  0000626e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  00007878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000926  00000000  00000000  00008458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024f5  00000000  00000000  00008d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000b273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_1>
       8:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_2>
       c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_3>
      10:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_4>
      14:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_9>
      28:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_10>
      2c:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_11>
      30:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_12>
      34:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_13>
      38:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_14>
      3c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_15>
      40:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_16>
      44:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_17>
      48:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_18>
      4c:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_19>
      50:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_20>
      54:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_21>
      58:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e5       	ldi	r30, 0x54	; 84
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ae 33       	cpi	r26, 0x3E	; 62
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ae e3       	ldi	r26, 0x3E	; 62
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a3 3a       	cpi	r26, 0xA3	; 163
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
      92:	0c 94 28 11 	jmp	0x2250	; 0x2250 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <initLCD>:
uint16_t sccMap[] = {0x1551, 0x2080, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x1b51, 0x0000};


void initLCD(GUI *self) {
	//Part 1
	CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
      a2:	10 82       	st	Z, r1

	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
      a4:	8f e0       	ldi	r24, 0x0F	; 15
      a6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
      aa:	87 eb       	ldi	r24, 0xB7	; 183
      ac:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      b0:	87 e0       	ldi	r24, 0x07	; 7
      b2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      b6:	90 ec       	ldi	r25, 0xC0	; 192
      b8:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

    PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
      bc:	85 b1       	in	r24, 0x05	; 5
      be:	80 6d       	ori	r24, 0xD0	; 208
      c0:	85 b9       	out	0x05, r24	; 5
    PORTE |= (1<<PE2)|(1<<PE3);
      c2:	8e b1       	in	r24, 0x0e	; 14
      c4:	8c 60       	ori	r24, 0x0C	; 12
      c6:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
      c8:	8f e2       	ldi	r24, 0x2F	; 47
      ca:	84 b9       	out	0x04, r24	; 4
	DDRE   = (1<<DDE6)|(1<<DDE4);
      cc:	80 e5       	ldi	r24, 0x50	; 80
      ce:	8d b9       	out	0x0d, r24	; 13
   
	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
      d0:	8c e0       	ldi	r24, 0x0C	; 12
      d2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
      d6:	80 ed       	ldi	r24, 0xD0	; 208
      d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
      dc:	9d bb       	out	0x1d, r25	; 29
      de:	08 95       	ret

000000e0 <writeChar>:
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
      e0:	66 30       	cpi	r22, 0x06	; 6
      e2:	71 05       	cpc	r23, r1
      e4:	08 f0       	brcs	.+2      	; 0xe8 <writeChar+0x8>
      e6:	44 c0       	rjmp	.+136    	; 0x170 <writeChar+0x90>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
      e8:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
      ea:	8a 30       	cpi	r24, 0x0A	; 10
      ec:	08 f0       	brcs	.+2      	; 0xf0 <writeChar+0x10>
		intCh = 10;
      ee:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
      f0:	fb 01       	movw	r30, r22
      f2:	f5 95       	asr	r31
      f4:	e7 95       	ror	r30
      f6:	e4 51       	subi	r30, 0x14	; 20
      f8:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
      fa:	60 fd       	sbrc	r22, 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <writeChar+0x22>
		mask = 0x0f;
      fe:	5f e0       	ldi	r21, 0x0F	; 15
     100:	01 c0       	rjmp	.+2      	; 0x104 <writeChar+0x24>
	}
	else {
		mask = 0xf0;
     102:	50 ef       	ldi	r21, 0xF0	; 240
	}
	
	uint16_t sccChar = sccMap[intCh];
     104:	a8 2f       	mov	r26, r24
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	aa 0f       	add	r26, r26
     10a:	bb 1f       	adc	r27, r27
     10c:	a0 50       	subi	r26, 0x00	; 0
     10e:	bf 4f       	sbci	r27, 0xFF	; 255
     110:	6d 91       	ld	r22, X+
     112:	7c 91       	ld	r23, X
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	28 c0       	rjmp	.+80     	; 0x16a <writeChar+0x8a>
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
     11a:	c9 01       	movw	r24, r18
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	db 01       	movw	r26, r22
     126:	02 c0       	rjmp	.+4      	; 0x12c <writeChar+0x4c>
     128:	b6 95       	lsr	r27
     12a:	a7 95       	ror	r26
     12c:	8a 95       	dec	r24
     12e:	e2 f7       	brpl	.-8      	; 0x128 <writeChar+0x48>
     130:	4a 2f       	mov	r20, r26
     132:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
     134:	21 15       	cp	r18, r1
     136:	31 05       	cpc	r19, r1
     138:	39 f4       	brne	.+14     	; 0x148 <writeChar+0x68>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
     13a:	80 81       	ld	r24, Z
     13c:	95 2f       	mov	r25, r21
     13e:	90 95       	com	r25
     140:	96 66       	ori	r25, 0x66	; 102
     142:	89 23       	and	r24, r25
     144:	80 83       	st	Z, r24
     146:	05 c0       	rjmp	.+10     	; 0x152 <writeChar+0x72>
			} else {
			*writePos = *writePos & ~mask;
     148:	80 81       	ld	r24, Z
     14a:	95 2f       	mov	r25, r21
     14c:	90 95       	com	r25
     14e:	89 23       	and	r24, r25
     150:	80 83       	st	Z, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
     152:	b0 e1       	ldi	r27, 0x10	; 16
     154:	4b 9f       	mul	r20, r27
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	90 81       	ld	r25, Z
     15c:	84 2b       	or	r24, r20
     15e:	85 23       	and	r24, r21
     160:	89 2b       	or	r24, r25
     162:	80 83       	st	Z, r24
		
		// Next nibble
		writePos += 5;
     164:	35 96       	adiw	r30, 0x05	; 5
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	24 30       	cpi	r18, 0x04	; 4
     16c:	31 05       	cpc	r19, r1
     16e:	ac f2       	brlt	.-86     	; 0x11a <writeChar+0x3a>
     170:	08 95       	ret

00000172 <printAt>:
	return;
	
	
}

void printAt(GUI *self, uint8_t num) {
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	d6 2f       	mov	r29, r22
    int pp = self->pos;
     17c:	fc 01       	movw	r30, r24
     17e:	04 81       	ldd	r16, Z+4	; 0x04
     180:	10 e0       	ldi	r17, 0x00	; 0
    writeChar( (num % 100) / 10 + '0', pp);
     182:	89 e2       	ldi	r24, 0x29	; 41
     184:	68 9f       	mul	r22, r24
     186:	81 2d       	mov	r24, r1
     188:	11 24       	eor	r1, r1
     18a:	82 95       	swap	r24
     18c:	8f 70       	andi	r24, 0x0F	; 15
     18e:	26 2f       	mov	r18, r22
     190:	f4 e6       	ldi	r31, 0x64	; 100
     192:	8f 9f       	mul	r24, r31
     194:	20 19       	sub	r18, r0
     196:	11 24       	eor	r1, r1
     198:	cd ec       	ldi	r28, 0xCD	; 205
     19a:	2c 9f       	mul	r18, r28
     19c:	81 2d       	mov	r24, r1
     19e:	11 24       	eor	r1, r1
     1a0:	86 95       	lsr	r24
     1a2:	86 95       	lsr	r24
     1a4:	86 95       	lsr	r24
     1a6:	b8 01       	movw	r22, r16
     1a8:	80 5d       	subi	r24, 0xD0	; 208
     1aa:	0e 94 70 00 	call	0xe0	; 0xe0 <writeChar>
    pp++;
     1ae:	b8 01       	movw	r22, r16
     1b0:	6f 5f       	subi	r22, 0xFF	; 255
     1b2:	7f 4f       	sbci	r23, 0xFF	; 255
    writeChar( num % 10 + '0', pp);
     1b4:	dc 9f       	mul	r29, r28
     1b6:	c1 2d       	mov	r28, r1
     1b8:	11 24       	eor	r1, r1
     1ba:	c6 95       	lsr	r28
     1bc:	c6 95       	lsr	r28
     1be:	c6 95       	lsr	r28
     1c0:	cc 0f       	add	r28, r28
     1c2:	8c 2f       	mov	r24, r28
     1c4:	88 0f       	add	r24, r24
     1c6:	88 0f       	add	r24, r24
     1c8:	c8 0f       	add	r28, r24
     1ca:	8d 2f       	mov	r24, r29
     1cc:	8c 1b       	sub	r24, r28
     1ce:	80 5d       	subi	r24, 0xD0	; 208
     1d0:	0e 94 70 00 	call	0xe0	; 0xe0 <writeChar>
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <switchActive>:

void switchActive(GUI *self) {
	if (self->pos == 0) {
     1de:	fc 01       	movw	r30, r24
     1e0:	84 81       	ldd	r24, Z+4	; 0x04
     1e2:	81 11       	cpse	r24, r1
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <switchActive+0x16>
		LCDDR0 ^= 0b10;
     1e6:	ec ee       	ldi	r30, 0xEC	; 236
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	89 27       	eor	r24, r25
     1f0:	80 83       	st	Z, r24
     1f2:	08 95       	ret
	}
	else if (self->pos == 4) {
     1f4:	84 30       	cpi	r24, 0x04	; 4
     1f6:	31 f4       	brne	.+12     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
		LCDDR1 ^= 0x1 << 6;
     1f8:	ed ee       	ldi	r30, 0xED	; 237
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	90 81       	ld	r25, Z
     1fe:	80 e4       	ldi	r24, 0x40	; 64
     200:	89 27       	eor	r24, r25
     202:	80 83       	st	Z, r24
     204:	08 95       	ret

00000206 <initialize>:
#define PNB4 (PINB & (1<<PINB4))
#define PNB6 (PINB & (1<<PINB6))
#define PNB7 (PINB & (1<<PINB7))


void initialize (CONTROLLER *self) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
    SYNC(self->gui[0], initLCD, 0);
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	6d e4       	ldi	r22, 0x4D	; 77
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	88 85       	ldd	r24, Y+8	; 0x08
     222:	99 85       	ldd	r25, Y+9	; 0x09
     224:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <sync>
    SYNC(self->ArrPulse[0], generatePulse , NULL);
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	6a e4       	ldi	r22, 0x4A	; 74
     22e:	73 e0       	ldi	r23, 0x03	; 3
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	9d 81       	ldd	r25, Y+5	; 0x05
     234:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <sync>
    ASYNC(self->ArrPulse[1], generatePulse , NULL);
     238:	0e 81       	ldd	r16, Y+6	; 0x06
     23a:	1f 81       	ldd	r17, Y+7	; 0x07
     23c:	c1 2c       	mov	r12, r1
     23e:	d1 2c       	mov	r13, r1
     240:	0f 2e       	mov	r0, r31
     242:	fa e4       	ldi	r31, 0x4A	; 74
     244:	ef 2e       	mov	r14, r31
     246:	f3 e0       	ldi	r31, 0x03	; 3
     248:	ff 2e       	mov	r15, r31
     24a:	f0 2d       	mov	r31, r0
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	cb 01       	movw	r24, r22
     258:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
	ASYNC(self->gui[0], printAt, 1);
     25c:	08 85       	ldd	r16, Y+8	; 0x08
     25e:	19 85       	ldd	r17, Y+9	; 0x09
     260:	cc 24       	eor	r12, r12
     262:	c3 94       	inc	r12
     264:	d1 2c       	mov	r13, r1
     266:	0f 2e       	mov	r0, r31
     268:	f9 eb       	ldi	r31, 0xB9	; 185
     26a:	ef 2e       	mov	r14, r31
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a9 01       	movw	r20, r18
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	cb 01       	movw	r24, r22
     27e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
	ASYNC(self->gui[1], printAt, 1);
     282:	0a 85       	ldd	r16, Y+10	; 0x0a
     284:	1b 85       	ldd	r17, Y+11	; 0x0b
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	a9 01       	movw	r20, r18
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	cb 01       	movw	r24, r22
     292:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
	ASYNC(self->gui[0], switchActive, NULL);
     296:	08 85       	ldd	r16, Y+8	; 0x08
     298:	19 85       	ldd	r17, Y+9	; 0x09
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	0f 2e       	mov	r0, r31
     2a0:	ff ee       	ldi	r31, 0xEF	; 239
     2a2:	ef 2e       	mov	r14, r31
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ff 2e       	mov	r15, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	cb 01       	movw	r24, r22
     2b6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	08 95       	ret

000002cc <movevertical>:

void movevertical (CONTROLLER *self) {
     2cc:	cf 92       	push	r12
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	ec 01       	movw	r28, r24
	
	//PUSH
	if(!(PNB4)) {
     2de:	1c 99       	sbic	0x03, 4	; 3
     2e0:	59 c0       	rjmp	.+178    	; 0x394 <movevertical+0xc8>
		if (self->ArrPulse[self->active]->freq > 0) {
     2e2:	ec 85       	ldd	r30, Y+12	; 0x0c
     2e4:	fd 85       	ldd	r31, Y+13	; 0x0d
     2e6:	32 96       	adiw	r30, 0x02	; 2
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e8 0f       	add	r30, r24
     2ee:	f9 1f       	adc	r31, r25
     2f0:	01 90       	ld	r0, Z+
     2f2:	f0 81       	ld	r31, Z
     2f4:	e0 2d       	mov	r30, r0
     2f6:	85 81       	ldd	r24, Z+5	; 0x05
     2f8:	88 23       	and	r24, r24
     2fa:	69 f0       	breq	.+26     	; 0x316 <movevertical+0x4a>
			self->ArrPulse[self->active]->prev = self->ArrPulse[self->active]->freq;
     2fc:	86 83       	std	Z+6, r24	; 0x06
			self->ArrPulse[self->active]->freq = 0;
     2fe:	ec 85       	ldd	r30, Y+12	; 0x0c
     300:	fd 85       	ldd	r31, Y+13	; 0x0d
     302:	32 96       	adiw	r30, 0x02	; 2
     304:	ee 0f       	add	r30, r30
     306:	ff 1f       	adc	r31, r31
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	01 90       	ld	r0, Z+
     30e:	f0 81       	ld	r31, Z
     310:	e0 2d       	mov	r30, r0
     312:	15 82       	std	Z+5, r1	; 0x05
     314:	1c c0       	rjmp	.+56     	; 0x34e <movevertical+0x82>
		}
		else {
			self->ArrPulse[self->active]->freq = self->ArrPulse[self->active]->prev;
     316:	86 81       	ldd	r24, Z+6	; 0x06
     318:	85 83       	std	Z+5, r24	; 0x05
            ASYNC(self->ArrPulse[self->active], generatePulse, self->ArrPulse[self->active]->freq);
     31a:	ec 85       	ldd	r30, Y+12	; 0x0c
     31c:	fd 85       	ldd	r31, Y+13	; 0x0d
     31e:	32 96       	adiw	r30, 0x02	; 2
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ec 0f       	add	r30, r28
     326:	fd 1f       	adc	r31, r29
     328:	00 81       	ld	r16, Z
     32a:	11 81       	ldd	r17, Z+1	; 0x01
     32c:	f8 01       	movw	r30, r16
     32e:	c5 80       	ldd	r12, Z+5	; 0x05
     330:	d1 2c       	mov	r13, r1
     332:	0f 2e       	mov	r0, r31
     334:	fa e4       	ldi	r31, 0x4A	; 74
     336:	ef 2e       	mov	r14, r31
     338:	f3 e0       	ldi	r31, 0x03	; 3
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	a9 01       	movw	r20, r18
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
		}
		ASYNC(self->gui[self->active], printAt, self->ArrPulse[self->active]->freq);
     34e:	8c 85       	ldd	r24, Y+12	; 0x0c
     350:	9d 85       	ldd	r25, Y+13	; 0x0d
     352:	fc 01       	movw	r30, r24
     354:	32 96       	adiw	r30, 0x02	; 2
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	ec 0f       	add	r30, r28
     35c:	fd 1f       	adc	r31, r29
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	c5 80       	ldd	r12, Z+5	; 0x05
     366:	fc 01       	movw	r30, r24
     368:	34 96       	adiw	r30, 0x04	; 4
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ec 0f       	add	r30, r28
     370:	fd 1f       	adc	r31, r29
     372:	00 81       	ld	r16, Z
     374:	11 81       	ldd	r17, Z+1	; 0x01
     376:	d1 2c       	mov	r13, r1
     378:	0f 2e       	mov	r0, r31
     37a:	f9 eb       	ldi	r31, 0xB9	; 185
     37c:	ef 2e       	mov	r14, r31
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ff 2e       	mov	r15, r31
     382:	f0 2d       	mov	r31, r0
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	a9 01       	movw	r20, r18
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	cb 01       	movw	r24, r22
     390:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
	}

    //UP
    if(!PNB6){
     394:	1e 99       	sbic	0x03, 6	; 3
     396:	6c c0       	rjmp	.+216    	; 0x470 <__DATA_REGION_LENGTH__+0x70>
        if (self->ArrPulse[self->active]->freq < 99){
     398:	ec 85       	ldd	r30, Y+12	; 0x0c
     39a:	fd 85       	ldd	r31, Y+13	; 0x0d
     39c:	32 96       	adiw	r30, 0x02	; 2
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	ec 0f       	add	r30, r28
     3a4:	fd 1f       	adc	r31, r29
     3a6:	01 90       	ld	r0, Z+
     3a8:	f0 81       	ld	r31, Z
     3aa:	e0 2d       	mov	r30, r0
     3ac:	85 81       	ldd	r24, Z+5	; 0x05
     3ae:	83 36       	cpi	r24, 0x63	; 99
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <movevertical+0xe8>
     3b2:	5e c0       	rjmp	.+188    	; 0x470 <__DATA_REGION_LENGTH__+0x70>
            if (self->ArrPulse[self->active]->freq == 0) {
     3b4:	81 11       	cpse	r24, r1
     3b6:	12 c0       	rjmp	.+36     	; 0x3dc <movevertical+0x110>
                ASYNC(self->ArrPulse[self->active], generatePulse, 1);
     3b8:	cc 24       	eor	r12, r12
     3ba:	c3 94       	inc	r12
     3bc:	d1 2c       	mov	r13, r1
     3be:	0f 2e       	mov	r0, r31
     3c0:	fa e4       	ldi	r31, 0x4A	; 74
     3c2:	ef 2e       	mov	r14, r31
     3c4:	f3 e0       	ldi	r31, 0x03	; 3
     3c6:	ff 2e       	mov	r15, r31
     3c8:	f0 2d       	mov	r31, r0
     3ca:	8f 01       	movw	r16, r30
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	a9 01       	movw	r20, r18
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	cb 01       	movw	r24, r22
     3d8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
			}
            self->ArrPulse[self->active]->freq += 1;
     3dc:	ec 85       	ldd	r30, Y+12	; 0x0c
     3de:	fd 85       	ldd	r31, Y+13	; 0x0d
     3e0:	32 96       	adiw	r30, 0x02	; 2
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ec 0f       	add	r30, r28
     3e8:	fd 1f       	adc	r31, r29
     3ea:	01 90       	ld	r0, Z+
     3ec:	f0 81       	ld	r31, Z
     3ee:	e0 2d       	mov	r30, r0
     3f0:	85 81       	ldd	r24, Z+5	; 0x05
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	85 83       	std	Z+5, r24	; 0x05
            ASYNC(self->gui[self->active], printAt, self->ArrPulse[self->active]->freq);
     3f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     3f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     3fa:	fc 01       	movw	r30, r24
     3fc:	32 96       	adiw	r30, 0x02	; 2
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	ec 0f       	add	r30, r28
     404:	fd 1f       	adc	r31, r29
     406:	01 90       	ld	r0, Z+
     408:	f0 81       	ld	r31, Z
     40a:	e0 2d       	mov	r30, r0
     40c:	c5 80       	ldd	r12, Z+5	; 0x05
     40e:	fc 01       	movw	r30, r24
     410:	34 96       	adiw	r30, 0x04	; 4
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	ec 0f       	add	r30, r28
     418:	fd 1f       	adc	r31, r29
     41a:	00 81       	ld	r16, Z
     41c:	11 81       	ldd	r17, Z+1	; 0x01
     41e:	d1 2c       	mov	r13, r1
     420:	0f 2e       	mov	r0, r31
     422:	f9 eb       	ldi	r31, 0xB9	; 185
     424:	ef 2e       	mov	r14, r31
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ff 2e       	mov	r15, r31
     42a:	f0 2d       	mov	r31, r0
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	a9 01       	movw	r20, r18
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	cb 01       	movw	r24, r22
     438:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
            AFTER(MSEC(1000), self->ArrPulse[self->active], smoothIncrement, 0);
     43c:	ec 85       	ldd	r30, Y+12	; 0x0c
     43e:	fd 85       	ldd	r31, Y+13	; 0x0d
     440:	32 96       	adiw	r30, 0x02	; 2
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ec 0f       	add	r30, r28
     448:	fd 1f       	adc	r31, r29
     44a:	00 81       	ld	r16, Z
     44c:	11 81       	ldd	r17, Z+1	; 0x01
     44e:	c1 2c       	mov	r12, r1
     450:	d1 2c       	mov	r13, r1
     452:	0f 2e       	mov	r0, r31
     454:	f2 eb       	ldi	r31, 0xB2	; 178
     456:	ef 2e       	mov	r14, r31
     458:	f3 e0       	ldi	r31, 0x03	; 3
     45a:	ff 2e       	mov	r15, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	a9 01       	movw	r20, r18
     464:	62 e1       	ldi	r22, 0x12	; 18
     466:	7a e7       	ldi	r23, 0x7A	; 122
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>

        }
    }
    //DOWN
    if(!PNB7){
     470:	1f 99       	sbic	0x03, 7	; 3
     472:	4d c0       	rjmp	.+154    	; 0x50e <__stack+0xf>
        if (self->ArrPulse[self->active]->freq > 0){
     474:	ec 85       	ldd	r30, Y+12	; 0x0c
     476:	fd 85       	ldd	r31, Y+13	; 0x0d
     478:	32 96       	adiw	r30, 0x02	; 2
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	ec 0f       	add	r30, r28
     480:	fd 1f       	adc	r31, r29
     482:	01 90       	ld	r0, Z+
     484:	f0 81       	ld	r31, Z
     486:	e0 2d       	mov	r30, r0
     488:	85 81       	ldd	r24, Z+5	; 0x05
     48a:	88 23       	and	r24, r24
     48c:	09 f4       	brne	.+2      	; 0x490 <__DATA_REGION_LENGTH__+0x90>
     48e:	3f c0       	rjmp	.+126    	; 0x50e <__stack+0xf>
            self->ArrPulse[self->active]->freq -= 1;
     490:	81 50       	subi	r24, 0x01	; 1
     492:	85 83       	std	Z+5, r24	; 0x05
            ASYNC(self->gui[self->active], printAt, self->ArrPulse[self->active]->freq);
     494:	8c 85       	ldd	r24, Y+12	; 0x0c
     496:	9d 85       	ldd	r25, Y+13	; 0x0d
     498:	fc 01       	movw	r30, r24
     49a:	32 96       	adiw	r30, 0x02	; 2
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	ec 0f       	add	r30, r28
     4a2:	fd 1f       	adc	r31, r29
     4a4:	01 90       	ld	r0, Z+
     4a6:	f0 81       	ld	r31, Z
     4a8:	e0 2d       	mov	r30, r0
     4aa:	c5 80       	ldd	r12, Z+5	; 0x05
     4ac:	fc 01       	movw	r30, r24
     4ae:	34 96       	adiw	r30, 0x04	; 4
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	ec 0f       	add	r30, r28
     4b6:	fd 1f       	adc	r31, r29
     4b8:	00 81       	ld	r16, Z
     4ba:	11 81       	ldd	r17, Z+1	; 0x01
     4bc:	d1 2c       	mov	r13, r1
     4be:	0f 2e       	mov	r0, r31
     4c0:	f9 eb       	ldi	r31, 0xB9	; 185
     4c2:	ef 2e       	mov	r14, r31
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	ff 2e       	mov	r15, r31
     4c8:	f0 2d       	mov	r31, r0
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	a9 01       	movw	r20, r18
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	cb 01       	movw	r24, r22
     4d6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
            AFTER(MSEC(1000), self->ArrPulse[self->active], smoothIncrement, 0);
     4da:	8c 85       	ldd	r24, Y+12	; 0x0c
     4dc:	9d 85       	ldd	r25, Y+13	; 0x0d
     4de:	02 96       	adiw	r24, 0x02	; 2
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	c8 0f       	add	r28, r24
     4e6:	d9 1f       	adc	r29, r25
     4e8:	08 81       	ld	r16, Y
     4ea:	19 81       	ldd	r17, Y+1	; 0x01
     4ec:	c1 2c       	mov	r12, r1
     4ee:	d1 2c       	mov	r13, r1
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f2 eb       	ldi	r31, 0xB2	; 178
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f3 e0       	ldi	r31, 0x03	; 3
     4f8:	ff 2e       	mov	r15, r31
     4fa:	f0 2d       	mov	r31, r0
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	a9 01       	movw	r20, r18
     502:	62 e1       	ldi	r22, 0x12	; 18
     504:	7a e7       	ldi	r23, 0x7A	; 122
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>

        }
    }
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	08 95       	ret

00000520 <movehorizontal>:

void movehorizontal(CONTROLLER *self) {
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
	
	//LEFT
	if(!PNE2) {
     532:	62 99       	sbic	0x0c, 2	; 12
     534:	35 c0       	rjmp	.+106    	; 0x5a0 <movehorizontal+0x80>
		if (self->active > 0) {
     536:	8c 85       	ldd	r24, Y+12	; 0x0c
     538:	9d 85       	ldd	r25, Y+13	; 0x0d
     53a:	18 16       	cp	r1, r24
     53c:	19 06       	cpc	r1, r25
     53e:	0c f0       	brlt	.+2      	; 0x542 <movehorizontal+0x22>
     540:	64 c0       	rjmp	.+200    	; 0x60a <movehorizontal+0xea>
			ASYNC(self->gui[self->active], switchActive, NULL);
     542:	fc 01       	movw	r30, r24
     544:	34 96       	adiw	r30, 0x04	; 4
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	ec 0f       	add	r30, r28
     54c:	fd 1f       	adc	r31, r29
     54e:	00 81       	ld	r16, Z
     550:	11 81       	ldd	r17, Z+1	; 0x01
     552:	c1 2c       	mov	r12, r1
     554:	d1 2c       	mov	r13, r1
     556:	0f 2e       	mov	r0, r31
     558:	ff ee       	ldi	r31, 0xEF	; 239
     55a:	ef 2e       	mov	r14, r31
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	ff 2e       	mov	r15, r31
     560:	f0 2d       	mov	r31, r0
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	a9 01       	movw	r20, r18
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	cb 01       	movw	r24, r22
     56e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
			self->active -= 1;
     572:	8c 85       	ldd	r24, Y+12	; 0x0c
     574:	9d 85       	ldd	r25, Y+13	; 0x0d
     576:	9c 01       	movw	r18, r24
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	31 09       	sbc	r19, r1
     57c:	3d 87       	std	Y+13, r19	; 0x0d
     57e:	2c 87       	std	Y+12, r18	; 0x0c
			ASYNC(self->gui[self->active], switchActive, NULL);
     580:	03 96       	adiw	r24, 0x03	; 3
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	c8 0f       	add	r28, r24
     588:	d9 1f       	adc	r29, r25
     58a:	08 81       	ld	r16, Y
     58c:	19 81       	ldd	r17, Y+1	; 0x01
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	a9 01       	movw	r20, r18
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	cb 01       	movw	r24, r22
     59a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
     59e:	35 c0       	rjmp	.+106    	; 0x60a <movehorizontal+0xea>
		}
	}
		
	//RIGHT
	else if(!PNE3) {
     5a0:	63 99       	sbic	0x0c, 3	; 12
     5a2:	33 c0       	rjmp	.+102    	; 0x60a <movehorizontal+0xea>
		if (self->active < 1) {
     5a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     5a6:	9d 85       	ldd	r25, Y+13	; 0x0d
     5a8:	18 16       	cp	r1, r24
     5aa:	19 06       	cpc	r1, r25
     5ac:	74 f1       	brlt	.+92     	; 0x60a <movehorizontal+0xea>
			ASYNC(self->gui[self->active], switchActive, NULL);
     5ae:	fc 01       	movw	r30, r24
     5b0:	34 96       	adiw	r30, 0x04	; 4
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ec 0f       	add	r30, r28
     5b8:	fd 1f       	adc	r31, r29
     5ba:	00 81       	ld	r16, Z
     5bc:	11 81       	ldd	r17, Z+1	; 0x01
     5be:	c1 2c       	mov	r12, r1
     5c0:	d1 2c       	mov	r13, r1
     5c2:	0f 2e       	mov	r0, r31
     5c4:	ff ee       	ldi	r31, 0xEF	; 239
     5c6:	ef 2e       	mov	r14, r31
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	ff 2e       	mov	r15, r31
     5cc:	f0 2d       	mov	r31, r0
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	a9 01       	movw	r20, r18
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	cb 01       	movw	r24, r22
     5da:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
			self->active += 1;
     5de:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5e2:	9c 01       	movw	r18, r24
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	3d 87       	std	Y+13, r19	; 0x0d
     5ea:	2c 87       	std	Y+12, r18	; 0x0c
			ASYNC(self->gui[self->active], switchActive, NULL);
     5ec:	05 96       	adiw	r24, 0x05	; 5
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	c8 0f       	add	r28, r24
     5f4:	d9 1f       	adc	r29, r25
     5f6:	08 81       	ld	r16, Y
     5f8:	19 81       	ldd	r17, Y+1	; 0x01
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	a9 01       	movw	r20, r18
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	cb 01       	movw	r24, r22
     606:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
		}
	}
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	08 95       	ret

0000061c <main>:


int main(void){	
	
	
	ArrPulse[0].PS = &PS;
     61c:	e0 e2       	ldi	r30, 0x20	; 32
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	8c e4       	ldi	r24, 0x4C	; 76
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	90 87       	std	Z+8, r25	; 0x08
     626:	87 83       	std	Z+7, r24	; 0x07
	ArrPulse[1].PS = &PS;
     628:	93 8b       	std	Z+19, r25	; 0x13
     62a:	82 8b       	std	Z+18, r24	; 0x12
	ArrPulse[0].gui = &ArrGui[0];
     62c:	26 e1       	ldi	r18, 0x16	; 22
     62e:	31 e0       	ldi	r19, 0x01	; 1
     630:	32 87       	std	Z+10, r19	; 0x0a
     632:	21 87       	std	Z+9, r18	; 0x09
	ArrPulse[1].gui = &ArrGui[1];
     634:	8b e1       	ldi	r24, 0x1B	; 27
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	95 8b       	std	Z+21, r25	; 0x15
     63a:	84 8b       	std	Z+20, r24	; 0x14

    input.ArrPulse[0] = &ArrPulse[0];
     63c:	ae e3       	ldi	r26, 0x3E	; 62
     63e:	b1 e0       	ldi	r27, 0x01	; 1
     640:	15 96       	adiw	r26, 0x05	; 5
     642:	fc 93       	st	X, r31
     644:	ee 93       	st	-X, r30
     646:	14 97       	sbiw	r26, 0x04	; 4
	input.ArrPulse[1] = &ArrPulse[1];
     648:	4b e2       	ldi	r20, 0x2B	; 43
     64a:	51 e0       	ldi	r21, 0x01	; 1
     64c:	17 96       	adiw	r26, 0x07	; 7
     64e:	5c 93       	st	X, r21
     650:	4e 93       	st	-X, r20
     652:	16 97       	sbiw	r26, 0x06	; 6
    input.gui[0] = &ArrGui[0];
     654:	19 96       	adiw	r26, 0x09	; 9
     656:	3c 93       	st	X, r19
     658:	2e 93       	st	-X, r18
     65a:	18 97       	sbiw	r26, 0x08	; 8
	input.gui[1] = &ArrGui[1];
     65c:	1b 96       	adiw	r26, 0x0b	; 11
     65e:	9c 93       	st	X, r25
     660:	8e 93       	st	-X, r24
     662:	1a 97       	sbiw	r26, 0x0a	; 10
	
	INSTALL(&input, movevertical, IRQ_PCINT1);
     664:	42 e0       	ldi	r20, 0x02	; 2
     666:	66 e6       	ldi	r22, 0x66	; 102
     668:	71 e0       	ldi	r23, 0x01	; 1
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 77 10 	call	0x20ee	; 0x20ee <install>
	INSTALL(&input, movehorizontal, IRQ_PCINT0);
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	60 e9       	ldi	r22, 0x90	; 144
     674:	72 e0       	ldi	r23, 0x02	; 2
     676:	8e e3       	ldi	r24, 0x3E	; 62
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 77 10 	call	0x20ee	; 0x20ee <install>
	
	TINYTIMBER(&input, initialize, NULL);
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	71 e0       	ldi	r23, 0x01	; 1
     686:	8e e3       	ldi	r24, 0x3E	; 62
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 92 10 	call	0x2124	; 0x2124 <tinytimber>
}
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 95       	ret

00000694 <generatePulse>:
#define PNE3 (PINE & (1<<PINE3))
#define PNB4 (PINB & (1<<PINB4))
#define PNB6 (PINB & (1<<PINB6))
#define PNB7 (PINB & (1<<PINB7))

void generatePulse(PulseGen *self) {
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
    if (self->freq > 0) {
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	88 23       	and	r24, r24
     6aa:	09 f4       	brne	.+2      	; 0x6ae <generatePulse+0x1a>
     6ac:	40 c0       	rjmp	.+128    	; 0x72e <generatePulse+0x9a>
        ASYNC(self->PS, sendPulse, self->pin);
     6ae:	cc 80       	ldd	r12, Y+4	; 0x04
     6b0:	0f 81       	ldd	r16, Y+7	; 0x07
     6b2:	18 85       	ldd	r17, Y+8	; 0x08
     6b4:	d1 2c       	mov	r13, r1
     6b6:	0f 2e       	mov	r0, r31
     6b8:	fb e1       	ldi	r31, 0x1B	; 27
     6ba:	ef 2e       	mov	r14, r31
     6bc:	f4 e0       	ldi	r31, 0x04	; 4
     6be:	ff 2e       	mov	r15, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	a9 01       	movw	r20, r18
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	cb 01       	movw	r24, r22
     6ce:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
        AFTER(MSEC(1000/(self->freq*2)), self, generatePulse, NULL);
     6d2:	6d 81       	ldd	r22, Y+5	; 0x05
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	88 ee       	ldi	r24, 0xE8	; 232
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
     6e2:	2d e7       	ldi	r18, 0x7D	; 125
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	db 01       	movw	r26, r22
     6e8:	0e 94 bd 10 	call	0x217a	; 0x217a <__usmulhisi3>
     6ec:	8b 01       	movw	r16, r22
     6ee:	9c 01       	movw	r18, r24
     6f0:	99 23       	and	r25, r25
     6f2:	24 f4       	brge	.+8      	; 0x6fc <generatePulse+0x68>
     6f4:	0d 5f       	subi	r16, 0xFD	; 253
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
     6f8:	2f 4f       	sbci	r18, 0xFF	; 255
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	c9 01       	movw	r24, r18
     6fe:	b8 01       	movw	r22, r16
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	77 95       	ror	r23
     706:	67 95       	ror	r22
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	77 95       	ror	r23
     70e:	67 95       	ror	r22
     710:	c1 2c       	mov	r12, r1
     712:	d1 2c       	mov	r13, r1
     714:	0f 2e       	mov	r0, r31
     716:	fa e4       	ldi	r31, 0x4A	; 74
     718:	ef 2e       	mov	r14, r31
     71a:	f3 e0       	ldi	r31, 0x03	; 3
     71c:	ff 2e       	mov	r15, r31
     71e:	f0 2d       	mov	r31, r0
     720:	8e 01       	movw	r16, r28
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	a9 01       	movw	r20, r18
     728:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
     72c:	12 c0       	rjmp	.+36     	; 0x752 <generatePulse+0xbe>
    } else {
        ASYNC(self->PS, resetPin, self->pin);
     72e:	cc 80       	ldd	r12, Y+4	; 0x04
     730:	0f 81       	ldd	r16, Y+7	; 0x07
     732:	18 85       	ldd	r17, Y+8	; 0x08
     734:	d1 2c       	mov	r13, r1
     736:	0f 2e       	mov	r0, r31
     738:	f6 e2       	ldi	r31, 0x26	; 38
     73a:	ef 2e       	mov	r14, r31
     73c:	f4 e0       	ldi	r31, 0x04	; 4
     73e:	ff 2e       	mov	r15, r31
     740:	f0 2d       	mov	r31, r0
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	a9 01       	movw	r20, r18
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	cb 01       	movw	r24, r22
     74e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
    }
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret

00000764 <smoothIncrement>:


void smoothIncrement(PulseGen *self){
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	ec 01       	movw	r28, r24
    if (!PNB6 && self->freq < 99){
     776:	1e 99       	sbic	0x03, 6	; 3
     778:	2b c0       	rjmp	.+86     	; 0x7d0 <smoothIncrement+0x6c>
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	83 36       	cpi	r24, 0x63	; 99
     77e:	40 f5       	brcc	.+80     	; 0x7d0 <smoothIncrement+0x6c>
        self->freq += 1;
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	8d 83       	std	Y+5, r24	; 0x05
        ASYNC(self->gui, printAt, self->freq);
     784:	09 85       	ldd	r16, Y+9	; 0x09
     786:	1a 85       	ldd	r17, Y+10	; 0x0a
     788:	c8 2e       	mov	r12, r24
     78a:	d1 2c       	mov	r13, r1
     78c:	0f 2e       	mov	r0, r31
     78e:	f9 eb       	ldi	r31, 0xB9	; 185
     790:	ef 2e       	mov	r14, r31
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	ff 2e       	mov	r15, r31
     796:	f0 2d       	mov	r31, r0
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	a9 01       	movw	r20, r18
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	cb 01       	movw	r24, r22
     7a4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
		if (!PNB6) {
     7a8:	1e 99       	sbic	0x03, 6	; 3
     7aa:	12 c0       	rjmp	.+36     	; 0x7d0 <smoothIncrement+0x6c>
			AFTER(MSEC(75), self, smoothIncrement, 0);
     7ac:	c1 2c       	mov	r12, r1
     7ae:	d1 2c       	mov	r13, r1
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f2 eb       	ldi	r31, 0xB2	; 178
     7b4:	ef 2e       	mov	r14, r31
     7b6:	f3 e0       	ldi	r31, 0x03	; 3
     7b8:	ff 2e       	mov	r15, r31
     7ba:	f0 2d       	mov	r31, r0
     7bc:	8e 01       	movw	r16, r28
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	a9 01       	movw	r20, r18
     7c4:	67 e2       	ldi	r22, 0x27	; 39
     7c6:	79 e0       	ldi	r23, 0x09	; 9
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
		}
    }
    if (!PNB7 && self->freq > 0){
     7d0:	1f 99       	sbic	0x03, 7	; 3
     7d2:	28 c0       	rjmp	.+80     	; 0x824 <smoothIncrement+0xc0>
     7d4:	cd 80       	ldd	r12, Y+5	; 0x05
     7d6:	cc 20       	and	r12, r12
     7d8:	29 f1       	breq	.+74     	; 0x824 <smoothIncrement+0xc0>
        self->freq -= 1;
     7da:	ca 94       	dec	r12
     7dc:	cd 82       	std	Y+5, r12	; 0x05
        ASYNC(self->gui, printAt, self->freq);
     7de:	09 85       	ldd	r16, Y+9	; 0x09
     7e0:	1a 85       	ldd	r17, Y+10	; 0x0a
     7e2:	d1 2c       	mov	r13, r1
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f9 eb       	ldi	r31, 0xB9	; 185
     7e8:	ef 2e       	mov	r14, r31
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ff 2e       	mov	r15, r31
     7ee:	f0 2d       	mov	r31, r0
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	a9 01       	movw	r20, r18
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	cb 01       	movw	r24, r22
     7fc:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
        AFTER(MSEC(75), self, smoothIncrement, 0);
     800:	c1 2c       	mov	r12, r1
     802:	d1 2c       	mov	r13, r1
     804:	0f 2e       	mov	r0, r31
     806:	f2 eb       	ldi	r31, 0xB2	; 178
     808:	ef 2e       	mov	r14, r31
     80a:	f3 e0       	ldi	r31, 0x03	; 3
     80c:	ff 2e       	mov	r15, r31
     80e:	f0 2d       	mov	r31, r0
     810:	8e 01       	movw	r16, r28
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	a9 01       	movw	r20, r18
     818:	67 e2       	ldi	r22, 0x27	; 39
     81a:	79 e0       	ldi	r23, 0x09	; 9
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
    }
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <sendPulse>:
#include <stdint.h>

void sendPulse(PulseSender *self, uint8_t pin){

    //Invert bit at position pin
    PORTE ^= 0x1 << pin;
     836:	2e b1       	in	r18, 0x0e	; 14
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <sendPulse+0xc>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	6a 95       	dec	r22
     844:	e2 f7       	brpl	.-8      	; 0x83e <sendPulse+0x8>
     846:	82 27       	eor	r24, r18
     848:	8e b9       	out	0x0e, r24	; 14
     84a:	08 95       	ret

0000084c <resetPin>:
}   

void resetPin(PulseSender *self, uint8_t pin) {
    PORTE &= ~(0x1 << pin);
     84c:	2e b1       	in	r18, 0x0e	; 14
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	02 c0       	rjmp	.+4      	; 0x858 <resetPin+0xc>
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	6a 95       	dec	r22
     85a:	e2 f7       	brpl	.-8      	; 0x854 <resetPin+0x8>
     85c:	80 95       	com	r24
     85e:	82 23       	and	r24, r18
     860:	8e b9       	out	0x0e, r24	; 14
     862:	08 95       	ret

00000864 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	00 d0       	rcall	.+0      	; 0x86a <initialize+0x6>
     86a:	00 d0       	rcall	.+0      	; 0x86c <initialize+0x8>
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	18 c0       	rjmp	.+48     	; 0x8a6 <initialize+0x42>
     876:	ac 01       	movw	r20, r24
     878:	4f 5f       	subi	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	9a 01       	movw	r18, r20
     87e:	22 95       	swap	r18
     880:	32 95       	swap	r19
     882:	30 7f       	andi	r19, 0xF0	; 240
     884:	32 27       	eor	r19, r18
     886:	20 7f       	andi	r18, 0xF0	; 240
     888:	32 27       	eor	r19, r18
     88a:	2d 5c       	subi	r18, 0xCD	; 205
     88c:	3d 4f       	sbci	r19, 0xFD	; 253
     88e:	82 95       	swap	r24
     890:	92 95       	swap	r25
     892:	90 7f       	andi	r25, 0xF0	; 240
     894:	98 27       	eor	r25, r24
     896:	80 7f       	andi	r24, 0xF0	; 240
     898:	98 27       	eor	r25, r24
     89a:	fc 01       	movw	r30, r24
     89c:	ed 5c       	subi	r30, 0xCD	; 205
     89e:	fd 4f       	sbci	r31, 0xFD	; 253
     8a0:	31 83       	std	Z+1, r19	; 0x01
     8a2:	20 83       	st	Z, r18
     8a4:	ca 01       	movw	r24, r20
     8a6:	8e 30       	cpi	r24, 0x0E	; 14
     8a8:	91 05       	cpc	r25, r1
     8aa:	2c f3       	brlt	.-54     	; 0x876 <initialize+0x12>
     8ac:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <messages+0xe1>
     8b0:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <messages+0xe0>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	15 c0       	rjmp	.+42     	; 0x8e4 <initialize+0x80>
     8ba:	ac 01       	movw	r20, r24
     8bc:	4f 5f       	subi	r20, 0xFF	; 255
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	6d e1       	ldi	r22, 0x1D	; 29
     8c2:	64 9f       	mul	r22, r20
     8c4:	90 01       	movw	r18, r0
     8c6:	65 9f       	mul	r22, r21
     8c8:	30 0d       	add	r19, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	22 58       	subi	r18, 0x82	; 130
     8ce:	3e 4f       	sbci	r19, 0xFE	; 254
     8d0:	68 9f       	mul	r22, r24
     8d2:	f0 01       	movw	r30, r0
     8d4:	69 9f       	mul	r22, r25
     8d6:	f0 0d       	add	r31, r0
     8d8:	11 24       	eor	r1, r1
     8da:	e2 58       	subi	r30, 0x82	; 130
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
     8e2:	ca 01       	movw	r24, r20
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	91 05       	cpc	r25, r1
     8e8:	44 f3       	brlt	.-48     	; 0x8ba <initialize+0x56>
     8ea:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <threads+0x58>
     8ee:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <threads+0x57>
     8f2:	1a 82       	std	Y+2, r1	; 0x02
     8f4:	19 82       	std	Y+1, r1	; 0x01
     8f6:	32 c0       	rjmp	.+100    	; 0x95c <initialize+0xf8>
     8f8:	2d e1       	ldi	r18, 0x1D	; 29
     8fa:	49 81       	ldd	r20, Y+1	; 0x01
     8fc:	5a 81       	ldd	r21, Y+2	; 0x02
     8fe:	24 9f       	mul	r18, r20
     900:	c0 01       	movw	r24, r0
     902:	25 9f       	mul	r18, r21
     904:	90 0d       	add	r25, r0
     906:	11 24       	eor	r1, r1
     908:	fc 01       	movw	r30, r24
     90a:	ec 57       	subi	r30, 0x7C	; 124
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	fc 83       	std	Y+4, r31	; 0x04
     910:	eb 83       	std	Y+3, r30	; 0x03
     912:	cf 01       	movw	r24, r30
     914:	0e 94 e7 10 	call	0x21ce	; 0x21ce <setjmp>
     918:	20 e6       	ldi	r18, 0x60	; 96
     91a:	49 81       	ldd	r20, Y+1	; 0x01
     91c:	5a 81       	ldd	r21, Y+2	; 0x02
     91e:	24 9f       	mul	r18, r20
     920:	c0 01       	movw	r24, r0
     922:	25 9f       	mul	r18, r21
     924:	90 0d       	add	r25, r0
     926:	11 24       	eor	r1, r1
     928:	81 58       	subi	r24, 0x81	; 129
     92a:	9c 4f       	sbci	r25, 0xFC	; 252
     92c:	eb 81       	ldd	r30, Y+3	; 0x03
     92e:	fc 81       	ldd	r31, Y+4	; 0x04
     930:	91 8b       	std	Z+17, r25	; 0x11
     932:	80 8b       	std	Z+16, r24	; 0x10
     934:	93 8b       	std	Z+19, r25	; 0x13
     936:	82 8b       	std	Z+18, r24	; 0x12
     938:	8f e1       	ldi	r24, 0x1F	; 31
     93a:	90 e1       	ldi	r25, 0x10	; 16
     93c:	96 8b       	std	Z+22, r25	; 0x16
     93e:	85 8b       	std	Z+21, r24	; 0x15
     940:	8d e1       	ldi	r24, 0x1D	; 29
     942:	84 9f       	mul	r24, r20
     944:	f0 01       	movw	r30, r0
     946:	85 9f       	mul	r24, r21
     948:	f0 0d       	add	r31, r0
     94a:	11 24       	eor	r1, r1
     94c:	e2 58       	subi	r30, 0x82	; 130
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	15 82       	std	Z+5, r1	; 0x05
     952:	14 82       	std	Z+4, r1	; 0x04
     954:	4f 5f       	subi	r20, 0xFF	; 255
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	5a 83       	std	Y+2, r21	; 0x02
     95a:	49 83       	std	Y+1, r20	; 0x01
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	3a 81       	ldd	r19, Y+2	; 0x02
     960:	24 30       	cpi	r18, 0x04	; 4
     962:	31 05       	cpc	r19, r1
     964:	4c f2       	brlt	.-110    	; 0x8f8 <initialize+0x94>
     966:	e6 e1       	ldi	r30, 0x16	; 22
     968:	f2 e0       	ldi	r31, 0x02	; 2
     96a:	11 82       	std	Z+1, r1	; 0x01
     96c:	10 82       	st	Z, r1
     96e:	15 82       	std	Z+5, r1	; 0x05
     970:	14 82       	std	Z+4, r1	; 0x04
     972:	13 82       	std	Z+3, r1	; 0x03
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	e1 e6       	ldi	r30, 0x61	; 97
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	80 83       	st	Z, r24
     97e:	10 82       	st	Z, r1
     980:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     984:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <dispatch>:
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <dispatch+0x6>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current>
     9b4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <current+0x1>
     9b8:	06 96       	adiw	r24, 0x06	; 6
     9ba:	0e 94 e7 10 	call	0x21ce	; 0x21ce <setjmp>
     9be:	89 2b       	or	r24, r25
     9c0:	59 f4       	brne	.+22     	; 0x9d8 <dispatch+0x36>
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <current+0x1>
     9ca:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <current>
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	06 96       	adiw	r24, 0x06	; 6
     9d4:	0e 94 07 11 	call	0x220e	; 0x220e <longjmp>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <enqueueByDeadline>:
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	eb 01       	movw	r28, r22
     9f0:	e8 81       	ld	r30, Y
     9f2:	f9 81       	ldd	r31, Y+1	; 0x01
     9f4:	c0 e0       	ldi	r28, 0x00	; 0
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <enqueueByDeadline+0x20>
     9fa:	ef 01       	movw	r28, r30
     9fc:	01 90       	ld	r0, Z+
     9fe:	f0 81       	ld	r31, Z
     a00:	e0 2d       	mov	r30, r0
     a02:	30 97       	sbiw	r30, 0x00	; 0
     a04:	79 f0       	breq	.+30     	; 0xa24 <enqueueByDeadline+0x42>
     a06:	06 81       	ldd	r16, Z+6	; 0x06
     a08:	17 81       	ldd	r17, Z+7	; 0x07
     a0a:	20 85       	ldd	r18, Z+8	; 0x08
     a0c:	31 85       	ldd	r19, Z+9	; 0x09
     a0e:	16 96       	adiw	r26, 0x06	; 6
     a10:	4d 91       	ld	r20, X+
     a12:	5d 91       	ld	r21, X+
     a14:	6d 91       	ld	r22, X+
     a16:	7c 91       	ld	r23, X
     a18:	19 97       	sbiw	r26, 0x09	; 9
     a1a:	40 17       	cp	r20, r16
     a1c:	51 07       	cpc	r21, r17
     a1e:	62 07       	cpc	r22, r18
     a20:	73 07       	cpc	r23, r19
     a22:	5c f7       	brge	.-42     	; 0x9fa <enqueueByDeadline+0x18>
     a24:	11 96       	adiw	r26, 0x01	; 1
     a26:	fc 93       	st	X, r31
     a28:	ee 93       	st	-X, r30
     a2a:	20 97       	sbiw	r28, 0x00	; 0
     a2c:	21 f4       	brne	.+8      	; 0xa36 <enqueueByDeadline+0x54>
     a2e:	fc 01       	movw	r30, r24
     a30:	b1 83       	std	Z+1, r27	; 0x01
     a32:	a0 83       	st	Z, r26
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <enqueueByDeadline+0x58>
     a36:	b9 83       	std	Y+1, r27	; 0x01
     a38:	a8 83       	st	Y, r26
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <enqueueByBaseline>:
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	eb 01       	movw	r28, r22
     a52:	e8 81       	ld	r30, Y
     a54:	f9 81       	ldd	r31, Y+1	; 0x01
     a56:	c0 e0       	ldi	r28, 0x00	; 0
     a58:	d0 e0       	ldi	r29, 0x00	; 0
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <enqueueByBaseline+0x20>
     a5c:	ef 01       	movw	r28, r30
     a5e:	01 90       	ld	r0, Z+
     a60:	f0 81       	ld	r31, Z
     a62:	e0 2d       	mov	r30, r0
     a64:	30 97       	sbiw	r30, 0x00	; 0
     a66:	79 f0       	breq	.+30     	; 0xa86 <enqueueByBaseline+0x42>
     a68:	02 81       	ldd	r16, Z+2	; 0x02
     a6a:	13 81       	ldd	r17, Z+3	; 0x03
     a6c:	24 81       	ldd	r18, Z+4	; 0x04
     a6e:	35 81       	ldd	r19, Z+5	; 0x05
     a70:	12 96       	adiw	r26, 0x02	; 2
     a72:	4d 91       	ld	r20, X+
     a74:	5d 91       	ld	r21, X+
     a76:	6d 91       	ld	r22, X+
     a78:	7c 91       	ld	r23, X
     a7a:	15 97       	sbiw	r26, 0x05	; 5
     a7c:	40 17       	cp	r20, r16
     a7e:	51 07       	cpc	r21, r17
     a80:	62 07       	cpc	r22, r18
     a82:	73 07       	cpc	r23, r19
     a84:	5c f7       	brge	.-42     	; 0xa5c <enqueueByBaseline+0x18>
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	fc 93       	st	X, r31
     a8a:	ee 93       	st	-X, r30
     a8c:	20 97       	sbiw	r28, 0x00	; 0
     a8e:	21 f4       	brne	.+8      	; 0xa98 <enqueueByBaseline+0x54>
     a90:	fc 01       	movw	r30, r24
     a92:	b1 83       	std	Z+1, r27	; 0x01
     a94:	a0 83       	st	Z, r26
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <enqueueByBaseline+0x58>
     a98:	b9 83       	std	Y+1, r27	; 0x01
     a9a:	a8 83       	st	Y, r26
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <dequeue>:
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	00 d0       	rcall	.+0      	; 0xaac <dequeue+0x6>
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	fc 01       	movw	r30, r24
     ab2:	20 81       	ld	r18, Z
     ab4:	31 81       	ldd	r19, Z+1	; 0x01
     ab6:	3a 83       	std	Y+2, r19	; 0x02
     ab8:	29 83       	std	Y+1, r18	; 0x01
     aba:	29 81       	ldd	r18, Y+1	; 0x01
     abc:	3a 81       	ldd	r19, Y+2	; 0x02
     abe:	23 2b       	or	r18, r19
     ac0:	51 f0       	breq	.+20     	; 0xad6 <dequeue+0x30>
     ac2:	e9 81       	ldd	r30, Y+1	; 0x01
     ac4:	fa 81       	ldd	r31, Y+2	; 0x02
     ac6:	20 81       	ld	r18, Z
     ac8:	31 81       	ldd	r19, Z+1	; 0x01
     aca:	fc 01       	movw	r30, r24
     acc:	31 83       	std	Z+1, r19	; 0x01
     ace:	20 83       	st	Z, r18
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	0b c0       	rjmp	.+22     	; 0xaec <dequeue+0x46>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     adc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     ae0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	83 bf       	out	0x33, r24	; 51
     ae8:	88 95       	sleep
     aea:	fc cf       	rjmp	.-8      	; 0xae4 <dequeue+0x3e>
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <insert>:
     af6:	fb 01       	movw	r30, r22
     af8:	20 81       	ld	r18, Z
     afa:	31 81       	ldd	r19, Z+1	; 0x01
     afc:	fc 01       	movw	r30, r24
     afe:	31 83       	std	Z+1, r19	; 0x01
     b00:	20 83       	st	Z, r18
     b02:	fb 01       	movw	r30, r22
     b04:	91 83       	std	Z+1, r25	; 0x01
     b06:	80 83       	st	Z, r24
     b08:	08 95       	ret

00000b0a <push>:
     b0a:	fb 01       	movw	r30, r22
     b0c:	20 81       	ld	r18, Z
     b0e:	31 81       	ldd	r19, Z+1	; 0x01
     b10:	fc 01       	movw	r30, r24
     b12:	31 83       	std	Z+1, r19	; 0x01
     b14:	20 83       	st	Z, r18
     b16:	fb 01       	movw	r30, r22
     b18:	91 83       	std	Z+1, r25	; 0x01
     b1a:	80 83       	st	Z, r24
     b1c:	08 95       	ret

00000b1e <pop>:
     b1e:	dc 01       	movw	r26, r24
     b20:	ed 91       	ld	r30, X+
     b22:	fc 91       	ld	r31, X
     b24:	11 97       	sbiw	r26, 0x01	; 1
     b26:	20 81       	ld	r18, Z
     b28:	31 81       	ldd	r19, Z+1	; 0x01
     b2a:	2d 93       	st	X+, r18
     b2c:	3c 93       	st	X, r19
     b2e:	cf 01       	movw	r24, r30
     b30:	08 95       	ret

00000b32 <schedule>:
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <activeStack>
     b3a:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <activeStack+0x1>
     b3e:	c2 81       	ldd	r28, Z+2	; 0x02
     b40:	d3 81       	ldd	r29, Z+3	; 0x03
     b42:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <msgQ>
     b46:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <msgQ+0x1>
     b4a:	30 97       	sbiw	r30, 0x00	; 0
     b4c:	19 f1       	breq	.+70     	; 0xb94 <schedule+0x62>
     b4e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <threadPool>
     b52:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <threadPool+0x1>
     b56:	89 2b       	or	r24, r25
     b58:	e9 f0       	breq	.+58     	; 0xb94 <schedule+0x62>
     b5a:	20 97       	sbiw	r28, 0x00	; 0
     b5c:	69 f0       	breq	.+26     	; 0xb78 <schedule+0x46>
     b5e:	86 81       	ldd	r24, Z+6	; 0x06
     b60:	97 81       	ldd	r25, Z+7	; 0x07
     b62:	a0 85       	ldd	r26, Z+8	; 0x08
     b64:	b1 85       	ldd	r27, Z+9	; 0x09
     b66:	4e 81       	ldd	r20, Y+6	; 0x06
     b68:	5f 81       	ldd	r21, Y+7	; 0x07
     b6a:	68 85       	ldd	r22, Y+8	; 0x08
     b6c:	79 85       	ldd	r23, Y+9	; 0x09
     b6e:	84 1b       	sub	r24, r20
     b70:	95 0b       	sbc	r25, r21
     b72:	a6 0b       	sbc	r26, r22
     b74:	b7 0b       	sbc	r27, r23
     b76:	72 f4       	brpl	.+28     	; 0xb94 <schedule+0x62>
     b78:	8a e3       	ldi	r24, 0x3A	; 58
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <pop>
     b80:	68 e3       	ldi	r22, 0x38	; 56
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	0e 94 85 05 	call	0xb0a	; 0xb0a <push>
     b88:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <activeStack>
     b8c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <activeStack+0x1>
     b90:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <dispatch>
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <__vector_1>:
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
     bc0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
     bc4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
     bc8:	ac 01       	movw	r20, r24
     bca:	09 2e       	mov	r0, r25
     bcc:	00 0c       	add	r0, r0
     bce:	66 0b       	sbc	r22, r22
     bd0:	77 0b       	sbc	r23, r23
     bd2:	9a 01       	movw	r18, r20
     bd4:	11 27       	eor	r17, r17
     bd6:	00 27       	eor	r16, r16
     bd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bdc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	40 2b       	or	r20, r16
     be6:	51 2b       	or	r21, r17
     be8:	62 2b       	or	r22, r18
     bea:	73 2b       	or	r23, r19
     bec:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
     bf0:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
     bf4:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
     bf8:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
     bfc:	b0 9b       	sbis	0x16, 0	; 22
     bfe:	1a c0       	rjmp	.+52     	; 0xc34 <__vector_1+0x9a>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	09 2e       	mov	r0, r25
     c04:	00 0c       	add	r0, r0
     c06:	aa 0b       	sbc	r26, r26
     c08:	bb 0b       	sbc	r27, r27
     c0a:	bc 01       	movw	r22, r24
     c0c:	55 27       	eor	r21, r21
     c0e:	44 27       	eor	r20, r20
     c10:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c14:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	84 2b       	or	r24, r20
     c1e:	95 2b       	or	r25, r21
     c20:	a6 2b       	or	r26, r22
     c22:	b7 2b       	or	r27, r23
     c24:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     c28:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     c2c:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     c30:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     c34:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable>
     c38:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1>
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	39 f0       	breq	.+14     	; 0xc4e <__vector_1+0xb4>
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable>
     c48:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1>
     c4c:	09 95       	icall
     c4e:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_2>:
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
     c9e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
     ca2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
     ca6:	ac 01       	movw	r20, r24
     ca8:	09 2e       	mov	r0, r25
     caa:	00 0c       	add	r0, r0
     cac:	66 0b       	sbc	r22, r22
     cae:	77 0b       	sbc	r23, r23
     cb0:	9a 01       	movw	r18, r20
     cb2:	11 27       	eor	r17, r17
     cb4:	00 27       	eor	r16, r16
     cb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	40 2b       	or	r20, r16
     cc4:	51 2b       	or	r21, r17
     cc6:	62 2b       	or	r22, r18
     cc8:	73 2b       	or	r23, r19
     cca:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
     cce:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
     cd2:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
     cd6:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
     cda:	b0 9b       	sbis	0x16, 0	; 22
     cdc:	1a c0       	rjmp	.+52     	; 0xd12 <__vector_2+0x9a>
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	09 2e       	mov	r0, r25
     ce2:	00 0c       	add	r0, r0
     ce4:	aa 0b       	sbc	r26, r26
     ce6:	bb 0b       	sbc	r27, r27
     ce8:	bc 01       	movw	r22, r24
     cea:	55 27       	eor	r21, r21
     cec:	44 27       	eor	r20, r20
     cee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cf2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	84 2b       	or	r24, r20
     cfc:	95 2b       	or	r25, r21
     cfe:	a6 2b       	or	r26, r22
     d00:	b7 2b       	or	r27, r23
     d02:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     d06:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     d0a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     d0e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     d12:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x2>
     d16:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x3>
     d1a:	30 97       	sbiw	r30, 0x00	; 0
     d1c:	39 f0       	breq	.+14     	; 0xd2c <__vector_2+0xb4>
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x2>
     d26:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x3>
     d2a:	09 95       	icall
     d2c:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_3>:
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	2f 93       	push	r18
     d66:	3f 93       	push	r19
     d68:	4f 93       	push	r20
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
     d7c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
     d80:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
     d84:	ac 01       	movw	r20, r24
     d86:	09 2e       	mov	r0, r25
     d88:	00 0c       	add	r0, r0
     d8a:	66 0b       	sbc	r22, r22
     d8c:	77 0b       	sbc	r23, r23
     d8e:	9a 01       	movw	r18, r20
     d90:	11 27       	eor	r17, r17
     d92:	00 27       	eor	r16, r16
     d94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	40 2b       	or	r20, r16
     da2:	51 2b       	or	r21, r17
     da4:	62 2b       	or	r22, r18
     da6:	73 2b       	or	r23, r19
     da8:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
     dac:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
     db0:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
     db4:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
     db8:	b0 9b       	sbis	0x16, 0	; 22
     dba:	1a c0       	rjmp	.+52     	; 0xdf0 <__vector_3+0x9a>
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	09 2e       	mov	r0, r25
     dc0:	00 0c       	add	r0, r0
     dc2:	aa 0b       	sbc	r26, r26
     dc4:	bb 0b       	sbc	r27, r27
     dc6:	bc 01       	movw	r22, r24
     dc8:	55 27       	eor	r21, r21
     dca:	44 27       	eor	r20, r20
     dcc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dd0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	84 2b       	or	r24, r20
     dda:	95 2b       	or	r25, r21
     ddc:	a6 2b       	or	r26, r22
     dde:	b7 2b       	or	r27, r23
     de0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     de4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     de8:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     dec:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     df0:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x4>
     df4:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x5>
     df8:	30 97       	sbiw	r30, 0x00	; 0
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__vector_3+0xb4>
     dfc:	62 e0       	ldi	r22, 0x02	; 2
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x4>
     e04:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x5>
     e08:	09 95       	icall
     e0a:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
     e0e:	ff 91       	pop	r31
     e10:	ef 91       	pop	r30
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_4>:
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
     e5e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
     e62:	ac 01       	movw	r20, r24
     e64:	09 2e       	mov	r0, r25
     e66:	00 0c       	add	r0, r0
     e68:	66 0b       	sbc	r22, r22
     e6a:	77 0b       	sbc	r23, r23
     e6c:	9a 01       	movw	r18, r20
     e6e:	11 27       	eor	r17, r17
     e70:	00 27       	eor	r16, r16
     e72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	40 2b       	or	r20, r16
     e80:	51 2b       	or	r21, r17
     e82:	62 2b       	or	r22, r18
     e84:	73 2b       	or	r23, r19
     e86:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
     e8a:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
     e8e:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
     e92:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
     e96:	b0 9b       	sbis	0x16, 0	; 22
     e98:	1a c0       	rjmp	.+52     	; 0xece <__vector_4+0x9a>
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	09 2e       	mov	r0, r25
     e9e:	00 0c       	add	r0, r0
     ea0:	aa 0b       	sbc	r26, r26
     ea2:	bb 0b       	sbc	r27, r27
     ea4:	bc 01       	movw	r22, r24
     ea6:	55 27       	eor	r21, r21
     ea8:	44 27       	eor	r20, r20
     eaa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	84 2b       	or	r24, r20
     eb8:	95 2b       	or	r25, r21
     eba:	a6 2b       	or	r26, r22
     ebc:	b7 2b       	or	r27, r23
     ebe:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     ec2:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     ec6:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     eca:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     ece:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x6>
     ed2:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x7>
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	39 f0       	breq	.+14     	; 0xee8 <__vector_4+0xb4>
     eda:	63 e0       	ldi	r22, 0x03	; 3
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x6>
     ee2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x7>
     ee6:	09 95       	icall
     ee8:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	bf 91       	pop	r27
     ef2:	af 91       	pop	r26
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	7f 91       	pop	r23
     efa:	6f 91       	pop	r22
     efc:	5f 91       	pop	r21
     efe:	4f 91       	pop	r20
     f00:	3f 91       	pop	r19
     f02:	2f 91       	pop	r18
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_5>:
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
     f3c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
     f40:	ac 01       	movw	r20, r24
     f42:	09 2e       	mov	r0, r25
     f44:	00 0c       	add	r0, r0
     f46:	66 0b       	sbc	r22, r22
     f48:	77 0b       	sbc	r23, r23
     f4a:	9a 01       	movw	r18, r20
     f4c:	11 27       	eor	r17, r17
     f4e:	00 27       	eor	r16, r16
     f50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	40 2b       	or	r20, r16
     f5e:	51 2b       	or	r21, r17
     f60:	62 2b       	or	r22, r18
     f62:	73 2b       	or	r23, r19
     f64:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
     f68:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
     f6c:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
     f70:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
     f74:	b0 9b       	sbis	0x16, 0	; 22
     f76:	1a c0       	rjmp	.+52     	; 0xfac <__vector_5+0x9a>
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	09 2e       	mov	r0, r25
     f7c:	00 0c       	add	r0, r0
     f7e:	aa 0b       	sbc	r26, r26
     f80:	bb 0b       	sbc	r27, r27
     f82:	bc 01       	movw	r22, r24
     f84:	55 27       	eor	r21, r21
     f86:	44 27       	eor	r20, r20
     f88:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f8c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	84 2b       	or	r24, r20
     f96:	95 2b       	or	r25, r21
     f98:	a6 2b       	or	r26, r22
     f9a:	b7 2b       	or	r27, r23
     f9c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     fa0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     fa4:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     fa8:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     fac:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x8>
     fb0:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x9>
     fb4:	30 97       	sbiw	r30, 0x00	; 0
     fb6:	39 f0       	breq	.+14     	; 0xfc6 <__vector_5+0xb4>
     fb8:	64 e0       	ldi	r22, 0x04	; 4
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x8>
     fc0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x9>
     fc4:	09 95       	icall
     fc6:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_10>:
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    101a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    101e:	ac 01       	movw	r20, r24
    1020:	09 2e       	mov	r0, r25
    1022:	00 0c       	add	r0, r0
    1024:	66 0b       	sbc	r22, r22
    1026:	77 0b       	sbc	r23, r23
    1028:	9a 01       	movw	r18, r20
    102a:	11 27       	eor	r17, r17
    102c:	00 27       	eor	r16, r16
    102e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1032:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	40 2b       	or	r20, r16
    103c:	51 2b       	or	r21, r17
    103e:	62 2b       	or	r22, r18
    1040:	73 2b       	or	r23, r19
    1042:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1046:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    104a:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    104e:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1052:	b0 9b       	sbis	0x16, 0	; 22
    1054:	1a c0       	rjmp	.+52     	; 0x108a <__vector_10+0x9a>
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	09 2e       	mov	r0, r25
    105a:	00 0c       	add	r0, r0
    105c:	aa 0b       	sbc	r26, r26
    105e:	bb 0b       	sbc	r27, r27
    1060:	bc 01       	movw	r22, r24
    1062:	55 27       	eor	r21, r21
    1064:	44 27       	eor	r20, r20
    1066:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    106a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	84 2b       	or	r24, r20
    1074:	95 2b       	or	r25, r21
    1076:	a6 2b       	or	r26, r22
    1078:	b7 2b       	or	r27, r23
    107a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    107e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1082:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1086:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    108a:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xa>
    108e:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xb>
    1092:	30 97       	sbiw	r30, 0x00	; 0
    1094:	39 f0       	breq	.+14     	; 0x10a4 <__vector_10+0xb4>
    1096:	65 e0       	ldi	r22, 0x05	; 5
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xa>
    109e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xb>
    10a2:	09 95       	icall
    10a4:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_11>:
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    10f8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    10fc:	ac 01       	movw	r20, r24
    10fe:	09 2e       	mov	r0, r25
    1100:	00 0c       	add	r0, r0
    1102:	66 0b       	sbc	r22, r22
    1104:	77 0b       	sbc	r23, r23
    1106:	9a 01       	movw	r18, r20
    1108:	11 27       	eor	r17, r17
    110a:	00 27       	eor	r16, r16
    110c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1110:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	40 2b       	or	r20, r16
    111a:	51 2b       	or	r21, r17
    111c:	62 2b       	or	r22, r18
    111e:	73 2b       	or	r23, r19
    1120:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1124:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    1128:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    112c:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1130:	b0 9b       	sbis	0x16, 0	; 22
    1132:	1a c0       	rjmp	.+52     	; 0x1168 <__vector_11+0x9a>
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	09 2e       	mov	r0, r25
    1138:	00 0c       	add	r0, r0
    113a:	aa 0b       	sbc	r26, r26
    113c:	bb 0b       	sbc	r27, r27
    113e:	bc 01       	movw	r22, r24
    1140:	55 27       	eor	r21, r21
    1142:	44 27       	eor	r20, r20
    1144:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1148:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	84 2b       	or	r24, r20
    1152:	95 2b       	or	r25, r21
    1154:	a6 2b       	or	r26, r22
    1156:	b7 2b       	or	r27, r23
    1158:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    115c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1160:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1164:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1168:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0xc>
    116c:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0xd>
    1170:	30 97       	sbiw	r30, 0x00	; 0
    1172:	39 f0       	breq	.+14     	; 0x1182 <__vector_11+0xb4>
    1174:	66 e0       	ldi	r22, 0x06	; 6
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0xc>
    117c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0xd>
    1180:	09 95       	icall
    1182:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_12>:
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    11d6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    11da:	ac 01       	movw	r20, r24
    11dc:	09 2e       	mov	r0, r25
    11de:	00 0c       	add	r0, r0
    11e0:	66 0b       	sbc	r22, r22
    11e2:	77 0b       	sbc	r23, r23
    11e4:	9a 01       	movw	r18, r20
    11e6:	11 27       	eor	r17, r17
    11e8:	00 27       	eor	r16, r16
    11ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	40 2b       	or	r20, r16
    11f8:	51 2b       	or	r21, r17
    11fa:	62 2b       	or	r22, r18
    11fc:	73 2b       	or	r23, r19
    11fe:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1202:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    1206:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    120a:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    120e:	b0 9b       	sbis	0x16, 0	; 22
    1210:	1a c0       	rjmp	.+52     	; 0x1246 <__vector_12+0x9a>
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	09 2e       	mov	r0, r25
    1216:	00 0c       	add	r0, r0
    1218:	aa 0b       	sbc	r26, r26
    121a:	bb 0b       	sbc	r27, r27
    121c:	bc 01       	movw	r22, r24
    121e:	55 27       	eor	r21, r21
    1220:	44 27       	eor	r20, r20
    1222:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1226:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	84 2b       	or	r24, r20
    1230:	95 2b       	or	r25, r21
    1232:	a6 2b       	or	r26, r22
    1234:	b7 2b       	or	r27, r23
    1236:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    123a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    123e:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1242:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1246:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0xe>
    124a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0xf>
    124e:	30 97       	sbiw	r30, 0x00	; 0
    1250:	39 f0       	breq	.+14     	; 0x1260 <__vector_12+0xb4>
    1252:	67 e0       	ldi	r22, 0x07	; 7
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xe>
    125a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xf>
    125e:	09 95       	icall
    1260:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_13>:
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    12b4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    12b8:	ac 01       	movw	r20, r24
    12ba:	09 2e       	mov	r0, r25
    12bc:	00 0c       	add	r0, r0
    12be:	66 0b       	sbc	r22, r22
    12c0:	77 0b       	sbc	r23, r23
    12c2:	9a 01       	movw	r18, r20
    12c4:	11 27       	eor	r17, r17
    12c6:	00 27       	eor	r16, r16
    12c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	40 2b       	or	r20, r16
    12d6:	51 2b       	or	r21, r17
    12d8:	62 2b       	or	r22, r18
    12da:	73 2b       	or	r23, r19
    12dc:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    12e0:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    12e4:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    12e8:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    12ec:	b0 9b       	sbis	0x16, 0	; 22
    12ee:	1a c0       	rjmp	.+52     	; 0x1324 <__vector_13+0x9a>
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	09 2e       	mov	r0, r25
    12f4:	00 0c       	add	r0, r0
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	bb 0b       	sbc	r27, r27
    12fa:	bc 01       	movw	r22, r24
    12fc:	55 27       	eor	r21, r21
    12fe:	44 27       	eor	r20, r20
    1300:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1304:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	84 2b       	or	r24, r20
    130e:	95 2b       	or	r25, r21
    1310:	a6 2b       	or	r26, r22
    1312:	b7 2b       	or	r27, r23
    1314:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1318:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    131c:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1320:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1324:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x10>
    1328:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x11>
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	39 f0       	breq	.+14     	; 0x133e <__vector_13+0xb4>
    1330:	68 e0       	ldi	r22, 0x08	; 8
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x10>
    1338:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x11>
    133c:	09 95       	icall
    133e:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_14>:
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    1392:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1396:	ac 01       	movw	r20, r24
    1398:	09 2e       	mov	r0, r25
    139a:	00 0c       	add	r0, r0
    139c:	66 0b       	sbc	r22, r22
    139e:	77 0b       	sbc	r23, r23
    13a0:	9a 01       	movw	r18, r20
    13a2:	11 27       	eor	r17, r17
    13a4:	00 27       	eor	r16, r16
    13a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	40 2b       	or	r20, r16
    13b4:	51 2b       	or	r21, r17
    13b6:	62 2b       	or	r22, r18
    13b8:	73 2b       	or	r23, r19
    13ba:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    13be:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    13c2:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    13c6:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    13ca:	b0 9b       	sbis	0x16, 0	; 22
    13cc:	1a c0       	rjmp	.+52     	; 0x1402 <__vector_14+0x9a>
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	09 2e       	mov	r0, r25
    13d2:	00 0c       	add	r0, r0
    13d4:	aa 0b       	sbc	r26, r26
    13d6:	bb 0b       	sbc	r27, r27
    13d8:	bc 01       	movw	r22, r24
    13da:	55 27       	eor	r21, r21
    13dc:	44 27       	eor	r20, r20
    13de:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	84 2b       	or	r24, r20
    13ec:	95 2b       	or	r25, r21
    13ee:	a6 2b       	or	r26, r22
    13f0:	b7 2b       	or	r27, r23
    13f2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    13f6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    13fa:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    13fe:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1402:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x12>
    1406:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x13>
    140a:	30 97       	sbiw	r30, 0x00	; 0
    140c:	39 f0       	breq	.+14     	; 0x141c <__vector_14+0xb4>
    140e:	69 e0       	ldi	r22, 0x09	; 9
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x12>
    1416:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x13>
    141a:	09 95       	icall
    141c:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1420:	ff 91       	pop	r31
    1422:	ef 91       	pop	r30
    1424:	bf 91       	pop	r27
    1426:	af 91       	pop	r26
    1428:	9f 91       	pop	r25
    142a:	8f 91       	pop	r24
    142c:	7f 91       	pop	r23
    142e:	6f 91       	pop	r22
    1430:	5f 91       	pop	r21
    1432:	4f 91       	pop	r20
    1434:	3f 91       	pop	r19
    1436:	2f 91       	pop	r18
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_15>:
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
    146c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    1470:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1474:	ac 01       	movw	r20, r24
    1476:	09 2e       	mov	r0, r25
    1478:	00 0c       	add	r0, r0
    147a:	66 0b       	sbc	r22, r22
    147c:	77 0b       	sbc	r23, r23
    147e:	9a 01       	movw	r18, r20
    1480:	11 27       	eor	r17, r17
    1482:	00 27       	eor	r16, r16
    1484:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1488:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	40 2b       	or	r20, r16
    1492:	51 2b       	or	r21, r17
    1494:	62 2b       	or	r22, r18
    1496:	73 2b       	or	r23, r19
    1498:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    149c:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    14a0:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    14a4:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    14a8:	b0 9b       	sbis	0x16, 0	; 22
    14aa:	1a c0       	rjmp	.+52     	; 0x14e0 <__vector_15+0x9a>
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	09 2e       	mov	r0, r25
    14b0:	00 0c       	add	r0, r0
    14b2:	aa 0b       	sbc	r26, r26
    14b4:	bb 0b       	sbc	r27, r27
    14b6:	bc 01       	movw	r22, r24
    14b8:	55 27       	eor	r21, r21
    14ba:	44 27       	eor	r20, r20
    14bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	84 2b       	or	r24, r20
    14ca:	95 2b       	or	r25, r21
    14cc:	a6 2b       	or	r26, r22
    14ce:	b7 2b       	or	r27, r23
    14d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    14d4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    14d8:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    14dc:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    14e0:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x14>
    14e4:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x15>
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	39 f0       	breq	.+14     	; 0x14fa <__vector_15+0xb4>
    14ec:	6a e0       	ldi	r22, 0x0A	; 10
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x14>
    14f4:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x15>
    14f8:	09 95       	icall
    14fa:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_16>:
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
    154a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    154e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1552:	ac 01       	movw	r20, r24
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	66 0b       	sbc	r22, r22
    155a:	77 0b       	sbc	r23, r23
    155c:	9a 01       	movw	r18, r20
    155e:	11 27       	eor	r17, r17
    1560:	00 27       	eor	r16, r16
    1562:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1566:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	40 2b       	or	r20, r16
    1570:	51 2b       	or	r21, r17
    1572:	62 2b       	or	r22, r18
    1574:	73 2b       	or	r23, r19
    1576:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    157a:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    157e:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    1582:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1586:	b0 9b       	sbis	0x16, 0	; 22
    1588:	1a c0       	rjmp	.+52     	; 0x15be <__vector_16+0x9a>
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	09 2e       	mov	r0, r25
    158e:	00 0c       	add	r0, r0
    1590:	aa 0b       	sbc	r26, r26
    1592:	bb 0b       	sbc	r27, r27
    1594:	bc 01       	movw	r22, r24
    1596:	55 27       	eor	r21, r21
    1598:	44 27       	eor	r20, r20
    159a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    159e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	84 2b       	or	r24, r20
    15a8:	95 2b       	or	r25, r21
    15aa:	a6 2b       	or	r26, r22
    15ac:	b7 2b       	or	r27, r23
    15ae:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    15b2:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    15b6:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    15ba:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    15be:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x16>
    15c2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x17>
    15c6:	30 97       	sbiw	r30, 0x00	; 0
    15c8:	39 f0       	breq	.+14     	; 0x15d8 <__vector_16+0xb4>
    15ca:	6b e0       	ldi	r22, 0x0B	; 11
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x16>
    15d2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x17>
    15d6:	09 95       	icall
    15d8:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    15dc:	ff 91       	pop	r31
    15de:	ef 91       	pop	r30
    15e0:	bf 91       	pop	r27
    15e2:	af 91       	pop	r26
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	7f 91       	pop	r23
    15ea:	6f 91       	pop	r22
    15ec:	5f 91       	pop	r21
    15ee:	4f 91       	pop	r20
    15f0:	3f 91       	pop	r19
    15f2:	2f 91       	pop	r18
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	0f 90       	pop	r0
    15fe:	1f 90       	pop	r1
    1600:	18 95       	reti

00001602 <__vector_17>:
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	4f 93       	push	r20
    1616:	5f 93       	push	r21
    1618:	6f 93       	push	r22
    161a:	7f 93       	push	r23
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
    1628:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    162c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1630:	ac 01       	movw	r20, r24
    1632:	09 2e       	mov	r0, r25
    1634:	00 0c       	add	r0, r0
    1636:	66 0b       	sbc	r22, r22
    1638:	77 0b       	sbc	r23, r23
    163a:	9a 01       	movw	r18, r20
    163c:	11 27       	eor	r17, r17
    163e:	00 27       	eor	r16, r16
    1640:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1644:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	40 2b       	or	r20, r16
    164e:	51 2b       	or	r21, r17
    1650:	62 2b       	or	r22, r18
    1652:	73 2b       	or	r23, r19
    1654:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1658:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    165c:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    1660:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1664:	b0 9b       	sbis	0x16, 0	; 22
    1666:	1a c0       	rjmp	.+52     	; 0x169c <__vector_17+0x9a>
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	09 2e       	mov	r0, r25
    166c:	00 0c       	add	r0, r0
    166e:	aa 0b       	sbc	r26, r26
    1670:	bb 0b       	sbc	r27, r27
    1672:	bc 01       	movw	r22, r24
    1674:	55 27       	eor	r21, r21
    1676:	44 27       	eor	r20, r20
    1678:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    167c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	84 2b       	or	r24, r20
    1686:	95 2b       	or	r25, r21
    1688:	a6 2b       	or	r26, r22
    168a:	b7 2b       	or	r27, r23
    168c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1690:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1694:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1698:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    169c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x18>
    16a0:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x19>
    16a4:	30 97       	sbiw	r30, 0x00	; 0
    16a6:	39 f0       	breq	.+14     	; 0x16b6 <__vector_17+0xb4>
    16a8:	6c e0       	ldi	r22, 0x0C	; 12
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x18>
    16b0:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x19>
    16b4:	09 95       	icall
    16b6:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_18>:
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    170a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    170e:	ac 01       	movw	r20, r24
    1710:	09 2e       	mov	r0, r25
    1712:	00 0c       	add	r0, r0
    1714:	66 0b       	sbc	r22, r22
    1716:	77 0b       	sbc	r23, r23
    1718:	9a 01       	movw	r18, r20
    171a:	11 27       	eor	r17, r17
    171c:	00 27       	eor	r16, r16
    171e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1722:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	40 2b       	or	r20, r16
    172c:	51 2b       	or	r21, r17
    172e:	62 2b       	or	r22, r18
    1730:	73 2b       	or	r23, r19
    1732:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1736:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    173a:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    173e:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1742:	b0 9b       	sbis	0x16, 0	; 22
    1744:	1a c0       	rjmp	.+52     	; 0x177a <__vector_18+0x9a>
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	09 2e       	mov	r0, r25
    174a:	00 0c       	add	r0, r0
    174c:	aa 0b       	sbc	r26, r26
    174e:	bb 0b       	sbc	r27, r27
    1750:	bc 01       	movw	r22, r24
    1752:	55 27       	eor	r21, r21
    1754:	44 27       	eor	r20, r20
    1756:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175e:	a0 e0       	ldi	r26, 0x00	; 0
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	84 2b       	or	r24, r20
    1764:	95 2b       	or	r25, r21
    1766:	a6 2b       	or	r26, r22
    1768:	b7 2b       	or	r27, r23
    176a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    176e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1772:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1776:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    177a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1a>
    177e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1b>
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	39 f0       	breq	.+14     	; 0x1794 <__vector_18+0xb4>
    1786:	6d e0       	ldi	r22, 0x0D	; 13
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1a>
    178e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1b>
    1792:	09 95       	icall
    1794:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	0f 90       	pop	r0
    17ba:	1f 90       	pop	r1
    17bc:	18 95       	reti

000017be <__vector_19>:
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    17e8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    17ec:	ac 01       	movw	r20, r24
    17ee:	09 2e       	mov	r0, r25
    17f0:	00 0c       	add	r0, r0
    17f2:	66 0b       	sbc	r22, r22
    17f4:	77 0b       	sbc	r23, r23
    17f6:	9a 01       	movw	r18, r20
    17f8:	11 27       	eor	r17, r17
    17fa:	00 27       	eor	r16, r16
    17fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1800:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	40 2b       	or	r20, r16
    180a:	51 2b       	or	r21, r17
    180c:	62 2b       	or	r22, r18
    180e:	73 2b       	or	r23, r19
    1810:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1814:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    1818:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    181c:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1820:	b0 9b       	sbis	0x16, 0	; 22
    1822:	1a c0       	rjmp	.+52     	; 0x1858 <__vector_19+0x9a>
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	09 2e       	mov	r0, r25
    1828:	00 0c       	add	r0, r0
    182a:	aa 0b       	sbc	r26, r26
    182c:	bb 0b       	sbc	r27, r27
    182e:	bc 01       	movw	r22, r24
    1830:	55 27       	eor	r21, r21
    1832:	44 27       	eor	r20, r20
    1834:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1838:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	84 2b       	or	r24, r20
    1842:	95 2b       	or	r25, r21
    1844:	a6 2b       	or	r26, r22
    1846:	b7 2b       	or	r27, r23
    1848:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    184c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1850:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1854:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1858:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x1c>
    185c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x1d>
    1860:	30 97       	sbiw	r30, 0x00	; 0
    1862:	39 f0       	breq	.+14     	; 0x1872 <__vector_19+0xb4>
    1864:	6e e0       	ldi	r22, 0x0E	; 14
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x1c>
    186c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x1d>
    1870:	09 95       	icall
    1872:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <__vector_20>:
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
    18c2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    18c6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    18ca:	ac 01       	movw	r20, r24
    18cc:	09 2e       	mov	r0, r25
    18ce:	00 0c       	add	r0, r0
    18d0:	66 0b       	sbc	r22, r22
    18d2:	77 0b       	sbc	r23, r23
    18d4:	9a 01       	movw	r18, r20
    18d6:	11 27       	eor	r17, r17
    18d8:	00 27       	eor	r16, r16
    18da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	40 2b       	or	r20, r16
    18e8:	51 2b       	or	r21, r17
    18ea:	62 2b       	or	r22, r18
    18ec:	73 2b       	or	r23, r19
    18ee:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    18f2:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    18f6:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    18fa:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    18fe:	b0 9b       	sbis	0x16, 0	; 22
    1900:	1a c0       	rjmp	.+52     	; 0x1936 <__vector_20+0x9a>
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	09 2e       	mov	r0, r25
    1906:	00 0c       	add	r0, r0
    1908:	aa 0b       	sbc	r26, r26
    190a:	bb 0b       	sbc	r27, r27
    190c:	bc 01       	movw	r22, r24
    190e:	55 27       	eor	r21, r21
    1910:	44 27       	eor	r20, r20
    1912:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1916:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    191a:	a0 e0       	ldi	r26, 0x00	; 0
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	84 2b       	or	r24, r20
    1920:	95 2b       	or	r25, r21
    1922:	a6 2b       	or	r26, r22
    1924:	b7 2b       	or	r27, r23
    1926:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    192a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    192e:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1932:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1936:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x1e>
    193a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x1f>
    193e:	30 97       	sbiw	r30, 0x00	; 0
    1940:	39 f0       	breq	.+14     	; 0x1950 <__vector_20+0xb4>
    1942:	6f e0       	ldi	r22, 0x0F	; 15
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1e>
    194a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1f>
    194e:	09 95       	icall
    1950:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <__vector_21>:
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    19a4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    19a8:	ac 01       	movw	r20, r24
    19aa:	09 2e       	mov	r0, r25
    19ac:	00 0c       	add	r0, r0
    19ae:	66 0b       	sbc	r22, r22
    19b0:	77 0b       	sbc	r23, r23
    19b2:	9a 01       	movw	r18, r20
    19b4:	11 27       	eor	r17, r17
    19b6:	00 27       	eor	r16, r16
    19b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	40 2b       	or	r20, r16
    19c6:	51 2b       	or	r21, r17
    19c8:	62 2b       	or	r22, r18
    19ca:	73 2b       	or	r23, r19
    19cc:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    19d0:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    19d4:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    19d8:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    19dc:	b0 9b       	sbis	0x16, 0	; 22
    19de:	1a c0       	rjmp	.+52     	; 0x1a14 <__vector_21+0x9a>
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	09 2e       	mov	r0, r25
    19e4:	00 0c       	add	r0, r0
    19e6:	aa 0b       	sbc	r26, r26
    19e8:	bb 0b       	sbc	r27, r27
    19ea:	bc 01       	movw	r22, r24
    19ec:	55 27       	eor	r21, r21
    19ee:	44 27       	eor	r20, r20
    19f0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f8:	a0 e0       	ldi	r26, 0x00	; 0
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	84 2b       	or	r24, r20
    19fe:	95 2b       	or	r25, r21
    1a00:	a6 2b       	or	r26, r22
    1a02:	b7 2b       	or	r27, r23
    1a04:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1a08:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1a0c:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1a10:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1a14:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x20>
    1a18:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x21>
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <__vector_21+0xb4>
    1a20:	60 e1       	ldi	r22, 0x10	; 16
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x20>
    1a28:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x21>
    1a2c:	09 95       	icall
    1a2e:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1a32:	ff 91       	pop	r31
    1a34:	ef 91       	pop	r30
    1a36:	bf 91       	pop	r27
    1a38:	af 91       	pop	r26
    1a3a:	9f 91       	pop	r25
    1a3c:	8f 91       	pop	r24
    1a3e:	7f 91       	pop	r23
    1a40:	6f 91       	pop	r22
    1a42:	5f 91       	pop	r21
    1a44:	4f 91       	pop	r20
    1a46:	3f 91       	pop	r19
    1a48:	2f 91       	pop	r18
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	0f 90       	pop	r0
    1a54:	1f 90       	pop	r1
    1a56:	18 95       	reti

00001a58 <__vector_22>:
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
    1a7e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    1a82:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1a86:	ac 01       	movw	r20, r24
    1a88:	09 2e       	mov	r0, r25
    1a8a:	00 0c       	add	r0, r0
    1a8c:	66 0b       	sbc	r22, r22
    1a8e:	77 0b       	sbc	r23, r23
    1a90:	9a 01       	movw	r18, r20
    1a92:	11 27       	eor	r17, r17
    1a94:	00 27       	eor	r16, r16
    1a96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	40 2b       	or	r20, r16
    1aa4:	51 2b       	or	r21, r17
    1aa6:	62 2b       	or	r22, r18
    1aa8:	73 2b       	or	r23, r19
    1aaa:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <timestamp>
    1aae:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <timestamp+0x1>
    1ab2:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timestamp+0x2>
    1ab6:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timestamp+0x3>
    1aba:	b0 9b       	sbis	0x16, 0	; 22
    1abc:	1a c0       	rjmp	.+52     	; 0x1af2 <__vector_22+0x9a>
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	09 2e       	mov	r0, r25
    1ac2:	00 0c       	add	r0, r0
    1ac4:	aa 0b       	sbc	r26, r26
    1ac6:	bb 0b       	sbc	r27, r27
    1ac8:	bc 01       	movw	r22, r24
    1aca:	55 27       	eor	r21, r21
    1acc:	44 27       	eor	r20, r20
    1ace:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ad2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ad6:	a0 e0       	ldi	r26, 0x00	; 0
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	84 2b       	or	r24, r20
    1adc:	95 2b       	or	r25, r21
    1ade:	a6 2b       	or	r26, r22
    1ae0:	b7 2b       	or	r27, r23
    1ae2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1ae6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1aea:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1aee:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1af2:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x22>
    1af6:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x23>
    1afa:	30 97       	sbiw	r30, 0x00	; 0
    1afc:	39 f0       	breq	.+14     	; 0x1b0c <__vector_22+0xb4>
    1afe:	61 e1       	ldi	r22, 0x11	; 17
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x22>
    1b06:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x23>
    1b0a:	09 95       	icall
    1b0c:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <idle>:
    1b36:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1b3a:	78 94       	sei
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	83 bf       	out	0x33, r24	; 51
    1b40:	88 95       	sleep
    1b42:	fc cf       	rjmp	.-8      	; 0x1b3c <idle+0x6>

00001b44 <__vector_9>:
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	2f 93       	push	r18
    1b50:	3f 93       	push	r19
    1b52:	4f 93       	push	r20
    1b54:	5f 93       	push	r21
    1b56:	6f 93       	push	r22
    1b58:	7f 93       	push	r23
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    1b66:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <overflows+0x1>
    1b70:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <overflows>
    1b74:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    1b78:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	01 f1       	breq	.+64     	; 0x1bc0 <__vector_9+0x7c>
    1b80:	42 81       	ldd	r20, Z+2	; 0x02
    1b82:	53 81       	ldd	r21, Z+3	; 0x03
    1b84:	64 81       	ldd	r22, Z+4	; 0x04
    1b86:	75 81       	ldd	r23, Z+5	; 0x05
    1b88:	86 17       	cp	r24, r22
    1b8a:	97 07       	cpc	r25, r23
    1b8c:	c9 f4       	brne	.+50     	; 0x1bc0 <__vector_9+0x7c>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b94:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b98:	42 1b       	sub	r20, r18
    1b9a:	53 0b       	sbc	r21, r19
    1b9c:	41 30       	cpi	r20, 0x01	; 1
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	29 f4       	brne	.+10     	; 0x1bac <__vector_9+0x68>
    1ba2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ba6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1bb0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1bb4:	ef e6       	ldi	r30, 0x6F	; 111
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	80 83       	st	Z, r24
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <__vector_9+0x86>
    1bc0:	ef e6       	ldi	r30, 0x6F	; 111
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8d 7f       	andi	r24, 0xFD	; 253
    1bc8:	80 83       	st	Z, r24
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	7f 91       	pop	r23
    1bd4:	6f 91       	pop	r22
    1bd6:	5f 91       	pop	r21
    1bd8:	4f 91       	pop	r20
    1bda:	3f 91       	pop	r19
    1bdc:	2f 91       	pop	r18
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	0f 90       	pop	r0
    1be4:	1f 90       	pop	r1
    1be6:	18 95       	reti

00001be8 <__vector_7>:
    1be8:	1f 92       	push	r1
    1bea:	0f 92       	push	r0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	0f 92       	push	r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	2f 93       	push	r18
    1bfc:	3f 93       	push	r19
    1bfe:	4f 93       	push	r20
    1c00:	5f 93       	push	r21
    1c02:	6f 93       	push	r22
    1c04:	7f 93       	push	r23
    1c06:	8f 93       	push	r24
    1c08:	9f 93       	push	r25
    1c0a:	af 93       	push	r26
    1c0c:	bf 93       	push	r27
    1c0e:	ef 93       	push	r30
    1c10:	ff 93       	push	r31
    1c12:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <overflows>
    1c16:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <overflows+0x1>
    1c1a:	6c 01       	movw	r12, r24
    1c1c:	09 2e       	mov	r0, r25
    1c1e:	00 0c       	add	r0, r0
    1c20:	ee 08       	sbc	r14, r14
    1c22:	ff 08       	sbc	r15, r15
    1c24:	76 01       	movw	r14, r12
    1c26:	dd 24       	eor	r13, r13
    1c28:	cc 24       	eor	r12, r12
    1c2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	c4 2a       	or	r12, r20
    1c38:	d5 2a       	or	r13, r21
    1c3a:	e6 2a       	or	r14, r22
    1c3c:	f7 2a       	or	r15, r23
    1c3e:	b0 9b       	sbis	0x16, 0	; 22
    1c40:	1e c0       	rjmp	.+60     	; 0x1c7e <__vector_7+0x96>
    1c42:	6c 01       	movw	r12, r24
    1c44:	2f ef       	ldi	r18, 0xFF	; 255
    1c46:	c2 1a       	sub	r12, r18
    1c48:	d2 0a       	sbc	r13, r18
    1c4a:	0d 2c       	mov	r0, r13
    1c4c:	00 0c       	add	r0, r0
    1c4e:	ee 08       	sbc	r14, r14
    1c50:	ff 08       	sbc	r15, r15
    1c52:	d6 01       	movw	r26, r12
    1c54:	99 27       	eor	r25, r25
    1c56:	88 27       	eor	r24, r24
    1c58:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c5c:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c60:	e1 2c       	mov	r14, r1
    1c62:	f1 2c       	mov	r15, r1
    1c64:	c8 2a       	or	r12, r24
    1c66:	d9 2a       	or	r13, r25
    1c68:	ea 2a       	or	r14, r26
    1c6a:	fb 2a       	or	r15, r27
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <__vector_7+0x96>
    1c6e:	86 e5       	ldi	r24, 0x56	; 86
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	0e 94 53 05 	call	0xaa6	; 0xaa6 <dequeue>
    1c76:	68 e5       	ldi	r22, 0x58	; 88
    1c78:	71 e0       	ldi	r23, 0x01	; 1
    1c7a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <enqueueByDeadline>
    1c7e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    1c82:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    1c86:	30 97       	sbiw	r30, 0x00	; 0
    1c88:	69 f0       	breq	.+26     	; 0x1ca4 <__vector_7+0xbc>
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c90:	b5 81       	ldd	r27, Z+5	; 0x05
    1c92:	8c 19       	sub	r24, r12
    1c94:	9d 09       	sbc	r25, r13
    1c96:	ae 09       	sbc	r26, r14
    1c98:	bf 09       	sbc	r27, r15
    1c9a:	18 16       	cp	r1, r24
    1c9c:	19 06       	cpc	r1, r25
    1c9e:	1a 06       	cpc	r1, r26
    1ca0:	1b 06       	cpc	r1, r27
    1ca2:	2c f7       	brge	.-54     	; 0x1c6e <__vector_7+0x86>
    1ca4:	30 97       	sbiw	r30, 0x00	; 0
    1ca6:	21 f1       	breq	.+72     	; 0x1cf0 <__vector_7+0x108>
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	a4 81       	ldd	r26, Z+4	; 0x04
    1cae:	b5 81       	ldd	r27, Z+5	; 0x05
    1cb0:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <overflows>
    1cb4:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <overflows+0x1>
    1cb8:	2a 17       	cp	r18, r26
    1cba:	3b 07       	cpc	r19, r27
    1cbc:	c9 f4       	brne	.+50     	; 0x1cf0 <__vector_7+0x108>
    1cbe:	9c 01       	movw	r18, r24
    1cc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cc8:	84 1b       	sub	r24, r20
    1cca:	95 0b       	sbc	r25, r21
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	31 f4       	brne	.+12     	; 0x1cdc <__vector_7+0xf4>
    1cd0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ce0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ce4:	ef e6       	ldi	r30, 0x6F	; 111
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	82 60       	ori	r24, 0x02	; 2
    1cec:	80 83       	st	Z, r24
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <__vector_7+0x112>
    1cf0:	ef e6       	ldi	r30, 0x6F	; 111
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8d 7f       	andi	r24, 0xFD	; 253
    1cf8:	80 83       	st	Z, r24
    1cfa:	0e 94 99 05 	call	0xb32	; 0xb32 <schedule>
    1cfe:	ff 91       	pop	r31
    1d00:	ef 91       	pop	r30
    1d02:	bf 91       	pop	r27
    1d04:	af 91       	pop	r26
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	0f 90       	pop	r0
    1d24:	1f 90       	pop	r1
    1d26:	18 95       	reti

00001d28 <async>:
    1d28:	3f 92       	push	r3
    1d2a:	4f 92       	push	r4
    1d2c:	5f 92       	push	r5
    1d2e:	6f 92       	push	r6
    1d30:	7f 92       	push	r7
    1d32:	8f 92       	push	r8
    1d34:	9f 92       	push	r9
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	2b 01       	movw	r4, r22
    1d4c:	3c 01       	movw	r6, r24
    1d4e:	49 01       	movw	r8, r18
    1d50:	5a 01       	movw	r10, r20
    1d52:	8f b7       	in	r24, 0x3f	; 63
    1d54:	80 78       	andi	r24, 0x80	; 128
    1d56:	38 2e       	mov	r3, r24
    1d58:	f8 94       	cli
    1d5a:	8c e3       	ldi	r24, 0x3C	; 60
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <dequeue>
    1d62:	ec 01       	movw	r28, r24
    1d64:	1b 87       	std	Y+11, r17	; 0x0b
    1d66:	0a 87       	std	Y+10, r16	; 0x0a
    1d68:	fd 86       	std	Y+13, r15	; 0x0d
    1d6a:	ec 86       	std	Y+12, r14	; 0x0c
    1d6c:	df 86       	std	Y+15, r13	; 0x0f
    1d6e:	ce 86       	std	Y+14, r12	; 0x0e
    1d70:	33 20       	and	r3, r3
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <async+0x64>
    1d74:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <current>
    1d78:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <current+0x1>
    1d7c:	02 80       	ldd	r0, Z+2	; 0x02
    1d7e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d80:	e0 2d       	mov	r30, r0
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	a4 81       	ldd	r26, Z+4	; 0x04
    1d88:	b5 81       	ldd	r27, Z+5	; 0x05
    1d8a:	08 c0       	rjmp	.+16     	; 0x1d9c <async+0x74>
    1d8c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <timestamp>
    1d90:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <timestamp+0x1>
    1d94:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <timestamp+0x2>
    1d98:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <timestamp+0x3>
    1d9c:	48 0e       	add	r4, r24
    1d9e:	59 1e       	adc	r5, r25
    1da0:	6a 1e       	adc	r6, r26
    1da2:	7b 1e       	adc	r7, r27
    1da4:	4a 82       	std	Y+2, r4	; 0x02
    1da6:	5b 82       	std	Y+3, r5	; 0x03
    1da8:	6c 82       	std	Y+4, r6	; 0x04
    1daa:	7d 82       	std	Y+5, r7	; 0x05
    1dac:	18 14       	cp	r1, r8
    1dae:	19 04       	cpc	r1, r9
    1db0:	1a 04       	cpc	r1, r10
    1db2:	1b 04       	cpc	r1, r11
    1db4:	44 f0       	brlt	.+16     	; 0x1dc6 <async+0x9e>
    1db6:	0f 2e       	mov	r0, r31
    1db8:	88 24       	eor	r8, r8
    1dba:	8a 94       	dec	r8
    1dbc:	98 2c       	mov	r9, r8
    1dbe:	a8 2c       	mov	r10, r8
    1dc0:	ff e7       	ldi	r31, 0x7F	; 127
    1dc2:	bf 2e       	mov	r11, r31
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	84 0c       	add	r8, r4
    1dc8:	95 1c       	adc	r9, r5
    1dca:	a6 1c       	adc	r10, r6
    1dcc:	b7 1c       	adc	r11, r7
    1dce:	8e 82       	std	Y+6, r8	; 0x06
    1dd0:	9f 82       	std	Y+7, r9	; 0x07
    1dd2:	a8 86       	std	Y+8, r10	; 0x08
    1dd4:	b9 86       	std	Y+9, r11	; 0x09
    1dd6:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <overflows>
    1dda:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <overflows+0x1>
    1dde:	c9 01       	movw	r24, r18
    1de0:	03 2e       	mov	r0, r19
    1de2:	00 0c       	add	r0, r0
    1de4:	aa 0b       	sbc	r26, r26
    1de6:	bb 0b       	sbc	r27, r27
    1de8:	dc 01       	movw	r26, r24
    1dea:	99 27       	eor	r25, r25
    1dec:	88 27       	eor	r24, r24
    1dee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1df2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	84 2b       	or	r24, r20
    1dfc:	95 2b       	or	r25, r21
    1dfe:	a6 2b       	or	r26, r22
    1e00:	b7 2b       	or	r27, r23
    1e02:	b0 9b       	sbis	0x16, 0	; 22
    1e04:	13 c0       	rjmp	.+38     	; 0x1e2c <async+0x104>
    1e06:	c9 01       	movw	r24, r18
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	09 2e       	mov	r0, r25
    1e0c:	00 0c       	add	r0, r0
    1e0e:	aa 0b       	sbc	r26, r26
    1e10:	bb 0b       	sbc	r27, r27
    1e12:	dc 01       	movw	r26, r24
    1e14:	99 27       	eor	r25, r25
    1e16:	88 27       	eor	r24, r24
    1e18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	84 2b       	or	r24, r20
    1e26:	95 2b       	or	r25, r21
    1e28:	a6 2b       	or	r26, r22
    1e2a:	b7 2b       	or	r27, r23
    1e2c:	48 1a       	sub	r4, r24
    1e2e:	59 0a       	sbc	r5, r25
    1e30:	6a 0a       	sbc	r6, r26
    1e32:	7b 0a       	sbc	r7, r27
    1e34:	14 14       	cp	r1, r4
    1e36:	15 04       	cpc	r1, r5
    1e38:	16 04       	cpc	r1, r6
    1e3a:	17 04       	cpc	r1, r7
    1e3c:	ac f5       	brge	.+106    	; 0x1ea8 <async+0x180>
    1e3e:	66 e5       	ldi	r22, 0x56	; 86
    1e40:	71 e0       	ldi	r23, 0x01	; 1
    1e42:	ce 01       	movw	r24, r28
    1e44:	0e 94 22 05 	call	0xa44	; 0xa44 <enqueueByBaseline>
    1e48:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    1e4c:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    1e50:	30 97       	sbiw	r30, 0x00	; 0
    1e52:	21 f1       	breq	.+72     	; 0x1e9c <async+0x174>
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	a4 81       	ldd	r26, Z+4	; 0x04
    1e5a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e5c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <overflows>
    1e60:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <overflows+0x1>
    1e64:	2a 17       	cp	r18, r26
    1e66:	3b 07       	cpc	r19, r27
    1e68:	c9 f4       	brne	.+50     	; 0x1e9c <async+0x174>
    1e6a:	9c 01       	movw	r18, r24
    1e6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e74:	84 1b       	sub	r24, r20
    1e76:	95 0b       	sbc	r25, r21
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <async+0x160>
    1e7c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e80:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e84:	2f 5f       	subi	r18, 0xFF	; 255
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e8c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e90:	ef e6       	ldi	r30, 0x6F	; 111
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	82 60       	ori	r24, 0x02	; 2
    1e98:	80 83       	st	Z, r24
    1e9a:	39 c0       	rjmp	.+114    	; 0x1f0e <async+0x1e6>
    1e9c:	ef e6       	ldi	r30, 0x6F	; 111
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8d 7f       	andi	r24, 0xFD	; 253
    1ea4:	80 83       	st	Z, r24
    1ea6:	33 c0       	rjmp	.+102    	; 0x1f0e <async+0x1e6>
    1ea8:	68 e5       	ldi	r22, 0x58	; 88
    1eaa:	71 e0       	ldi	r23, 0x01	; 1
    1eac:	ce 01       	movw	r24, r28
    1eae:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <enqueueByDeadline>
    1eb2:	33 20       	and	r3, r3
    1eb4:	61 f1       	breq	.+88     	; 0x1f0e <async+0x1e6>
    1eb6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <threadPool>
    1eba:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <threadPool+0x1>
    1ebe:	89 2b       	or	r24, r25
    1ec0:	31 f1       	breq	.+76     	; 0x1f0e <async+0x1e6>
    1ec2:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <msgQ>
    1ec6:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <msgQ+0x1>
    1eca:	86 81       	ldd	r24, Z+6	; 0x06
    1ecc:	97 81       	ldd	r25, Z+7	; 0x07
    1ece:	a0 85       	ldd	r26, Z+8	; 0x08
    1ed0:	b1 85       	ldd	r27, Z+9	; 0x09
    1ed2:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <activeStack>
    1ed6:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <activeStack+0x1>
    1eda:	02 80       	ldd	r0, Z+2	; 0x02
    1edc:	f3 81       	ldd	r31, Z+3	; 0x03
    1ede:	e0 2d       	mov	r30, r0
    1ee0:	46 81       	ldd	r20, Z+6	; 0x06
    1ee2:	57 81       	ldd	r21, Z+7	; 0x07
    1ee4:	60 85       	ldd	r22, Z+8	; 0x08
    1ee6:	71 85       	ldd	r23, Z+9	; 0x09
    1ee8:	84 1b       	sub	r24, r20
    1eea:	95 0b       	sbc	r25, r21
    1eec:	a6 0b       	sbc	r26, r22
    1eee:	b7 0b       	sbc	r27, r23
    1ef0:	72 f4       	brpl	.+28     	; 0x1f0e <async+0x1e6>
    1ef2:	8a e3       	ldi	r24, 0x3A	; 58
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <pop>
    1efa:	68 e3       	ldi	r22, 0x38	; 56
    1efc:	71 e0       	ldi	r23, 0x01	; 1
    1efe:	0e 94 85 05 	call	0xb0a	; 0xb0a <push>
    1f02:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <activeStack>
    1f06:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <activeStack+0x1>
    1f0a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <dispatch>
    1f0e:	33 20       	and	r3, r3
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <async+0x1ec>
    1f12:	78 94       	sei
    1f14:	ce 01       	movw	r24, r28
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	af 90       	pop	r10
    1f2a:	9f 90       	pop	r9
    1f2c:	8f 90       	pop	r8
    1f2e:	7f 90       	pop	r7
    1f30:	6f 90       	pop	r6
    1f32:	5f 90       	pop	r5
    1f34:	4f 90       	pop	r4
    1f36:	3f 90       	pop	r3
    1f38:	08 95       	ret

00001f3a <sync>:
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	7b 01       	movw	r14, r22
    1f4e:	6a 01       	movw	r12, r20
    1f50:	1f b7       	in	r17, 0x3f	; 63
    1f52:	10 78       	andi	r17, 0x80	; 128
    1f54:	f8 94       	cli
    1f56:	a8 81       	ld	r26, Y
    1f58:	b9 81       	ldd	r27, Y+1	; 0x01
    1f5a:	10 97       	sbiw	r26, 0x00	; 0
    1f5c:	19 f4       	brne	.+6      	; 0x1f64 <sync+0x2a>
    1f5e:	35 c0       	rjmp	.+106    	; 0x1fca <sync+0x90>
    1f60:	a0 81       	ld	r26, Z
    1f62:	b1 81       	ldd	r27, Z+1	; 0x01
    1f64:	14 96       	adiw	r26, 0x04	; 4
    1f66:	ed 91       	ld	r30, X+
    1f68:	fc 91       	ld	r31, X
    1f6a:	15 97       	sbiw	r26, 0x05	; 5
    1f6c:	30 97       	sbiw	r30, 0x00	; 0
    1f6e:	c1 f7       	brne	.-16     	; 0x1f60 <sync+0x26>
    1f70:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current>
    1f74:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <current+0x1>
    1f78:	a2 17       	cp	r26, r18
    1f7a:	b3 07       	cpc	r27, r19
    1f7c:	11 f0       	breq	.+4      	; 0x1f82 <sync+0x48>
    1f7e:	11 11       	cpse	r17, r1
    1f80:	07 c0       	rjmp	.+14     	; 0x1f90 <sync+0x56>
    1f82:	11 23       	and	r17, r17
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <sync+0x4e>
    1f86:	4a c0       	rjmp	.+148    	; 0x201c <sync+0xe2>
    1f88:	78 94       	sei
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	9f ef       	ldi	r25, 0xFF	; 255
    1f8e:	4e c0       	rjmp	.+156    	; 0x202c <sync+0xf2>
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <sync+0x64>
    1f98:	fc 01       	movw	r30, r24
    1f9a:	15 82       	std	Z+5, r1	; 0x05
    1f9c:	14 82       	std	Z+4, r1	; 0x04
    1f9e:	3b 83       	std	Y+3, r19	; 0x03
    1fa0:	2a 83       	std	Y+2, r18	; 0x02
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	d5 83       	std	Z+5, r29	; 0x05
    1fa6:	c4 83       	std	Z+4, r28	; 0x04
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <dispatch>
    1fae:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <current>
    1fb2:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <current+0x1>
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	89 2b       	or	r24, r25
    1fbc:	31 f4       	brne	.+12     	; 0x1fca <sync+0x90>
    1fbe:	11 23       	and	r17, r17
    1fc0:	81 f1       	breq	.+96     	; 0x2022 <sync+0xe8>
    1fc2:	78 94       	sei
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	31 c0       	rjmp	.+98     	; 0x202c <sync+0xf2>
    1fca:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current>
    1fce:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <current+0x1>
    1fd2:	99 83       	std	Y+1, r25	; 0x01
    1fd4:	88 83       	st	Y, r24
    1fd6:	11 23       	and	r17, r17
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <sync+0xaa>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <sync+0xaa>
    1fe2:	78 94       	sei
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	f7 01       	movw	r30, r14
    1fea:	09 95       	icall
    1fec:	f8 2e       	mov	r15, r24
    1fee:	09 2f       	mov	r16, r25
    1ff0:	8f b7       	in	r24, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	19 82       	std	Y+1, r1	; 0x01
    1ff6:	18 82       	st	Y, r1
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	91 05       	cpc	r25, r1
    2000:	38 f0       	brcs	.+14     	; 0x2010 <sync+0xd6>
    2002:	1b 82       	std	Y+3, r1	; 0x03
    2004:	1a 82       	std	Y+2, r1	; 0x02
    2006:	fc 01       	movw	r30, r24
    2008:	15 82       	std	Z+5, r1	; 0x05
    200a:	14 82       	std	Z+4, r1	; 0x04
    200c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <dispatch>
    2010:	11 23       	and	r17, r17
    2012:	51 f0       	breq	.+20     	; 0x2028 <sync+0xee>
    2014:	78 94       	sei
    2016:	8f 2d       	mov	r24, r15
    2018:	90 2f       	mov	r25, r16
    201a:	08 c0       	rjmp	.+16     	; 0x202c <sync+0xf2>
    201c:	8f ef       	ldi	r24, 0xFF	; 255
    201e:	9f ef       	ldi	r25, 0xFF	; 255
    2020:	05 c0       	rjmp	.+10     	; 0x202c <sync+0xf2>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 c0       	rjmp	.+4      	; 0x202c <sync+0xf2>
    2028:	8f 2d       	mov	r24, r15
    202a:	90 2f       	mov	r25, r16
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	08 95       	ret

0000203e <run>:
    203e:	00 91 36 01 	lds	r16, 0x0136	; 0x800136 <current>
    2042:	10 91 37 01 	lds	r17, 0x0137	; 0x800137 <current+0x1>
    2046:	88 e5       	ldi	r24, 0x58	; 88
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <dequeue>
    204e:	ec 01       	movw	r28, r24
    2050:	f8 01       	movw	r30, r16
    2052:	93 83       	std	Z+3, r25	; 0x03
    2054:	82 83       	std	Z+2, r24	; 0x02
    2056:	78 94       	sei
    2058:	6c 85       	ldd	r22, Y+12	; 0x0c
    205a:	7d 85       	ldd	r23, Y+13	; 0x0d
    205c:	4e 85       	ldd	r20, Y+14	; 0x0e
    205e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2060:	8a 85       	ldd	r24, Y+10	; 0x0a
    2062:	9b 85       	ldd	r25, Y+11	; 0x0b
    2064:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <sync>
    2068:	8f b7       	in	r24, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	6c e3       	ldi	r22, 0x3C	; 60
    206e:	71 e0       	ldi	r23, 0x01	; 1
    2070:	ce 01       	movw	r24, r28
    2072:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <insert>
    2076:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <activeStack>
    207a:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <activeStack+0x1>
    207e:	01 90       	ld	r0, Z+
    2080:	f0 81       	ld	r31, Z
    2082:	e0 2d       	mov	r30, r0
    2084:	c2 81       	ldd	r28, Z+2	; 0x02
    2086:	d3 81       	ldd	r29, Z+3	; 0x03
    2088:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <msgQ>
    208c:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <msgQ+0x1>
    2090:	30 97       	sbiw	r30, 0x00	; 0
    2092:	a1 f0       	breq	.+40     	; 0x20bc <run+0x7e>
    2094:	20 97       	sbiw	r28, 0x00	; 0
    2096:	99 f2       	breq	.-90     	; 0x203e <run>
    2098:	86 81       	ldd	r24, Z+6	; 0x06
    209a:	97 81       	ldd	r25, Z+7	; 0x07
    209c:	a0 85       	ldd	r26, Z+8	; 0x08
    209e:	b1 85       	ldd	r27, Z+9	; 0x09
    20a0:	4e 81       	ldd	r20, Y+6	; 0x06
    20a2:	5f 81       	ldd	r21, Y+7	; 0x07
    20a4:	68 85       	ldd	r22, Y+8	; 0x08
    20a6:	79 85       	ldd	r23, Y+9	; 0x09
    20a8:	84 1b       	sub	r24, r20
    20aa:	95 0b       	sbc	r25, r21
    20ac:	a6 0b       	sbc	r26, r22
    20ae:	b7 0b       	sbc	r27, r23
    20b0:	18 16       	cp	r1, r24
    20b2:	19 06       	cpc	r1, r25
    20b4:	1a 06       	cpc	r1, r26
    20b6:	1b 06       	cpc	r1, r27
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <run+0x7e>
    20ba:	c1 cf       	rjmp	.-126    	; 0x203e <run>
    20bc:	88 e3       	ldi	r24, 0x38	; 56
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <pop>
    20c4:	6a e3       	ldi	r22, 0x3A	; 58
    20c6:	71 e0       	ldi	r23, 0x01	; 1
    20c8:	0e 94 85 05 	call	0xb0a	; 0xb0a <push>
    20cc:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <activeStack>
    20d0:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <activeStack+0x1>
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <run+0x9c>
    20d6:	a0 81       	ld	r26, Z
    20d8:	b1 81       	ldd	r27, Z+1	; 0x01
    20da:	14 96       	adiw	r26, 0x04	; 4
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	15 97       	sbiw	r26, 0x05	; 5
    20e2:	30 97       	sbiw	r30, 0x00	; 0
    20e4:	c1 f7       	brne	.-16     	; 0x20d6 <run+0x98>
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <dispatch>
    20ec:	a8 cf       	rjmp	.-176    	; 0x203e <run>

000020ee <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    20ee:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    20f0:	42 31       	cpi	r20, 0x12	; 18
    20f2:	b8 f4       	brcc	.+46     	; 0x2122 <install+0x34>
        char status;
        DISABLE(status);
    20f4:	9f b7       	in	r25, 0x3f	; 63
    20f6:	90 78       	andi	r25, 0x80	; 128
    20f8:	f8 94       	cli
        otable[i] = obj;
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	44 0f       	add	r20, r20
    20fe:	55 1f       	adc	r21, r21
    2100:	da 01       	movw	r26, r20
    2102:	a6 5a       	subi	r26, 0xA6	; 166
    2104:	be 4f       	sbci	r27, 0xFE	; 254
    2106:	ed 93       	st	X+, r30
    2108:	fc 93       	st	X, r31
        mtable[i] = m;
    210a:	da 01       	movw	r26, r20
    210c:	ae 50       	subi	r26, 0x0E	; 14
    210e:	be 4f       	sbci	r27, 0xFE	; 254
    2110:	6d 93       	st	X+, r22
    2112:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2114:	21 e0       	ldi	r18, 0x01	; 1
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	33 83       	std	Z+3, r19	; 0x03
    211a:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    211c:	99 23       	and	r25, r25
    211e:	09 f0       	breq	.+2      	; 0x2122 <install+0x34>
    2120:	78 94       	sei
    2122:	08 95       	ret

00002124 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2124:	8c 01       	movw	r16, r24
    2126:	7b 01       	movw	r14, r22
    2128:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    212a:	8f b7       	in	r24, 0x3f	; 63
    212c:	f8 94       	cli
    initialize();
    212e:	0e 94 32 04 	call	0x864	; 0x864 <initialize>
    ENABLE(1);
    2132:	78 94       	sei
    if (m != NULL)
    2134:	e1 14       	cp	r14, r1
    2136:	f1 04       	cpc	r15, r1
    2138:	41 f0       	breq	.+16     	; 0x214a <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	a9 01       	movw	r20, r18
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	cb 01       	movw	r24, r22
    2146:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <async>
    DISABLE(status);
    214a:	8f b7       	in	r24, 0x3f	; 63
    214c:	f8 94       	cli
    idle();
    214e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <idle>

00002152 <__divmodhi4>:
    2152:	97 fb       	bst	r25, 7
    2154:	07 2e       	mov	r0, r23
    2156:	16 f4       	brtc	.+4      	; 0x215c <__divmodhi4+0xa>
    2158:	00 94       	com	r0
    215a:	07 d0       	rcall	.+14     	; 0x216a <__divmodhi4_neg1>
    215c:	77 fd       	sbrc	r23, 7
    215e:	09 d0       	rcall	.+18     	; 0x2172 <__divmodhi4_neg2>
    2160:	0e 94 c4 10 	call	0x2188	; 0x2188 <__udivmodhi4>
    2164:	07 fc       	sbrc	r0, 7
    2166:	05 d0       	rcall	.+10     	; 0x2172 <__divmodhi4_neg2>
    2168:	3e f4       	brtc	.+14     	; 0x2178 <__divmodhi4_exit>

0000216a <__divmodhi4_neg1>:
    216a:	90 95       	com	r25
    216c:	81 95       	neg	r24
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	08 95       	ret

00002172 <__divmodhi4_neg2>:
    2172:	70 95       	com	r23
    2174:	61 95       	neg	r22
    2176:	7f 4f       	sbci	r23, 0xFF	; 255

00002178 <__divmodhi4_exit>:
    2178:	08 95       	ret

0000217a <__usmulhisi3>:
    217a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>

0000217e <__usmulhisi3_tail>:
    217e:	b7 ff       	sbrs	r27, 7
    2180:	08 95       	ret
    2182:	82 1b       	sub	r24, r18
    2184:	93 0b       	sbc	r25, r19
    2186:	08 95       	ret

00002188 <__udivmodhi4>:
    2188:	aa 1b       	sub	r26, r26
    218a:	bb 1b       	sub	r27, r27
    218c:	51 e1       	ldi	r21, 0x11	; 17
    218e:	07 c0       	rjmp	.+14     	; 0x219e <__udivmodhi4_ep>

00002190 <__udivmodhi4_loop>:
    2190:	aa 1f       	adc	r26, r26
    2192:	bb 1f       	adc	r27, r27
    2194:	a6 17       	cp	r26, r22
    2196:	b7 07       	cpc	r27, r23
    2198:	10 f0       	brcs	.+4      	; 0x219e <__udivmodhi4_ep>
    219a:	a6 1b       	sub	r26, r22
    219c:	b7 0b       	sbc	r27, r23

0000219e <__udivmodhi4_ep>:
    219e:	88 1f       	adc	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	5a 95       	dec	r21
    21a4:	a9 f7       	brne	.-22     	; 0x2190 <__udivmodhi4_loop>
    21a6:	80 95       	com	r24
    21a8:	90 95       	com	r25
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	08 95       	ret

000021b0 <__umulhisi3>:
    21b0:	a2 9f       	mul	r26, r18
    21b2:	b0 01       	movw	r22, r0
    21b4:	b3 9f       	mul	r27, r19
    21b6:	c0 01       	movw	r24, r0
    21b8:	a3 9f       	mul	r26, r19
    21ba:	70 0d       	add	r23, r0
    21bc:	81 1d       	adc	r24, r1
    21be:	11 24       	eor	r1, r1
    21c0:	91 1d       	adc	r25, r1
    21c2:	b2 9f       	mul	r27, r18
    21c4:	70 0d       	add	r23, r0
    21c6:	81 1d       	adc	r24, r1
    21c8:	11 24       	eor	r1, r1
    21ca:	91 1d       	adc	r25, r1
    21cc:	08 95       	ret

000021ce <setjmp>:
    21ce:	dc 01       	movw	r26, r24
    21d0:	2d 92       	st	X+, r2
    21d2:	3d 92       	st	X+, r3
    21d4:	4d 92       	st	X+, r4
    21d6:	5d 92       	st	X+, r5
    21d8:	6d 92       	st	X+, r6
    21da:	7d 92       	st	X+, r7
    21dc:	8d 92       	st	X+, r8
    21de:	9d 92       	st	X+, r9
    21e0:	ad 92       	st	X+, r10
    21e2:	bd 92       	st	X+, r11
    21e4:	cd 92       	st	X+, r12
    21e6:	dd 92       	st	X+, r13
    21e8:	ed 92       	st	X+, r14
    21ea:	fd 92       	st	X+, r15
    21ec:	0d 93       	st	X+, r16
    21ee:	1d 93       	st	X+, r17
    21f0:	cd 93       	st	X+, r28
    21f2:	dd 93       	st	X+, r29
    21f4:	ff 91       	pop	r31
    21f6:	ef 91       	pop	r30
    21f8:	8d b7       	in	r24, 0x3d	; 61
    21fa:	8d 93       	st	X+, r24
    21fc:	8e b7       	in	r24, 0x3e	; 62
    21fe:	8d 93       	st	X+, r24
    2200:	8f b7       	in	r24, 0x3f	; 63
    2202:	8d 93       	st	X+, r24
    2204:	ed 93       	st	X+, r30
    2206:	fd 93       	st	X+, r31
    2208:	88 27       	eor	r24, r24
    220a:	99 27       	eor	r25, r25
    220c:	09 94       	ijmp

0000220e <longjmp>:
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	91 05       	cpc	r25, r1
    2216:	81 1d       	adc	r24, r1
    2218:	2d 90       	ld	r2, X+
    221a:	3d 90       	ld	r3, X+
    221c:	4d 90       	ld	r4, X+
    221e:	5d 90       	ld	r5, X+
    2220:	6d 90       	ld	r6, X+
    2222:	7d 90       	ld	r7, X+
    2224:	8d 90       	ld	r8, X+
    2226:	9d 90       	ld	r9, X+
    2228:	ad 90       	ld	r10, X+
    222a:	bd 90       	ld	r11, X+
    222c:	cd 90       	ld	r12, X+
    222e:	dd 90       	ld	r13, X+
    2230:	ed 90       	ld	r14, X+
    2232:	fd 90       	ld	r15, X+
    2234:	0d 91       	ld	r16, X+
    2236:	1d 91       	ld	r17, X+
    2238:	cd 91       	ld	r28, X+
    223a:	dd 91       	ld	r29, X+
    223c:	ed 91       	ld	r30, X+
    223e:	fd 91       	ld	r31, X+
    2240:	0d 90       	ld	r0, X+
    2242:	f8 94       	cli
    2244:	fe bf       	out	0x3e, r31	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	ed bf       	out	0x3d, r30	; 61
    224a:	ed 91       	ld	r30, X+
    224c:	fd 91       	ld	r31, X+
    224e:	09 94       	ijmp

00002250 <_exit>:
    2250:	f8 94       	cli

00002252 <__stop_program>:
    2252:	ff cf       	rjmp	.-2      	; 0x2252 <__stop_program>
