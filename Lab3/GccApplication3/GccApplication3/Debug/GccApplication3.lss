
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000005e2  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080011a  0080011a  00000690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ab  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b14  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000654  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b0  00000000  00000000  00003276  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 ee       	ldi	r30, 0xE2	; 226
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  92:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
	while(1) {
		if (is_prime(i)) {
			printAt(i, 0);
		}
		i += 1;
	}
  9a:	ec ee       	ldi	r30, 0xEC	; 236
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	90 81       	ld	r25, Z
  a0:	80 81       	ld	r24, Z
  a2:	80 95       	com	r24
  a4:	82 70       	andi	r24, 0x02	; 2
  a6:	9d 7f       	andi	r25, 0xFD	; 253
  a8:	89 2b       	or	r24, r25
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <LCD_Init>:
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b4:	87 eb       	ldi	r24, 0xB7	; 183
  b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  c0:	80 ec       	ldi	r24, 0xC0	; 192
  c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c6:	08 95       	ret

000000c8 <writeChar>:
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	66 30       	cpi	r22, 0x06	; 6
  d2:	71 05       	cpc	r23, r1
  d4:	08 f0       	brcs	.+2      	; 0xd8 <writeChar+0x10>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <writeChar+0xa6>
  d8:	80 53       	subi	r24, 0x30	; 48
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	08 f0       	brcs	.+2      	; 0xe0 <writeChar+0x18>
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	fb 01       	movw	r30, r22
  e2:	f5 95       	asr	r31
  e4:	e7 95       	ror	r30
  e6:	e4 51       	subi	r30, 0x14	; 20
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	60 ff       	sbrs	r22, 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <writeChar+0x2a>
  ee:	50 ef       	ldi	r21, 0xF0	; 240
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <writeChar+0x2c>
  f2:	5f e0       	ldi	r21, 0x0F	; 15
  f4:	a8 2f       	mov	r26, r24
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	a0 50       	subi	r26, 0x00	; 0
  fe:	bf 4f       	sbci	r27, 0xFF	; 255
 100:	cd 91       	ld	r28, X+
 102:	dc 91       	ld	r29, X
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	15 2f       	mov	r17, r21
 10e:	10 95       	com	r17
 110:	01 2f       	mov	r16, r17
 112:	06 66       	ori	r16, 0x66	; 102
 114:	04 c0       	rjmp	.+8      	; 0x11e <writeChar+0x56>
 116:	14 96       	adiw	r26, 0x04	; 4
 118:	35 96       	adiw	r30, 0x05	; 5
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	ce 01       	movw	r24, r28
 120:	0a 2e       	mov	r0, r26
 122:	02 c0       	rjmp	.+4      	; 0x128 <writeChar+0x60>
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <writeChar+0x5c>
 12c:	48 2f       	mov	r20, r24
 12e:	4f 70       	andi	r20, 0x0F	; 15
 130:	61 30       	cpi	r22, 0x01	; 1
 132:	71 05       	cpc	r23, r1
 134:	69 f4       	brne	.+26     	; 0x150 <writeChar+0x88>
 136:	80 81       	ld	r24, Z
 138:	90 2f       	mov	r25, r16
 13a:	98 23       	and	r25, r24
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	48 9f       	mul	r20, r24
 140:	90 01       	movw	r18, r0
 142:	11 24       	eor	r1, r1
 144:	84 2f       	mov	r24, r20
 146:	82 2b       	or	r24, r18
 148:	85 23       	and	r24, r21
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	e3 cf       	rjmp	.-58     	; 0x116 <writeChar+0x4e>
 150:	80 81       	ld	r24, Z
 152:	91 2f       	mov	r25, r17
 154:	98 23       	and	r25, r24
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	48 9f       	mul	r20, r24
 15a:	90 01       	movw	r18, r0
 15c:	11 24       	eor	r1, r1
 15e:	84 2f       	mov	r24, r20
 160:	82 2b       	or	r24, r18
 162:	85 23       	and	r24, r21
 164:	89 2b       	or	r24, r25
 166:	80 83       	st	Z, r24
 168:	64 30       	cpi	r22, 0x04	; 4
 16a:	71 05       	cpc	r23, r1
 16c:	a4 f2       	brlt	.-88     	; 0x116 <writeChar+0x4e>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <printAt>:
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <printAt+0x12>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	6b 01       	movw	r12, r22
 190:	7c 01       	movw	r14, r24
 192:	8a 01       	movw	r16, r20
 194:	24 e6       	ldi	r18, 0x64	; 100
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 6d 02 	call	0x4da	; 0x4da <__divmodsi4>
 1a0:	2a e0       	ldi	r18, 0x0A	; 10
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	0e 94 6d 02 	call	0x4da	; 0x4da <__divmodsi4>
 1ac:	b8 01       	movw	r22, r16
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	82 0f       	add	r24, r18
 1b2:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
 1b6:	1a 82       	std	Y+2, r1	; 0x02
 1b8:	19 82       	std	Y+1, r1	; 0x01
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	88 3e       	cpi	r24, 0xE8	; 232
 1c0:	93 40       	sbci	r25, 0x03	; 3
 1c2:	54 f4       	brge	.+20     	; 0x1d8 <printAt+0x60>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	9a 81       	ldd	r25, Y+2	; 0x02
 1d2:	88 3e       	cpi	r24, 0xE8	; 232
 1d4:	93 40       	sbci	r25, 0x03	; 3
 1d6:	b4 f3       	brlt	.-20     	; 0x1c4 <printAt+0x4c>
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	c7 01       	movw	r24, r14
 1de:	b6 01       	movw	r22, r12
 1e0:	2a e0       	ldi	r18, 0x0A	; 10
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	0e 94 6d 02 	call	0x4da	; 0x4da <__divmodsi4>
 1ec:	86 2f       	mov	r24, r22
 1ee:	b8 01       	movw	r22, r16
 1f0:	80 5d       	subi	r24, 0xD0	; 208
 1f2:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	08 95       	ret

0000020c <button>:
 20c:	ec ee       	ldi	r30, 0xEC	; 236
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	90 81       	ld	r25, Z
 212:	80 81       	ld	r24, Z
 214:	80 95       	com	r24
 216:	84 74       	andi	r24, 0x44	; 68
 218:	9b 7b       	andi	r25, 0xBB	; 187
 21a:	89 2b       	or	r24, r25
 21c:	80 83       	st	Z, r24
 21e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 222:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 226:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__data_end+0x2>
 22a:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__data_end+0x3>
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	8f 4f       	sbci	r24, 0xFF	; 255
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end>
 23e:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x1>
 242:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x2>
 246:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x3>
 24a:	44 e0       	ldi	r20, 0x04	; 4
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	0e 94 bc 00 	call	0x178	; 0x178 <printAt>
 252:	08 95       	ret

00000254 <__vector_7>:
	LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
	numPressed += 1;
	printAt(numPressed, 4);
}

ISR(TIMER1_COMPA_vect) { //Blink
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	spawn(blink, 0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	8d e4       	ldi	r24, 0x4D	; 77
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 b1 01 	call	0x362	; 0x362 <spawn>
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_3>:

ISR(PCINT1_vect) { //Button
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	if(!(PINB & (1<<PINB7))) {
 2c6:	1f 99       	sbic	0x03, 7	; 3
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <__vector_3+0x32>
		spawn(button, 0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 b1 01 	call	0x362	; 0x362 <spawn>
	}
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <main>:
	


int main(void)
{
    CLKPR = 0x80;
 2f8:	e1 e6       	ldi	r30, 0x61	; 97
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	80 83       	st	Z, r24
	CLKPR = 0x00;
 300:	10 82       	st	Z, r1
    LCD_Init();
 302:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
	LCDDR0 = LCDDR0 | (1 << 2);
 306:	ec ee       	ldi	r30, 0xEC	; 236
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	84 60       	ori	r24, 0x04	; 4
 30e:	80 83       	st	Z, r24
    spawn(blink, 0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	8d e4       	ldi	r24, 0x4D	; 77
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 b1 01 	call	0x362	; 0x362 <spawn>
	//primes();
}
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret

00000322 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <dispatch+0x6>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 330:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 334:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 338:	06 96       	adiw	r24, 0x06	; 6
 33a:	0e 94 ae 02 	call	0x55c	; 0x55c <setjmp>
 33e:	89 2b       	or	r24, r25
 340:	59 f4       	brne	.+22     	; 0x358 <dispatch+0x36>
        current = next;
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 34a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
        longjmp(next->context,1);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	06 96       	adiw	r24, 0x06	; 6
 354:	0e 94 ce 02 	call	0x59c	; 0x59c <longjmp>
    }
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <spawn>:

void spawn(void (* function)(int), int arg) {
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <spawn+0x6>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 36c:	f8 94       	cli
    //lock(&MTX2);
    if (!initialized) initialize();
 36e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 372:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 376:	23 2b       	or	r18, r19
 378:	a1 f5       	brne	.+104    	; 0x3e2 <spawn+0x80>
long interrupts = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 37a:	2c ef       	ldi	r18, 0xFC	; 252
 37c:	31 e0       	ldi	r19, 0x01	; 1
 37e:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 382:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 386:	29 e6       	ldi	r18, 0x69	; 105
 388:	32 e0       	ldi	r19, 0x02	; 2
 38a:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 38e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 392:	26 ed       	ldi	r18, 0xD6	; 214
 394:	32 e0       	ldi	r19, 0x02	; 2
 396:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 39a:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 39e:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 3a2:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    //Set compare match
    PORTB = PORTB | (1 << PB5);
 3a6:	2d 9a       	sbi	0x05, 5	; 5
    PORTB = PORTB | (1 << PB7);
 3a8:	2f 9a       	sbi	0x05, 7	; 5
    
    //Set timer enabler
    TIMSK1 = (1 << OCIE1A);
 3aa:	22 e0       	ldi	r18, 0x02	; 2
 3ac:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    
    //Set pre-scaling factor and CTC
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 3b0:	2d e0       	ldi	r18, 0x0D	; 13
 3b2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

    //8 000 000 / 1024 /1000 * 50 * 100 (Target Time)
    OCR1A = 390.625*10;
 3b6:	22 e4       	ldi	r18, 0x42	; 66
 3b8:	3f e0       	ldi	r19, 0x0F	; 15
 3ba:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3be:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    
    //Set timer
	TCNT1 = 0;
 3c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    EIMSK = EIMSK | (1<<PCINT15);
 3ca:	ef 9a       	sbi	0x1d, 7	; 29
    PCMSK1 = PCMSK1 | (1<<PCINT15);
 3cc:	ec e6       	ldi	r30, 0x6C	; 108
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	20 81       	ld	r18, Z
 3d2:	20 68       	ori	r18, 0x80	; 128
 3d4:	20 83       	st	Z, r18

    initialized = 1;
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 3de:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
        *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3e2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <freeQ>
 3e6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <freeQ+0x1>
 3ea:	3a 83       	std	Y+2, r19	; 0x02
 3ec:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3ee:	23 2b       	or	r18, r19
 3f0:	a9 f0       	breq	.+42     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
        *queue = (*queue)->next;
 3f2:	e9 81       	ldd	r30, Y+1	; 0x01
 3f4:	fa 81       	ldd	r31, Y+2	; 0x02
 3f6:	44 81       	ldd	r20, Z+4	; 0x04
 3f8:	55 81       	ldd	r21, Z+5	; 0x05
 3fa:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <freeQ+0x1>
 3fe:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <freeQ>
    DISABLE();
    //lock(&MTX2);
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
    newp->arg = arg;
 406:	73 83       	std	Z+3, r23	; 0x03
 408:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 40a:	15 82       	std	Z+5, r1	; 0x05
 40c:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 40e:	cf 01       	movw	r24, r30
 410:	06 96       	adiw	r24, 0x06	; 6
 412:	0e 94 ae 02 	call	0x55c	; 0x55c <setjmp>
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	b1 f5       	brne	.+108    	; 0x486 <__DATA_REGION_LENGTH__+0x86>
 41a:	01 c0       	rjmp	.+2      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
        ENABLE();
 41e:	78 94       	sei
        //unlock(&MTX2);
        current->function(current->arg);
 420:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <current>
 424:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <current+0x1>
 428:	ed 91       	ld	r30, X+
 42a:	fc 91       	ld	r31, X
 42c:	11 97       	sbiw	r26, 0x01	; 1
 42e:	12 96       	adiw	r26, 0x02	; 2
 430:	8d 91       	ld	r24, X+
 432:	9c 91       	ld	r25, X
 434:	13 97       	sbiw	r26, 0x03	; 3
 436:	09 95       	icall
        DISABLE();
 438:	f8 94       	cli
        //lock(&MTX2);

        enqueue(current, &freeQ);
 43a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <current>
 43e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 442:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <freeQ>
 446:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <freeQ+0x1>
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	29 f4       	brne	.+10     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
        *queue = p;
 44e:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <freeQ+0x1>
 452:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <freeQ>
 456:	06 c0       	rjmp	.+12     	; 0x464 <__DATA_REGION_LENGTH__+0x64>
    } else {
        thread q = *queue;
        p->next = q;
 458:	95 83       	std	Z+5, r25	; 0x05
 45a:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 45c:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <freeQ+0x1>
 460:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 464:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 468:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 46c:	00 97       	sbiw	r24, 0x00	; 0
 46e:	51 f0       	breq	.+20     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
        *queue = (*queue)->next;
 470:	fc 01       	movw	r30, r24
 472:	24 81       	ldd	r18, Z+4	; 0x04
 474:	35 81       	ldd	r19, Z+5	; 0x05
 476:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 47a:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        current->function(current->arg);
        DISABLE();
        //lock(&MTX2);

        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 47e:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
 482:	01 c0       	rjmp	.+2      	; 0x486 <__DATA_REGION_LENGTH__+0x86>
 484:	ff cf       	rjmp	.-2      	; 0x484 <__DATA_REGION_LENGTH__+0x84>
    }
    SETSTACK(&newp->context, &newp->stack);
 486:	e9 81       	ldd	r30, Y+1	; 0x01
 488:	fa 81       	ldd	r31, Y+2	; 0x02
 48a:	36 96       	adiw	r30, 0x06	; 6
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	9a 81       	ldd	r25, Y+2	; 0x02
 490:	87 59       	subi	r24, 0x97	; 151
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	91 8b       	std	Z+17, r25	; 0x11
 496:	80 8b       	std	Z+16, r24	; 0x10
 498:	93 8b       	std	Z+19, r25	; 0x13
 49a:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(current, &readyQ);
 49c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <current>
 4a0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 4a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4a8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	29 f4       	brne	.+10     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
        *queue = p;
 4b0:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <readyQ+0x1>
 4b4:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <readyQ>
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
    } else {
        thread q = *queue;
        p->next = q;
 4ba:	95 83       	std	Z+5, r25	; 0x05
 4bc:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 4be:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <readyQ+0x1>
 4c2:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <readyQ>
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(current, &readyQ);

    dispatch(newp);
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ca:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
    ENABLE();
 4ce:	78 94       	sei
}
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <__divmodsi4>:
 4da:	05 2e       	mov	r0, r21
 4dc:	97 fb       	bst	r25, 7
 4de:	1e f4       	brtc	.+6      	; 0x4e6 <__divmodsi4+0xc>
 4e0:	00 94       	com	r0
 4e2:	0e 94 84 02 	call	0x508	; 0x508 <__negsi2>
 4e6:	57 fd       	sbrc	r21, 7
 4e8:	07 d0       	rcall	.+14     	; 0x4f8 <__divmodsi4_neg2>
 4ea:	0e 94 8c 02 	call	0x518	; 0x518 <__udivmodsi4>
 4ee:	07 fc       	sbrc	r0, 7
 4f0:	03 d0       	rcall	.+6      	; 0x4f8 <__divmodsi4_neg2>
 4f2:	4e f4       	brtc	.+18     	; 0x506 <__divmodsi4_exit>
 4f4:	0c 94 84 02 	jmp	0x508	; 0x508 <__negsi2>

000004f8 <__divmodsi4_neg2>:
 4f8:	50 95       	com	r21
 4fa:	40 95       	com	r20
 4fc:	30 95       	com	r19
 4fe:	21 95       	neg	r18
 500:	3f 4f       	sbci	r19, 0xFF	; 255
 502:	4f 4f       	sbci	r20, 0xFF	; 255
 504:	5f 4f       	sbci	r21, 0xFF	; 255

00000506 <__divmodsi4_exit>:
 506:	08 95       	ret

00000508 <__negsi2>:
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	08 95       	ret

00000518 <__udivmodsi4>:
 518:	a1 e2       	ldi	r26, 0x21	; 33
 51a:	1a 2e       	mov	r1, r26
 51c:	aa 1b       	sub	r26, r26
 51e:	bb 1b       	sub	r27, r27
 520:	fd 01       	movw	r30, r26
 522:	0d c0       	rjmp	.+26     	; 0x53e <__udivmodsi4_ep>

00000524 <__udivmodsi4_loop>:
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	ee 1f       	adc	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	a2 17       	cp	r26, r18
 52e:	b3 07       	cpc	r27, r19
 530:	e4 07       	cpc	r30, r20
 532:	f5 07       	cpc	r31, r21
 534:	20 f0       	brcs	.+8      	; 0x53e <__udivmodsi4_ep>
 536:	a2 1b       	sub	r26, r18
 538:	b3 0b       	sbc	r27, r19
 53a:	e4 0b       	sbc	r30, r20
 53c:	f5 0b       	sbc	r31, r21

0000053e <__udivmodsi4_ep>:
 53e:	66 1f       	adc	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	1a 94       	dec	r1
 548:	69 f7       	brne	.-38     	; 0x524 <__udivmodsi4_loop>
 54a:	60 95       	com	r22
 54c:	70 95       	com	r23
 54e:	80 95       	com	r24
 550:	90 95       	com	r25
 552:	9b 01       	movw	r18, r22
 554:	ac 01       	movw	r20, r24
 556:	bd 01       	movw	r22, r26
 558:	cf 01       	movw	r24, r30
 55a:	08 95       	ret

0000055c <setjmp>:
 55c:	dc 01       	movw	r26, r24
 55e:	2d 92       	st	X+, r2
 560:	3d 92       	st	X+, r3
 562:	4d 92       	st	X+, r4
 564:	5d 92       	st	X+, r5
 566:	6d 92       	st	X+, r6
 568:	7d 92       	st	X+, r7
 56a:	8d 92       	st	X+, r8
 56c:	9d 92       	st	X+, r9
 56e:	ad 92       	st	X+, r10
 570:	bd 92       	st	X+, r11
 572:	cd 92       	st	X+, r12
 574:	dd 92       	st	X+, r13
 576:	ed 92       	st	X+, r14
 578:	fd 92       	st	X+, r15
 57a:	0d 93       	st	X+, r16
 57c:	1d 93       	st	X+, r17
 57e:	cd 93       	st	X+, r28
 580:	dd 93       	st	X+, r29
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	8d b7       	in	r24, 0x3d	; 61
 588:	8d 93       	st	X+, r24
 58a:	8e b7       	in	r24, 0x3e	; 62
 58c:	8d 93       	st	X+, r24
 58e:	8f b7       	in	r24, 0x3f	; 63
 590:	8d 93       	st	X+, r24
 592:	ed 93       	st	X+, r30
 594:	fd 93       	st	X+, r31
 596:	88 27       	eor	r24, r24
 598:	99 27       	eor	r25, r25
 59a:	09 94       	ijmp

0000059c <longjmp>:
 59c:	dc 01       	movw	r26, r24
 59e:	cb 01       	movw	r24, r22
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	91 05       	cpc	r25, r1
 5a4:	81 1d       	adc	r24, r1
 5a6:	2d 90       	ld	r2, X+
 5a8:	3d 90       	ld	r3, X+
 5aa:	4d 90       	ld	r4, X+
 5ac:	5d 90       	ld	r5, X+
 5ae:	6d 90       	ld	r6, X+
 5b0:	7d 90       	ld	r7, X+
 5b2:	8d 90       	ld	r8, X+
 5b4:	9d 90       	ld	r9, X+
 5b6:	ad 90       	ld	r10, X+
 5b8:	bd 90       	ld	r11, X+
 5ba:	cd 90       	ld	r12, X+
 5bc:	dd 90       	ld	r13, X+
 5be:	ed 90       	ld	r14, X+
 5c0:	fd 90       	ld	r15, X+
 5c2:	0d 91       	ld	r16, X+
 5c4:	1d 91       	ld	r17, X+
 5c6:	cd 91       	ld	r28, X+
 5c8:	dd 91       	ld	r29, X+
 5ca:	ed 91       	ld	r30, X+
 5cc:	fd 91       	ld	r31, X+
 5ce:	0d 90       	ld	r0, X+
 5d0:	f8 94       	cli
 5d2:	fe bf       	out	0x3e, r31	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	ed bf       	out	0x3d, r30	; 61
 5d8:	ed 91       	ld	r30, X+
 5da:	fd 91       	ld	r31, X+
 5dc:	09 94       	ijmp

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
