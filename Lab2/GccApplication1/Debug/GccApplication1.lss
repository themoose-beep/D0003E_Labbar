
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080011a  0080011a  0000076c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118b  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000601  00000000  00000000  0000253a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000563  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000801  00000000  00000000  00003277  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee eb       	ldi	r30, 0xBE	; 190
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 34       	cpi	r26, 0x45	; 69
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  92:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:
int pp;
mutex MTX = MUTEX_INIT;

void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  b2:	08 95       	ret

000000b4 <writeChar>:
	
	return;
}


void writeChar(char ch, int pos) {
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
  bc:	66 30       	cpi	r22, 0x06	; 6
  be:	71 05       	cpc	r23, r1
  c0:	08 f0       	brcs	.+2      	; 0xc4 <writeChar+0x10>
  c2:	4b c0       	rjmp	.+150    	; 0x15a <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
  c4:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x18>
		intCh = 10;
  ca:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
  cc:	fb 01       	movw	r30, r22
  ce:	f5 95       	asr	r31
  d0:	e7 95       	ror	r30
  d2:	e4 51       	subi	r30, 0x14	; 20
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
  d6:	60 ff       	sbrs	r22, 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
  da:	50 ef       	ldi	r21, 0xF0	; 240
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
  de:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
  e0:	a8 2f       	mov	r26, r24
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	aa 0f       	add	r26, r26
  e6:	bb 1f       	adc	r27, r27
  e8:	a0 50       	subi	r26, 0x00	; 0
  ea:	bf 4f       	sbci	r27, 0xFF	; 255
  ec:	cd 91       	ld	r28, X+
  ee:	dc 91       	ld	r29, X
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
  f8:	15 2f       	mov	r17, r21
  fa:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
  fc:	01 2f       	mov	r16, r17
  fe:	06 66       	ori	r16, 0x66	; 102
 100:	04 c0       	rjmp	.+8      	; 0x10a <writeChar+0x56>
 102:	14 96       	adiw	r26, 0x04	; 4
 104:	35 96       	adiw	r30, 0x05	; 5
 106:	6f 5f       	subi	r22, 0xFF	; 255
 108:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
 10a:	ce 01       	movw	r24, r28
 10c:	0a 2e       	mov	r0, r26
 10e:	02 c0       	rjmp	.+4      	; 0x114 <writeChar+0x60>
 110:	96 95       	lsr	r25
 112:	87 95       	ror	r24
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <writeChar+0x5c>
 118:	48 2f       	mov	r20, r24
 11a:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	71 05       	cpc	r23, r1
 120:	69 f4       	brne	.+26     	; 0x13c <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 122:	80 81       	ld	r24, Z
 124:	90 2f       	mov	r25, r16
 126:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	48 9f       	mul	r20, r24
 12c:	90 01       	movw	r18, r0
 12e:	11 24       	eor	r1, r1
 130:	84 2f       	mov	r24, r20
 132:	82 2b       	or	r24, r18
 134:	85 23       	and	r24, r21
 136:	89 2b       	or	r24, r25
 138:	80 83       	st	Z, r24
 13a:	e3 cf       	rjmp	.-58     	; 0x102 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 13c:	80 81       	ld	r24, Z
 13e:	91 2f       	mov	r25, r17
 140:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	48 9f       	mul	r20, r24
 146:	90 01       	movw	r18, r0
 148:	11 24       	eor	r1, r1
 14a:	84 2f       	mov	r24, r20
 14c:	82 2b       	or	r24, r18
 14e:	85 23       	and	r24, r21
 150:	89 2b       	or	r24, r25
 152:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
 154:	64 30       	cpi	r22, 0x04	; 4
 156:	71 05       	cpc	r23, r1
 158:	a4 f2       	brlt	.-88     	; 0x102 <writeChar+0x4e>

	}
	return;
	
	
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <is_prime>:

bool is_prime(long i) {
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	88 16       	cp	r8, r24
 17c:	91 04       	cpc	r9, r1
 17e:	a1 04       	cpc	r10, r1
 180:	b1 04       	cpc	r11, r1
 182:	94 f1       	brlt	.+100    	; 0x1e8 <is_prime+0x84>
		if (i % j == 0) {
 184:	d5 01       	movw	r26, r10
 186:	c4 01       	movw	r24, r8
 188:	81 70       	andi	r24, 0x01	; 1
 18a:	99 27       	eor	r25, r25
 18c:	aa 27       	eor	r26, r26
 18e:	b0 78       	andi	r27, 0x80	; 128
 190:	bb 23       	and	r27, r27
 192:	54 f4       	brge	.+20     	; 0x1a8 <is_prime+0x44>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	a1 09       	sbc	r26, r1
 198:	b1 09       	sbc	r27, r1
 19a:	8e 6f       	ori	r24, 0xFE	; 254
 19c:	9f 6f       	ori	r25, 0xFF	; 255
 19e:	af 6f       	ori	r26, 0xFF	; 255
 1a0:	bf 6f       	ori	r27, 0xFF	; 255
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 1d       	adc	r26, r1
 1a6:	b1 1d       	adc	r27, r1
 1a8:	89 2b       	or	r24, r25
 1aa:	8a 2b       	or	r24, r26
 1ac:	8b 2b       	or	r24, r27
 1ae:	f1 f0       	breq	.+60     	; 0x1ec <is_prime+0x88>
 1b0:	c1 2c       	mov	r12, r1
 1b2:	d1 2c       	mov	r13, r1
 1b4:	76 01       	movw	r14, r12
 1b6:	68 94       	set
 1b8:	c1 f8       	bld	r12, 1
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <is_prime+0x6c>
 1bc:	c5 01       	movw	r24, r10
 1be:	b4 01       	movw	r22, r8
 1c0:	a7 01       	movw	r20, r14
 1c2:	96 01       	movw	r18, r12
 1c4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__divmodsi4>
 1c8:	67 2b       	or	r22, r23
 1ca:	68 2b       	or	r22, r24
 1cc:	69 2b       	or	r22, r25
 1ce:	81 f0       	breq	.+32     	; 0x1f0 <is_prime+0x8c>
}

bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	c8 1a       	sub	r12, r24
 1d4:	d8 0a       	sbc	r13, r24
 1d6:	e8 0a       	sbc	r14, r24
 1d8:	f8 0a       	sbc	r15, r24
 1da:	8c 14       	cp	r8, r12
 1dc:	9d 04       	cpc	r9, r13
 1de:	ae 04       	cpc	r10, r14
 1e0:	bf 04       	cpc	r11, r15
 1e2:	61 f7       	brne	.-40     	; 0x1bc <is_prime+0x58>
		if (i % j == 0) {
			return false;
		}
	}
	return true;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <is_prime+0x8e>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <is_prime+0x8e>
bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
		if (i % j == 0) {
			return false;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <is_prime+0x8e>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	9f 90       	pop	r9
 200:	8f 90       	pop	r8
 202:	08 95       	ret

00000204 <printAt>:

void printAt(long num, int pos) {
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <printAt+0x12>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	6b 01       	movw	r12, r22
 21c:	7c 01       	movw	r14, r24
 21e:	8a 01       	movw	r16, r20

	//Lock to not disturb shared variable pp
	lock(&MTX);
 220:	8a e1       	ldi	r24, 0x1A	; 26
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 8f 02 	call	0x51e	; 0x51e <lock>
    pp = pos;
 228:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <pp+0x1>
 22c:	00 93 22 01 	sts	0x0122, r16	; 0x800122 <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 230:	c7 01       	movw	r24, r14
 232:	b6 01       	movw	r22, r12
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__divmodsi4>
 240:	2a e0       	ldi	r18, 0x0A	; 10
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__divmodsi4>
 24c:	b8 01       	movw	r22, r16
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	82 0f       	add	r24, r18
 252:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	for(volatile int i = 0; i < 1000; i++);
 256:	1a 82       	std	Y+2, r1	; 0x02
 258:	19 82       	std	Y+1, r1	; 0x01
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	88 3e       	cpi	r24, 0xE8	; 232
 260:	93 40       	sbci	r25, 0x03	; 3
 262:	54 f4       	brge	.+20     	; 0x278 <printAt+0x74>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	9a 81       	ldd	r25, Y+2	; 0x02
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	88 3e       	cpi	r24, 0xE8	; 232
 274:	93 40       	sbci	r25, 0x03	; 3
 276:	b4 f3       	brlt	.-20     	; 0x264 <printAt+0x60>
    pp++;
 278:	00 91 22 01 	lds	r16, 0x0122	; 0x800122 <pp>
 27c:	10 91 23 01 	lds	r17, 0x0123	; 0x800123 <pp+0x1>
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <pp+0x1>
 288:	00 93 22 01 	sts	0x0122, r16	; 0x800122 <pp>
    writeChar( num % 10 + '0', pp);
 28c:	c7 01       	movw	r24, r14
 28e:	b6 01       	movw	r22, r12
 290:	2a e0       	ldi	r18, 0x0A	; 10
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__divmodsi4>
 29c:	86 2f       	mov	r24, r22
 29e:	b8 01       	movw	r22, r16
 2a0:	80 5d       	subi	r24, 0xD0	; 208
 2a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	unlock(&MTX);
 2a6:	8a e1       	ldi	r24, 0x1A	; 26
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 b6 02 	call	0x56c	; 0x56c <unlock>
	//yield();
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	08 95       	ret

000002c4 <computePrimes>:

void computePrimes(int pos) {
 2c4:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 2c6:	c1 2c       	mov	r12, r1
 2c8:	d1 2c       	mov	r13, r1
 2ca:	76 01       	movw	r14, r12
 2cc:	c3 94       	inc	r12
        if (is_prime(n)) {
 2ce:	c7 01       	movw	r24, r14
 2d0:	b6 01       	movw	r22, r12
 2d2:	0e 94 b2 00 	call	0x164	; 0x164 <is_prime>
 2d6:	88 23       	and	r24, r24
 2d8:	29 f0       	breq	.+10     	; 0x2e4 <computePrimes+0x20>
            printAt(n, pos);
 2da:	ae 01       	movw	r20, r28
 2dc:	c7 01       	movw	r24, r14
 2de:	b6 01       	movw	r22, r12
 2e0:	0e 94 02 01 	call	0x204	; 0x204 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	c8 1a       	sub	r12, r24
 2e8:	d8 0a       	sbc	r13, r24
 2ea:	e8 0a       	sbc	r14, r24
 2ec:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 2ee:	ef cf       	rjmp	.-34     	; 0x2ce <computePrimes+0xa>

000002f0 <__vector_7>:
}


//Every 50 ms
ISR(TIMER1_COMPA_vect) {
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	yield();
 312:	0e 94 74 02 	call	0x4e8	; 0x4e8 <yield>
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <main>:

int main() {
	LCD_Init();
 338:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
    spawn(computePrimes, 0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	82 e6       	ldi	r24, 0x62	; 98
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 df 01 	call	0x3be	; 0x3be <spawn>
    computePrimes(3);
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <computePrimes>

00000350 <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 350:	dc 01       	movw	r26, r24
 352:	15 96       	adiw	r26, 0x05	; 5
 354:	1c 92       	st	X, r1
 356:	1e 92       	st	-X, r1
 358:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 35a:	db 01       	movw	r26, r22
 35c:	ed 91       	ld	r30, X+
 35e:	fc 91       	ld	r31, X
 360:	11 97       	sbiw	r26, 0x01	; 1
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	21 f4       	brne	.+8      	; 0x36e <enqueue+0x1e>
        *queue = p;
 366:	8d 93       	st	X+, r24
 368:	9c 93       	st	X, r25
 36a:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 36c:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 36e:	24 81       	ldd	r18, Z+4	; 0x04
 370:	35 81       	ldd	r19, Z+5	; 0x05
 372:	21 15       	cp	r18, r1
 374:	31 05       	cpc	r19, r1
 376:	d1 f7       	brne	.-12     	; 0x36c <enqueue+0x1c>
            q = q->next;
        q->next = p;
 378:	95 83       	std	Z+5, r25	; 0x05
 37a:	84 83       	std	Z+4, r24	; 0x04
 37c:	08 95       	ret

0000037e <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <dispatch+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 38c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 390:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 394:	06 96       	adiw	r24, 0x06	; 6
 396:	0e 94 1c 03 	call	0x638	; 0x638 <setjmp>
 39a:	89 2b       	or	r24, r25
 39c:	59 f4       	brne	.+22     	; 0x3b4 <dispatch+0x36>
        current = next;
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 3a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
        longjmp(next->context,1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	06 96       	adiw	r24, 0x06	; 6
 3b0:	0e 94 3c 03 	call	0x678	; 0x678 <longjmp>
    }
}
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <spawn>:

void spawn(void (* function)(int), int arg) {
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <spawn+0x6>
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 3c8:	f8 94       	cli
    //lock(&MTX2);
    if (!initialized) initialize();
 3ca:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 3ce:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 3d2:	23 2b       	or	r18, r19
 3d4:	69 f5       	brne	.+90     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 3d6:	2e ef       	ldi	r18, 0xFE	; 254
 3d8:	31 e0       	ldi	r19, 0x01	; 1
 3da:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <threads+0x5>
 3de:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <threads+0x4>
 3e2:	2b e6       	ldi	r18, 0x6B	; 107
 3e4:	32 e0       	ldi	r19, 0x02	; 2
 3e6:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <threads+0x72>
 3ea:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <threads+0x71>
 3ee:	28 ed       	ldi	r18, 0xD8	; 216
 3f0:	32 e0       	ldi	r19, 0x02	; 2
 3f2:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <threads+0xdf>
 3f6:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 3fa:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <threads+0x14c>
 3fe:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <threads+0x14b>

    //Set compare match
    PORTB = PORTB | (1 << PB5);
 402:	2d 9a       	sbi	0x05, 5	; 5
    
    //Set timer enabler
    TIMSK1 = (1 << OCIE1A);
 404:	22 e0       	ldi	r18, 0x02	; 2
 406:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    
    //Set pre-scaling factor and CTC
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 40a:	2d e0       	ldi	r18, 0x0D	; 13
 40c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

    //8 000 000 / 1024 /1000 * 50 (Target Time)
    OCR1A = 390.625;
 410:	26 e8       	ldi	r18, 0x86	; 134
 412:	31 e0       	ldi	r19, 0x01	; 1
 414:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 418:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    
    //Set timer
	TCNT1 = 0;
 41c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 420:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    initialized = 1;
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 42c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 430:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <freeQ>
 434:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <freeQ+0x1>
 438:	3a 83       	std	Y+2, r19	; 0x02
 43a:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 43c:	23 2b       	or	r18, r19
 43e:	a9 f0       	breq	.+42     	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
        *queue = (*queue)->next;
 440:	e9 81       	ldd	r30, Y+1	; 0x01
 442:	fa 81       	ldd	r31, Y+2	; 0x02
 444:	44 81       	ldd	r20, Z+4	; 0x04
 446:	55 81       	ldd	r21, Z+5	; 0x05
 448:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <freeQ+0x1>
 44c:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <freeQ>
    DISABLE();
    //lock(&MTX2);
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	80 83       	st	Z, r24
    newp->arg = arg;
 454:	73 83       	std	Z+3, r23	; 0x03
 456:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 458:	15 82       	std	Z+5, r1	; 0x05
 45a:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 45c:	cf 01       	movw	r24, r30
 45e:	06 96       	adiw	r24, 0x06	; 6
 460:	0e 94 1c 03 	call	0x638	; 0x638 <setjmp>
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	49 f5       	brne	.+82     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 468:	01 c0       	rjmp	.+2      	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
        ENABLE();
 46c:	78 94       	sei
        //unlock(&MTX2);
        current->function(current->arg);
 46e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <current>
 472:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <current+0x1>
 476:	ed 91       	ld	r30, X+
 478:	fc 91       	ld	r31, X
 47a:	11 97       	sbiw	r26, 0x01	; 1
 47c:	12 96       	adiw	r26, 0x02	; 2
 47e:	8d 91       	ld	r24, X+
 480:	9c 91       	ld	r25, X
 482:	13 97       	sbiw	r26, 0x03	; 3
 484:	09 95       	icall
        DISABLE();
 486:	f8 94       	cli
        //lock(&MTX2);

        enqueue(current, &freeQ);
 488:	68 e1       	ldi	r22, 0x18	; 24
 48a:	71 e0       	ldi	r23, 0x01	; 1
 48c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 490:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 494:	0e 94 a8 01 	call	0x350	; 0x350 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 498:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 49c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	51 f0       	breq	.+20     	; 0x4b8 <__DATA_REGION_LENGTH__+0xb8>
        *queue = (*queue)->next;
 4a4:	fc 01       	movw	r30, r24
 4a6:	24 81       	ldd	r18, Z+4	; 0x04
 4a8:	35 81       	ldd	r19, Z+5	; 0x05
 4aa:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4ae:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        current->function(current->arg);
        DISABLE();
        //lock(&MTX2);

        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4b2:	0e 94 bf 01 	call	0x37e	; 0x37e <dispatch>
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__DATA_REGION_LENGTH__+0xb8>
    }
    SETSTACK(&newp->context, &newp->stack);
 4ba:	e9 81       	ldd	r30, Y+1	; 0x01
 4bc:	fa 81       	ldd	r31, Y+2	; 0x02
 4be:	36 96       	adiw	r30, 0x06	; 6
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	87 59       	subi	r24, 0x97	; 151
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	91 8b       	std	Z+17, r25	; 0x11
 4ca:	80 8b       	std	Z+16, r24	; 0x10
 4cc:	93 8b       	std	Z+19, r25	; 0x13
 4ce:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 4d0:	60 e2       	ldi	r22, 0x20	; 32
 4d2:	71 e0       	ldi	r23, 0x01	; 1
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	0e 94 a8 01 	call	0x350	; 0x350 <enqueue>
    //unlock(&MTX2);
    ENABLE();
 4dc:	78 94       	sei
}
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <yield>:

void yield(void) {
	DISABLE();
 4e8:	f8 94       	cli
	enqueue(current, &readyQ);
 4ea:	60 e2       	ldi	r22, 0x20	; 32
 4ec:	71 e0       	ldi	r23, 0x01	; 1
 4ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 4f2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 4f6:	0e 94 a8 01 	call	0x350	; 0x350 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4fe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	59 f0       	breq	.+22     	; 0x51c <__stack+0x1d>
        *queue = (*queue)->next;
 506:	fc 01       	movw	r30, r24
 508:	24 81       	ldd	r18, Z+4	; 0x04
 50a:	35 81       	ldd	r19, Z+5	; 0x05
 50c:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 510:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 514:	0e 94 bf 01 	call	0x37e	; 0x37e <dispatch>
	ENABLE();
 518:	78 94       	sei
}
 51a:	08 95       	ret
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stack+0x1d>

0000051e <lock>:

void lock(mutex *m) {
    DISABLE();
 51e:	f8 94       	cli
    if (m->locked == 0) {
 520:	fc 01       	movw	r30, r24
 522:	20 81       	ld	r18, Z
 524:	31 81       	ldd	r19, Z+1	; 0x01
 526:	23 2b       	or	r18, r19
 528:	29 f4       	brne	.+10     	; 0x534 <lock+0x16>
        m->locked = 1;
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	31 83       	std	Z+1, r19	; 0x01
 530:	20 83       	st	Z, r18
 532:	1a c0       	rjmp	.+52     	; 0x568 <lock+0x4a>
    }
    else {
        //Add current thread to wait queue
        enqueue(current, &(m->waitQ));
 534:	bc 01       	movw	r22, r24
 536:	6e 5f       	subi	r22, 0xFE	; 254
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 53e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 542:	0e 94 a8 01 	call	0x350	; 0x350 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 546:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 54a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	51 f0       	breq	.+20     	; 0x566 <lock+0x48>
        *queue = (*queue)->next;
 552:	fc 01       	movw	r30, r24
 554:	24 81       	ldd	r18, Z+4	; 0x04
 556:	35 81       	ldd	r19, Z+5	; 0x05
 558:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 55c:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    else {
        //Add current thread to wait queue
        enqueue(current, &(m->waitQ));

        //And go to next thread
        dispatch(dequeue(&readyQ));
 560:	0e 94 bf 01 	call	0x37e	; 0x37e <dispatch>
 564:	01 c0       	rjmp	.+2      	; 0x568 <lock+0x4a>
 566:	ff cf       	rjmp	.-2      	; 0x566 <lock+0x48>
    }
    ENABLE();
 568:	78 94       	sei
 56a:	08 95       	ret

0000056c <unlock>:
}

void unlock(mutex *m) {
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
    DISABLE();
 570:	f8 94       	cli
    if (m->waitQ == NULL) {
 572:	fc 01       	movw	r30, r24
 574:	22 81       	ldd	r18, Z+2	; 0x02
 576:	33 81       	ldd	r19, Z+3	; 0x03
 578:	23 2b       	or	r18, r19
 57a:	19 f4       	brne	.+6      	; 0x582 <unlock+0x16>
        m->locked = 0;
 57c:	11 82       	std	Z+1, r1	; 0x01
 57e:	10 82       	st	Z, r1
 580:	16 c0       	rjmp	.+44     	; 0x5ae <unlock+0x42>
 582:	ec 01       	movw	r28, r24
    }
    else {
        // Add current thread to ready queue
        enqueue(current, &readyQ);
 584:	60 e2       	ldi	r22, 0x20	; 32
 586:	71 e0       	ldi	r23, 0x01	; 1
 588:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 58c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 590:	0e 94 a8 01 	call	0x350	; 0x350 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	41 f0       	breq	.+16     	; 0x5ac <unlock+0x40>
        *queue = (*queue)->next;
 59c:	fc 01       	movw	r30, r24
 59e:	24 81       	ldd	r18, Z+4	; 0x04
 5a0:	35 81       	ldd	r19, Z+5	; 0x05
 5a2:	3b 83       	std	Y+3, r19	; 0x03
 5a4:	2a 83       	std	Y+2, r18	; 0x02
    else {
        // Add current thread to ready queue
        enqueue(current, &readyQ);
        
        //And continue with any waiting threads
        dispatch(dequeue(&m->waitQ));
 5a6:	0e 94 bf 01 	call	0x37e	; 0x37e <dispatch>
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <unlock+0x42>
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <unlock+0x40>
    }
    ENABLE();
 5ae:	78 94       	sei
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <__divmodsi4>:
 5b6:	05 2e       	mov	r0, r21
 5b8:	97 fb       	bst	r25, 7
 5ba:	1e f4       	brtc	.+6      	; 0x5c2 <__divmodsi4+0xc>
 5bc:	00 94       	com	r0
 5be:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__negsi2>
 5c2:	57 fd       	sbrc	r21, 7
 5c4:	07 d0       	rcall	.+14     	; 0x5d4 <__divmodsi4_neg2>
 5c6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__udivmodsi4>
 5ca:	07 fc       	sbrc	r0, 7
 5cc:	03 d0       	rcall	.+6      	; 0x5d4 <__divmodsi4_neg2>
 5ce:	4e f4       	brtc	.+18     	; 0x5e2 <__divmodsi4_exit>
 5d0:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__negsi2>

000005d4 <__divmodsi4_neg2>:
 5d4:	50 95       	com	r21
 5d6:	40 95       	com	r20
 5d8:	30 95       	com	r19
 5da:	21 95       	neg	r18
 5dc:	3f 4f       	sbci	r19, 0xFF	; 255
 5de:	4f 4f       	sbci	r20, 0xFF	; 255
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255

000005e2 <__divmodsi4_exit>:
 5e2:	08 95       	ret

000005e4 <__negsi2>:
 5e4:	90 95       	com	r25
 5e6:	80 95       	com	r24
 5e8:	70 95       	com	r23
 5ea:	61 95       	neg	r22
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	08 95       	ret

000005f4 <__udivmodsi4>:
 5f4:	a1 e2       	ldi	r26, 0x21	; 33
 5f6:	1a 2e       	mov	r1, r26
 5f8:	aa 1b       	sub	r26, r26
 5fa:	bb 1b       	sub	r27, r27
 5fc:	fd 01       	movw	r30, r26
 5fe:	0d c0       	rjmp	.+26     	; 0x61a <__udivmodsi4_ep>

00000600 <__udivmodsi4_loop>:
 600:	aa 1f       	adc	r26, r26
 602:	bb 1f       	adc	r27, r27
 604:	ee 1f       	adc	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	a2 17       	cp	r26, r18
 60a:	b3 07       	cpc	r27, r19
 60c:	e4 07       	cpc	r30, r20
 60e:	f5 07       	cpc	r31, r21
 610:	20 f0       	brcs	.+8      	; 0x61a <__udivmodsi4_ep>
 612:	a2 1b       	sub	r26, r18
 614:	b3 0b       	sbc	r27, r19
 616:	e4 0b       	sbc	r30, r20
 618:	f5 0b       	sbc	r31, r21

0000061a <__udivmodsi4_ep>:
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	1a 94       	dec	r1
 624:	69 f7       	brne	.-38     	; 0x600 <__udivmodsi4_loop>
 626:	60 95       	com	r22
 628:	70 95       	com	r23
 62a:	80 95       	com	r24
 62c:	90 95       	com	r25
 62e:	9b 01       	movw	r18, r22
 630:	ac 01       	movw	r20, r24
 632:	bd 01       	movw	r22, r26
 634:	cf 01       	movw	r24, r30
 636:	08 95       	ret

00000638 <setjmp>:
 638:	dc 01       	movw	r26, r24
 63a:	2d 92       	st	X+, r2
 63c:	3d 92       	st	X+, r3
 63e:	4d 92       	st	X+, r4
 640:	5d 92       	st	X+, r5
 642:	6d 92       	st	X+, r6
 644:	7d 92       	st	X+, r7
 646:	8d 92       	st	X+, r8
 648:	9d 92       	st	X+, r9
 64a:	ad 92       	st	X+, r10
 64c:	bd 92       	st	X+, r11
 64e:	cd 92       	st	X+, r12
 650:	dd 92       	st	X+, r13
 652:	ed 92       	st	X+, r14
 654:	fd 92       	st	X+, r15
 656:	0d 93       	st	X+, r16
 658:	1d 93       	st	X+, r17
 65a:	cd 93       	st	X+, r28
 65c:	dd 93       	st	X+, r29
 65e:	ff 91       	pop	r31
 660:	ef 91       	pop	r30
 662:	8d b7       	in	r24, 0x3d	; 61
 664:	8d 93       	st	X+, r24
 666:	8e b7       	in	r24, 0x3e	; 62
 668:	8d 93       	st	X+, r24
 66a:	8f b7       	in	r24, 0x3f	; 63
 66c:	8d 93       	st	X+, r24
 66e:	ed 93       	st	X+, r30
 670:	fd 93       	st	X+, r31
 672:	88 27       	eor	r24, r24
 674:	99 27       	eor	r25, r25
 676:	09 94       	ijmp

00000678 <longjmp>:
 678:	dc 01       	movw	r26, r24
 67a:	cb 01       	movw	r24, r22
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	91 05       	cpc	r25, r1
 680:	81 1d       	adc	r24, r1
 682:	2d 90       	ld	r2, X+
 684:	3d 90       	ld	r3, X+
 686:	4d 90       	ld	r4, X+
 688:	5d 90       	ld	r5, X+
 68a:	6d 90       	ld	r6, X+
 68c:	7d 90       	ld	r7, X+
 68e:	8d 90       	ld	r8, X+
 690:	9d 90       	ld	r9, X+
 692:	ad 90       	ld	r10, X+
 694:	bd 90       	ld	r11, X+
 696:	cd 90       	ld	r12, X+
 698:	dd 90       	ld	r13, X+
 69a:	ed 90       	ld	r14, X+
 69c:	fd 90       	ld	r15, X+
 69e:	0d 91       	ld	r16, X+
 6a0:	1d 91       	ld	r17, X+
 6a2:	cd 91       	ld	r28, X+
 6a4:	dd 91       	ld	r29, X+
 6a6:	ed 91       	ld	r30, X+
 6a8:	fd 91       	ld	r31, X+
 6aa:	0d 90       	ld	r0, X+
 6ac:	f8 94       	cli
 6ae:	fe bf       	out	0x3e, r31	; 62
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	ed bf       	out	0x3d, r30	; 61
 6b4:	ed 91       	ld	r30, X+
 6b6:	fd 91       	ld	r31, X+
 6b8:	09 94       	ijmp

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
