
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000045e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c35  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000923  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cf  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c1  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000758  00000000  00000000  00002631  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e5       	ldi	r30, 0x5E	; 94
  70:	f4 e0       	ldi	r31, 0x04	; 4
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a6 31       	cpi	r26, 0x16	; 22
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  82:	0c 94 2d 02 	jmp	0x45a	; 0x45a <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <writeChar>:
		if (((PINB >> 7) & 0x1) == 0) {
			if (!prev) {
				// Shift the displays
				LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
			}
			prev = true;
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	66 30       	cpi	r22, 0x06	; 6
  94:	71 05       	cpc	r23, r1
  96:	08 f0       	brcs	.+2      	; 0x9a <writeChar+0x10>
  98:	4b c0       	rjmp	.+150    	; 0x130 <writeChar+0xa6>
  9a:	80 53       	subi	r24, 0x30	; 48
  9c:	8a 30       	cpi	r24, 0x0A	; 10
  9e:	08 f0       	brcs	.+2      	; 0xa2 <writeChar+0x18>
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	fb 01       	movw	r30, r22
  a4:	f5 95       	asr	r31
  a6:	e7 95       	ror	r30
  a8:	e4 51       	subi	r30, 0x14	; 20
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	60 ff       	sbrs	r22, 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <writeChar+0x2a>
  b0:	50 ef       	ldi	r21, 0xF0	; 240
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <writeChar+0x2c>
  b4:	5f e0       	ldi	r21, 0x0F	; 15
  b6:	a8 2f       	mov	r26, r24
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	aa 0f       	add	r26, r26
  bc:	bb 1f       	adc	r27, r27
  be:	a0 50       	subi	r26, 0x00	; 0
  c0:	bf 4f       	sbci	r27, 0xFF	; 255
  c2:	cd 91       	ld	r28, X+
  c4:	dc 91       	ld	r29, X
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	15 2f       	mov	r17, r21
  d0:	10 95       	com	r17
  d2:	01 2f       	mov	r16, r17
  d4:	06 66       	ori	r16, 0x66	; 102
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <writeChar+0x56>
  d8:	14 96       	adiw	r26, 0x04	; 4
  da:	35 96       	adiw	r30, 0x05	; 5
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	ce 01       	movw	r24, r28
  e2:	0a 2e       	mov	r0, r26
  e4:	02 c0       	rjmp	.+4      	; 0xea <writeChar+0x60>
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <writeChar+0x5c>
  ee:	48 2f       	mov	r20, r24
  f0:	4f 70       	andi	r20, 0x0F	; 15
  f2:	61 30       	cpi	r22, 0x01	; 1
  f4:	71 05       	cpc	r23, r1
  f6:	69 f4       	brne	.+26     	; 0x112 <writeChar+0x88>
  f8:	80 81       	ld	r24, Z
  fa:	90 2f       	mov	r25, r16
  fc:	98 23       	and	r25, r24
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	48 9f       	mul	r20, r24
 102:	90 01       	movw	r18, r0
 104:	11 24       	eor	r1, r1
 106:	84 2f       	mov	r24, r20
 108:	82 2b       	or	r24, r18
 10a:	85 23       	and	r24, r21
 10c:	89 2b       	or	r24, r25
 10e:	80 83       	st	Z, r24
 110:	e3 cf       	rjmp	.-58     	; 0xd8 <writeChar+0x4e>
 112:	80 81       	ld	r24, Z
 114:	91 2f       	mov	r25, r17
 116:	98 23       	and	r25, r24
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	48 9f       	mul	r20, r24
 11c:	90 01       	movw	r18, r0
 11e:	11 24       	eor	r1, r1
 120:	84 2f       	mov	r24, r20
 122:	82 2b       	or	r24, r18
 124:	85 23       	and	r24, r21
 126:	89 2b       	or	r24, r25
 128:	80 83       	st	Z, r24
 12a:	64 30       	cpi	r22, 0x04	; 4
 12c:	71 05       	cpc	r23, r1
 12e:	a4 f2       	brlt	.-88     	; 0xd8 <writeChar+0x4e>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <writeLong>:
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	6b 01       	movw	r12, r22
 152:	7c 01       	movw	r14, r24
 154:	c5 e0       	ldi	r28, 0x05	; 5
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	0f 2e       	mov	r0, r31
 15a:	fa e0       	ldi	r31, 0x0A	; 10
 15c:	8f 2e       	mov	r8, r31
 15e:	91 2c       	mov	r9, r1
 160:	a1 2c       	mov	r10, r1
 162:	b1 2c       	mov	r11, r1
 164:	f0 2d       	mov	r31, r0
 166:	c7 01       	movw	r24, r14
 168:	b6 01       	movw	r22, r12
 16a:	a5 01       	movw	r20, r10
 16c:	94 01       	movw	r18, r8
 16e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__divmodsi4>
 172:	16 2f       	mov	r17, r22
 174:	1c 14       	cp	r1, r12
 176:	1d 04       	cpc	r1, r13
 178:	1e 04       	cpc	r1, r14
 17a:	1f 04       	cpc	r1, r15
 17c:	2c f4       	brge	.+10     	; 0x188 <writeLong+0x4e>
 17e:	be 01       	movw	r22, r28
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	81 0f       	add	r24, r17
 184:	0e 94 45 00 	call	0x8a	; 0x8a <writeChar>
 188:	c7 01       	movw	r24, r14
 18a:	b6 01       	movw	r22, r12
 18c:	61 1b       	sub	r22, r17
 18e:	71 09       	sbc	r23, r1
 190:	81 09       	sbc	r24, r1
 192:	91 09       	sbc	r25, r1
 194:	a5 01       	movw	r20, r10
 196:	94 01       	movw	r18, r8
 198:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__divmodsi4>
 19c:	69 01       	movw	r12, r18
 19e:	7a 01       	movw	r14, r20
 1a0:	21 97       	sbiw	r28, 0x01	; 1
 1a2:	08 f7       	brcc	.-62     	; 0x166 <writeLong+0x2c>
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	bf 90       	pop	r11
 1b4:	af 90       	pop	r10
 1b6:	9f 90       	pop	r9
 1b8:	8f 90       	pop	r8
 1ba:	08 95       	ret

000001bc <is_prime>:
 1bc:	8f 92       	push	r8
 1be:	9f 92       	push	r9
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	4b 01       	movw	r8, r22
 1ce:	5c 01       	movw	r10, r24
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	88 16       	cp	r8, r24
 1d4:	91 04       	cpc	r9, r1
 1d6:	a1 04       	cpc	r10, r1
 1d8:	b1 04       	cpc	r11, r1
 1da:	94 f1       	brlt	.+100    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 1dc:	d5 01       	movw	r26, r10
 1de:	c4 01       	movw	r24, r8
 1e0:	81 70       	andi	r24, 0x01	; 1
 1e2:	99 27       	eor	r25, r25
 1e4:	aa 27       	eor	r26, r26
 1e6:	b0 78       	andi	r27, 0x80	; 128
 1e8:	bb 23       	and	r27, r27
 1ea:	54 f4       	brge	.+20     	; 0x200 <__EEPROM_REGION_LENGTH__>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	a1 09       	sbc	r26, r1
 1f0:	b1 09       	sbc	r27, r1
 1f2:	8e 6f       	ori	r24, 0xFE	; 254
 1f4:	9f 6f       	ori	r25, 0xFF	; 255
 1f6:	af 6f       	ori	r26, 0xFF	; 255
 1f8:	bf 6f       	ori	r27, 0xFF	; 255
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	a1 1d       	adc	r26, r1
 1fe:	b1 1d       	adc	r27, r1
 200:	89 2b       	or	r24, r25
 202:	8a 2b       	or	r24, r26
 204:	8b 2b       	or	r24, r27
 206:	f1 f0       	breq	.+60     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 208:	c1 2c       	mov	r12, r1
 20a:	d1 2c       	mov	r13, r1
 20c:	76 01       	movw	r14, r12
 20e:	68 94       	set
 210:	c1 f8       	bld	r12, 1
 212:	0a c0       	rjmp	.+20     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	a7 01       	movw	r20, r14
 21a:	96 01       	movw	r18, r12
 21c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__divmodsi4>
 220:	67 2b       	or	r22, r23
 222:	68 2b       	or	r22, r24
 224:	69 2b       	or	r22, r25
 226:	81 f0       	breq	.+32     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	c8 1a       	sub	r12, r24
 22c:	d8 0a       	sbc	r13, r24
 22e:	e8 0a       	sbc	r14, r24
 230:	f8 0a       	sbc	r15, r24
 232:	8c 14       	cp	r8, r12
 234:	9d 04       	cpc	r9, r13
 236:	ae 04       	cpc	r10, r14
 238:	bf 04       	cpc	r11, r15
 23a:	61 f7       	brne	.-40     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	05 c0       	rjmp	.+10     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	03 c0       	rjmp	.+6      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	01 c0       	rjmp	.+2      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	08 95       	ret

0000025c <primes2>:
		}
	}
}

	
void primes2(long i) {
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	6b 01       	movw	r12, r22
 266:	7c 01       	movw	r14, r24
	if (is_prime(i)) {
 268:	0e 94 de 00 	call	0x1bc	; 0x1bc <is_prime>
 26c:	88 23       	and	r24, r24
 26e:	21 f0       	breq	.+8      	; 0x278 <primes2+0x1c>
		writeLong(i);
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 9d 00 	call	0x13a	; 0x13a <writeLong>
	}
	return;
}
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <blink2>:

blinkData blink2(blinkData bd) {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	2c 97       	sbiw	r28, 0x0c	; 12
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	4f 83       	std	Y+7, r20	; 0x07
 298:	58 87       	std	Y+8, r21	; 0x08
 29a:	69 87       	std	Y+9, r22	; 0x09
 29c:	7a 87       	std	Y+10, r23	; 0x0a
 29e:	8b 87       	std	Y+11, r24	; 0x0b
 2a0:	9c 87       	std	Y+12, r25	; 0x0c
 2a2:	2f 81       	ldd	r18, Y+7	; 0x07
 2a4:	38 85       	ldd	r19, Y+8	; 0x08
 2a6:	69 85       	ldd	r22, Y+9	; 0x09
 2a8:	7a 85       	ldd	r23, Y+10	; 0x0a

	uint16_t currVal = (uint16_t)TCNT1;
 2aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	
	// Covers cases where counter has wrapped around and the wrap was expected
	// as well as a case where the counter was close to wrapping yet did not have
	// time to expect the next value to wrap.

	if (((currVal >= bd.nextVal) && (~bd.needsWrapped || bd.wrapped)) || (bd.wrapped && ~bd.needsWrapped)) {
 2b2:	42 17       	cp	r20, r18
 2b4:	53 07       	cpc	r21, r19
 2b6:	10 f4       	brcc	.+4      	; 0x2bc <blink2+0x3a>
 2b8:	99 23       	and	r25, r25
 2ba:	a9 f0       	breq	.+42     	; 0x2e6 <blink2+0x64>
		bd.nextVal = currVal + 31250/2;
 2bc:	9a 01       	movw	r18, r20
 2be:	27 5f       	subi	r18, 0xF7	; 247
 2c0:	32 4c       	sbci	r19, 0xC2	; 194
		if (bd.nextVal > (2^16)) {
 2c2:	23 31       	cpi	r18, 0x13	; 19
 2c4:	31 05       	cpc	r19, r1
 2c6:	28 f0       	brcs	.+10     	; 0x2d2 <blink2+0x50>
				
			// If wrap will occur
			bd.nextVal = bd.nextVal - (2^16);
 2c8:	22 51       	subi	r18, 0x12	; 18
 2ca:	31 09       	sbc	r19, r1
			bd.needsWrapped = true;
			bd.wrapped = false;
 2cc:	90 e0       	ldi	r25, 0x00	; 0
		bd.nextVal = currVal + 31250/2;
		if (bd.nextVal > (2^16)) {
				
			// If wrap will occur
			bd.nextVal = bd.nextVal - (2^16);
			bd.needsWrapped = true;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <blink2+0x52>
			bd.wrapped = false;

		} else {
			bd.needsWrapped = false;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
		}
		 
			
		// Negate bit 1
		LCDDR0 = (LCDDR0 & 0xfd) | ((~LCDDR0) & 0x2);
 2d4:	ac ee       	ldi	r26, 0xEC	; 236
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	fc 91       	ld	r31, X
 2da:	ec 91       	ld	r30, X
 2dc:	e0 95       	com	r30
 2de:	e2 70       	andi	r30, 0x02	; 2
 2e0:	fd 7f       	andi	r31, 0xFD	; 253
 2e2:	ef 2b       	or	r30, r31
 2e4:	ec 93       	st	X, r30
	}
	if (currVal < bd.oldVal) {
 2e6:	46 17       	cp	r20, r22
 2e8:	57 07       	cpc	r21, r23
 2ea:	08 f4       	brcc	.+2      	; 0x2ee <blink2+0x6c>
		bd.wrapped = true;
 2ec:	91 e0       	ldi	r25, 0x01	; 1
	}

	bd.oldVal = currVal;
	return bd;
 2ee:	3a 83       	std	Y+2, r19	; 0x02
 2f0:	29 83       	std	Y+1, r18	; 0x01
 2f2:	5c 83       	std	Y+4, r21	; 0x04
 2f4:	4b 83       	std	Y+3, r20	; 0x03
 2f6:	3a 81       	ldd	r19, Y+2	; 0x02
 2f8:	5c 81       	ldd	r21, Y+4	; 0x04
}
 2fa:	68 2f       	mov	r22, r24
 2fc:	79 2f       	mov	r23, r25
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2c 96       	adiw	r28, 0x0c	; 12
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <button2>:


bool button2(bool prev) {
	if (((PINB >> 7) & 0x1) == 0) {
 314:	1f 99       	sbic	0x03, 7	; 3
 316:	0d c0       	rjmp	.+26     	; 0x332 <button2+0x1e>
		if (!prev) {
 318:	81 11       	cpse	r24, r1
 31a:	0c c0       	rjmp	.+24     	; 0x334 <button2+0x20>
			// Shift the displays
			LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
 31c:	ec ee       	ldi	r30, 0xEC	; 236
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	90 81       	ld	r25, Z
 322:	80 81       	ld	r24, Z
 324:	80 95       	com	r24
 326:	84 74       	andi	r24, 0x44	; 68
 328:	9b 7b       	andi	r25, 0xBB	; 187
 32a:	89 2b       	or	r24, r25
 32c:	80 83       	st	Z, r24
		}
		prev = true;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
		} else {
		prev = false;
 332:	80 e0       	ldi	r24, 0x00	; 0
	}
	return prev;
	
}
 334:	08 95       	ret

00000336 <LCD_Init>:
	

void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 336:	8f e0       	ldi	r24, 0x0F	; 15
 338:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
 33c:	87 eb       	ldi	r24, 0xB7	; 183
 33e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 342:	87 e0       	ldi	r24, 0x07	; 7
 344:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 348:	80 ec       	ldi	r24, 0xC0	; 192
 34a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	
	//Part 2
	TCCR1B = (1 << CS12);
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
 354:	08 95       	ret

00000356 <main>:
	return;
}


int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	00 d0       	rcall	.+0      	; 0x35c <main+0x6>
 35c:	00 d0       	rcall	.+0      	; 0x35e <main+0x8>
 35e:	00 d0       	rcall	.+0      	; 0x360 <main+0xa>
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 0x80;
 364:	e1 e6       	ldi	r30, 0x61	; 97
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 e8       	ldi	r24, 0x80	; 128
 36a:	80 83       	st	Z, r24
	CLKPR = 0x00;
 36c:	10 82       	st	Z, r1
	PORTB = PORTB | (1 << PB7);
 36e:	2f 9a       	sbi	0x05, 7	; 5
    LCD_Init();
 370:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Init>
	//writeChar('0', 0);
	//writeLong(123456789);
	//primes();
	//blink();
	//button();
	LCDDR0 = LCDDR0 | (1 << 2);
 374:	ec ee       	ldi	r30, 0xEC	; 236
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	80 83       	st	Z, r24
    long i = 25000;
	bool prev = false;
	blinkData bd;
	bd.needsWrapped = false;
 37e:	1d 82       	std	Y+5, r1	; 0x05
	bd.wrapped = false;
 380:	1e 82       	std	Y+6, r1	; 0x06
	bd.nextVal = 32150/2;
 382:	8b ec       	ldi	r24, 0xCB	; 203
 384:	9e e3       	ldi	r25, 0x3E	; 62
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
	bd.oldVal = 0;
 38a:	1c 82       	std	Y+4, r1	; 0x04
 38c:	1b 82       	std	Y+3, r1	; 0x03
	//primes();
	//blink();
	//button();
	LCDDR0 = LCDDR0 | (1 << 2);
    long i = 25000;
	bool prev = false;
 38e:	10 e0       	ldi	r17, 0x00	; 0
	//writeLong(123456789);
	//primes();
	//blink();
	//button();
	LCDDR0 = LCDDR0 | (1 << 2);
    long i = 25000;
 390:	0f 2e       	mov	r0, r31
 392:	f8 ea       	ldi	r31, 0xA8	; 168
 394:	cf 2e       	mov	r12, r31
 396:	f1 e6       	ldi	r31, 0x61	; 97
 398:	df 2e       	mov	r13, r31
 39a:	e1 2c       	mov	r14, r1
 39c:	f1 2c       	mov	r15, r1
 39e:	f0 2d       	mov	r31, r0
	bd.wrapped = false;
	bd.nextVal = 32150/2;
	bd.oldVal = 0;
    while (1) 
    {
		primes2(i);
 3a0:	c7 01       	movw	r24, r14
 3a2:	b6 01       	movw	r22, r12
 3a4:	0e 94 2e 01 	call	0x25c	; 0x25c <primes2>
		i += 1;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	c8 1a       	sub	r12, r24
 3ac:	d8 0a       	sbc	r13, r24
 3ae:	e8 0a       	sbc	r14, r24
 3b0:	f8 0a       	sbc	r15, r24
		bd = blink2(bd);
 3b2:	49 81       	ldd	r20, Y+1	; 0x01
 3b4:	5a 81       	ldd	r21, Y+2	; 0x02
 3b6:	6b 81       	ldd	r22, Y+3	; 0x03
 3b8:	7c 81       	ldd	r23, Y+4	; 0x04
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
 3bc:	9e 81       	ldd	r25, Y+6	; 0x06
 3be:	0e 94 41 01 	call	0x282	; 0x282 <blink2>
 3c2:	29 83       	std	Y+1, r18	; 0x01
 3c4:	3a 83       	std	Y+2, r19	; 0x02
 3c6:	4b 83       	std	Y+3, r20	; 0x03
 3c8:	5c 83       	std	Y+4, r21	; 0x04
 3ca:	6d 83       	std	Y+5, r22	; 0x05
 3cc:	7e 83       	std	Y+6, r23	; 0x06
		prev = button2(prev);
 3ce:	81 2f       	mov	r24, r17
 3d0:	0e 94 8a 01 	call	0x314	; 0x314 <button2>
 3d4:	18 2f       	mov	r17, r24
 3d6:	e4 cf       	rjmp	.-56     	; 0x3a0 <main+0x4a>

000003d8 <__divmodsi4>:
 3d8:	05 2e       	mov	r0, r21
 3da:	97 fb       	bst	r25, 7
 3dc:	1e f4       	brtc	.+6      	; 0x3e4 <__divmodsi4+0xc>
 3de:	00 94       	com	r0
 3e0:	0e 94 03 02 	call	0x406	; 0x406 <__negsi2>
 3e4:	57 fd       	sbrc	r21, 7
 3e6:	07 d0       	rcall	.+14     	; 0x3f6 <__divmodsi4_neg2>
 3e8:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 3ec:	07 fc       	sbrc	r0, 7
 3ee:	03 d0       	rcall	.+6      	; 0x3f6 <__divmodsi4_neg2>
 3f0:	4e f4       	brtc	.+18     	; 0x404 <__divmodsi4_exit>
 3f2:	0c 94 03 02 	jmp	0x406	; 0x406 <__negsi2>

000003f6 <__divmodsi4_neg2>:
 3f6:	50 95       	com	r21
 3f8:	40 95       	com	r20
 3fa:	30 95       	com	r19
 3fc:	21 95       	neg	r18
 3fe:	3f 4f       	sbci	r19, 0xFF	; 255
 400:	4f 4f       	sbci	r20, 0xFF	; 255
 402:	5f 4f       	sbci	r21, 0xFF	; 255

00000404 <__divmodsi4_exit>:
 404:	08 95       	ret

00000406 <__negsi2>:
 406:	90 95       	com	r25
 408:	80 95       	com	r24
 40a:	70 95       	com	r23
 40c:	61 95       	neg	r22
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8f 4f       	sbci	r24, 0xFF	; 255
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	08 95       	ret

00000416 <__udivmodsi4>:
 416:	a1 e2       	ldi	r26, 0x21	; 33
 418:	1a 2e       	mov	r1, r26
 41a:	aa 1b       	sub	r26, r26
 41c:	bb 1b       	sub	r27, r27
 41e:	fd 01       	movw	r30, r26
 420:	0d c0       	rjmp	.+26     	; 0x43c <__udivmodsi4_ep>

00000422 <__udivmodsi4_loop>:
 422:	aa 1f       	adc	r26, r26
 424:	bb 1f       	adc	r27, r27
 426:	ee 1f       	adc	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	a2 17       	cp	r26, r18
 42c:	b3 07       	cpc	r27, r19
 42e:	e4 07       	cpc	r30, r20
 430:	f5 07       	cpc	r31, r21
 432:	20 f0       	brcs	.+8      	; 0x43c <__udivmodsi4_ep>
 434:	a2 1b       	sub	r26, r18
 436:	b3 0b       	sbc	r27, r19
 438:	e4 0b       	sbc	r30, r20
 43a:	f5 0b       	sbc	r31, r21

0000043c <__udivmodsi4_ep>:
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	1a 94       	dec	r1
 446:	69 f7       	brne	.-38     	; 0x422 <__udivmodsi4_loop>
 448:	60 95       	com	r22
 44a:	70 95       	com	r23
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	bd 01       	movw	r22, r26
 456:	cf 01       	movw	r24, r30
 458:	08 95       	ret

0000045a <_exit>:
 45a:	f8 94       	cli

0000045c <__stop_program>:
 45c:	ff cf       	rjmp	.-2      	; 0x45c <__stop_program>
