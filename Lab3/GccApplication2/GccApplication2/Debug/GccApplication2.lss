
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000077e  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  00800122  00800122  00000834  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001220  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae9  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068a  00000000  00000000  0000264d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b0  00000000  00000000  0000349a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e7       	ldi	r30, 0x7E	; 126
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a2 32       	cpi	r26, 0x22	; 34
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a2 e2       	ldi	r26, 0x22	; 34
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ab 34       	cpi	r26, 0x4B	; 75
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  92:	0c 94 bd 03 	jmp	0x77a	; 0x77a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
}

void blink() {
	while(1) {
		lock(&MTX_BLK);
		LCDDR0 = (LCDDR0 & 0xfd) | ((~LCDDR0) & 0x2);
  9a:	cc ee       	ldi	r28, 0xEC	; 236
  9c:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void blink() {
	while(1) {
		lock(&MTX_BLK);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lock>
		LCDDR0 = (LCDDR0 & 0xfd) | ((~LCDDR0) & 0x2);
  a6:	98 81       	ld	r25, Y
  a8:	88 81       	ld	r24, Y
  aa:	80 95       	com	r24
  ac:	82 70       	andi	r24, 0x02	; 2
  ae:	9d 7f       	andi	r25, 0xFD	; 253
  b0:	89 2b       	or	r24, r25
  b2:	88 83       	st	Y, r24
  b4:	f4 cf       	rjmp	.-24     	; 0x9e <blink+0x4>

000000b6 <LCD_Init>:
long numPressed = 0;
bool prev = false;

void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
  bc:	87 eb       	ldi	r24, 0xB7	; 183
  be:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  ce:	08 95       	ret

000000d0 <writeChar>:
	bool wrapped;
}blinkData; 



void writeChar(char ch, int pos) {
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
  d8:	66 30       	cpi	r22, 0x06	; 6
  da:	71 05       	cpc	r23, r1
  dc:	08 f0       	brcs	.+2      	; 0xe0 <writeChar+0x10>
  de:	4b c0       	rjmp	.+150    	; 0x176 <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
  e0:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
  e2:	8a 30       	cpi	r24, 0x0A	; 10
  e4:	08 f0       	brcs	.+2      	; 0xe8 <writeChar+0x18>
		intCh = 10;
  e6:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
  e8:	fb 01       	movw	r30, r22
  ea:	f5 95       	asr	r31
  ec:	e7 95       	ror	r30
  ee:	e4 51       	subi	r30, 0x14	; 20
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
  f2:	60 ff       	sbrs	r22, 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
  f6:	50 ef       	ldi	r21, 0xF0	; 240
  f8:	01 c0       	rjmp	.+2      	; 0xfc <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
  fa:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
  fc:	a8 2f       	mov	r26, r24
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	aa 0f       	add	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	a8 5f       	subi	r26, 0xF8	; 248
 106:	be 4f       	sbci	r27, 0xFE	; 254
 108:	cd 91       	ld	r28, X+
 10a:	dc 91       	ld	r29, X
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 114:	15 2f       	mov	r17, r21
 116:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 118:	01 2f       	mov	r16, r17
 11a:	06 66       	ori	r16, 0x66	; 102
 11c:	04 c0       	rjmp	.+8      	; 0x126 <writeChar+0x56>
 11e:	14 96       	adiw	r26, 0x04	; 4
 120:	35 96       	adiw	r30, 0x05	; 5
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
 126:	ce 01       	movw	r24, r28
 128:	0a 2e       	mov	r0, r26
 12a:	02 c0       	rjmp	.+4      	; 0x130 <writeChar+0x60>
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <writeChar+0x5c>
 134:	48 2f       	mov	r20, r24
 136:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
 138:	61 30       	cpi	r22, 0x01	; 1
 13a:	71 05       	cpc	r23, r1
 13c:	69 f4       	brne	.+26     	; 0x158 <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 13e:	80 81       	ld	r24, Z
 140:	90 2f       	mov	r25, r16
 142:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 144:	80 e1       	ldi	r24, 0x10	; 16
 146:	48 9f       	mul	r20, r24
 148:	90 01       	movw	r18, r0
 14a:	11 24       	eor	r1, r1
 14c:	84 2f       	mov	r24, r20
 14e:	82 2b       	or	r24, r18
 150:	85 23       	and	r24, r21
 152:	89 2b       	or	r24, r25
 154:	80 83       	st	Z, r24
 156:	e3 cf       	rjmp	.-58     	; 0x11e <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 158:	80 81       	ld	r24, Z
 15a:	91 2f       	mov	r25, r17
 15c:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 15e:	80 e1       	ldi	r24, 0x10	; 16
 160:	48 9f       	mul	r20, r24
 162:	90 01       	movw	r18, r0
 164:	11 24       	eor	r1, r1
 166:	84 2f       	mov	r24, r20
 168:	82 2b       	or	r24, r18
 16a:	85 23       	and	r24, r21
 16c:	89 2b       	or	r24, r25
 16e:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
 170:	64 30       	cpi	r22, 0x04	; 4
 172:	71 05       	cpc	r23, r1
 174:	a4 f2       	brlt	.-88     	; 0x11e <writeChar+0x4e>

	}
	return;
	
	
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	08 95       	ret

00000180 <is_prime>:

bool is_prime(long i) {
 180:	8f 92       	push	r8
 182:	9f 92       	push	r9
 184:	af 92       	push	r10
 186:	bf 92       	push	r11
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	4b 01       	movw	r8, r22
 192:	5c 01       	movw	r10, r24
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	88 16       	cp	r8, r24
 198:	91 04       	cpc	r9, r1
 19a:	a1 04       	cpc	r10, r1
 19c:	b1 04       	cpc	r11, r1
 19e:	94 f1       	brlt	.+100    	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
		if (i % j == 0) {
 1a0:	d5 01       	movw	r26, r10
 1a2:	c4 01       	movw	r24, r8
 1a4:	81 70       	andi	r24, 0x01	; 1
 1a6:	99 27       	eor	r25, r25
 1a8:	aa 27       	eor	r26, r26
 1aa:	b0 78       	andi	r27, 0x80	; 128
 1ac:	bb 23       	and	r27, r27
 1ae:	54 f4       	brge	.+20     	; 0x1c4 <is_prime+0x44>
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	a1 09       	sbc	r26, r1
 1b4:	b1 09       	sbc	r27, r1
 1b6:	8e 6f       	ori	r24, 0xFE	; 254
 1b8:	9f 6f       	ori	r25, 0xFF	; 255
 1ba:	af 6f       	ori	r26, 0xFF	; 255
 1bc:	bf 6f       	ori	r27, 0xFF	; 255
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	a1 1d       	adc	r26, r1
 1c2:	b1 1d       	adc	r27, r1
 1c4:	89 2b       	or	r24, r25
 1c6:	8a 2b       	or	r24, r26
 1c8:	8b 2b       	or	r24, r27
 1ca:	f1 f0       	breq	.+60     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 1cc:	c1 2c       	mov	r12, r1
 1ce:	d1 2c       	mov	r13, r1
 1d0:	76 01       	movw	r14, r12
 1d2:	68 94       	set
 1d4:	c1 f8       	bld	r12, 1
 1d6:	0a c0       	rjmp	.+20     	; 0x1ec <is_prime+0x6c>
 1d8:	c5 01       	movw	r24, r10
 1da:	b4 01       	movw	r22, r8
 1dc:	a7 01       	movw	r20, r14
 1de:	96 01       	movw	r18, r12
 1e0:	0e 94 3b 03 	call	0x676	; 0x676 <__divmodsi4>
 1e4:	67 2b       	or	r22, r23
 1e6:	68 2b       	or	r22, r24
 1e8:	69 2b       	or	r22, r25
 1ea:	81 f0       	breq	.+32     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
}

bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	c8 1a       	sub	r12, r24
 1f0:	d8 0a       	sbc	r13, r24
 1f2:	e8 0a       	sbc	r14, r24
 1f4:	f8 0a       	sbc	r15, r24
 1f6:	8c 14       	cp	r8, r12
 1f8:	9d 04       	cpc	r9, r13
 1fa:	ae 04       	cpc	r10, r14
 1fc:	bf 04       	cpc	r11, r15
 1fe:	61 f7       	brne	.-40     	; 0x1d8 <is_prime+0x58>
		if (i % j == 0) {
			return false;
		}
	}
	return true;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	05 c0       	rjmp	.+10     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	03 c0       	rjmp	.+6      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
		if (i % j == 0) {
			return false;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	01 c0       	rjmp	.+2      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 20c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	af 90       	pop	r10
 21a:	9f 90       	pop	r9
 21c:	8f 90       	pop	r8
 21e:	08 95       	ret

00000220 <printAt>:

void printAt(long num, int pos) {
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <printAt+0x12>
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	6b 01       	movw	r12, r22
 238:	7c 01       	movw	r14, r24
 23a:	8a 01       	movw	r16, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 23c:	24 e6       	ldi	r18, 0x64	; 100
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 3b 03 	call	0x676	; 0x676 <__divmodsi4>
 248:	2a e0       	ldi	r18, 0x0A	; 10
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 3b 03 	call	0x676	; 0x676 <__divmodsi4>
 254:	b8 01       	movw	r22, r16
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	82 0f       	add	r24, r18
 25a:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
	for(volatile int i = 0; i < 1000; i++);
 25e:	1a 82       	std	Y+2, r1	; 0x02
 260:	19 82       	std	Y+1, r1	; 0x01
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	88 3e       	cpi	r24, 0xE8	; 232
 268:	93 40       	sbci	r25, 0x03	; 3
 26a:	54 f4       	brge	.+20     	; 0x280 <printAt+0x60>
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	88 3e       	cpi	r24, 0xE8	; 232
 27c:	93 40       	sbci	r25, 0x03	; 3
 27e:	b4 f3       	brlt	.-20     	; 0x26c <printAt+0x4c>
    pp++;
    writeChar( num % 10 + '0', pp);
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	c7 01       	movw	r24, r14
 286:	b6 01       	movw	r22, r12
 288:	2a e0       	ldi	r18, 0x0A	; 10
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	0e 94 3b 03 	call	0x676	; 0x676 <__divmodsi4>
 294:	86 2f       	mov	r24, r22
 296:	b8 01       	movw	r22, r16
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>

}
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	cf 90       	pop	r12
 2b2:	08 95       	ret

000002b4 <button>:

void button() {
	while(1) {
		// Shift the displays
		lock(&MTX_BTN);
		LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
 2b4:	cc ee       	ldi	r28, 0xEC	; 236
 2b6:	d0 e0       	ldi	r29, 0x00	; 0


void button() {
	while(1) {
		// Shift the displays
		lock(&MTX_BTN);
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lock>
		LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
 2c0:	98 81       	ld	r25, Y
 2c2:	88 81       	ld	r24, Y
 2c4:	80 95       	com	r24
 2c6:	84 74       	andi	r24, 0x44	; 68
 2c8:	9b 7b       	andi	r25, 0xBB	; 187
 2ca:	89 2b       	or	r24, r25
 2cc:	88 83       	st	Y, r24
		numPressed += 1;
 2ce:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 2d2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 2d6:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <__data_end+0x2>
 2da:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <__data_end+0x3>
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <__data_end>
 2ee:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <__data_end+0x1>
 2f2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end+0x2>
 2f6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x3>
		printAt(numPressed, 4);
 2fa:	44 e0       	ldi	r20, 0x04	; 4
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	0e 94 10 01 	call	0x220	; 0x220 <printAt>
 302:	da cf       	rjmp	.-76     	; 0x2b8 <button+0x4>

00000304 <primes>:
    writeChar( num % 10 + '0', pp);

}

void primes() {
    long i = 0;
 304:	c1 2c       	mov	r12, r1
 306:	d1 2c       	mov	r13, r1
 308:	76 01       	movw	r14, r12
	while(1) {
		if (is_prime(i)) {
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	0e 94 c0 00 	call	0x180	; 0x180 <is_prime>
 312:	88 23       	and	r24, r24
 314:	31 f0       	breq	.+12     	; 0x322 <primes+0x1e>
			printAt(i, 0);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	c7 01       	movw	r24, r14
 31c:	b6 01       	movw	r22, r12
 31e:	0e 94 10 01 	call	0x220	; 0x220 <printAt>
		}
		i += 1;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	c8 1a       	sub	r12, r24
 326:	d8 0a       	sbc	r13, r24
 328:	e8 0a       	sbc	r14, r24
 32a:	f8 0a       	sbc	r15, r24
	}
 32c:	ee cf       	rjmp	.-36     	; 0x30a <primes+0x6>

0000032e <__vector_7>:



}

ISR(TIMER1_COMPA_vect) { //Blink
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	unlock(&MTX_BLK);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 0a 03 	call	0x614	; 0x614 <unlock>
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <__vector_3>:

ISR(PCINT1_vect) { //Button
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	3f 93       	push	r19
 388:	4f 93       	push	r20
 38a:	5f 93       	push	r21
 38c:	6f 93       	push	r22
 38e:	7f 93       	push	r23
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	if(!(PINB & (1<<PINB7))) {
 39c:	1f 99       	sbic	0x03, 7	; 3
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <__vector_3+0x2e>
		unlock(&MTX_BTN);
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 0a 03 	call	0x614	; 0x614 <unlock>
	}
}
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	7f 91       	pop	r23
 3b6:	6f 91       	pop	r22
 3b8:	5f 91       	pop	r21
 3ba:	4f 91       	pop	r20
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <main>:
	


int main(void)
{
    CLKPR = 0x80;
 3ca:	e1 e6       	ldi	r30, 0x61	; 97
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 e8       	ldi	r24, 0x80	; 128
 3d0:	80 83       	st	Z, r24
	CLKPR = 0x00;
 3d2:	10 82       	st	Z, r1
    LCD_Init();
 3d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Init>
	LCDDR0 = LCDDR0 | (1 << 2);
 3d8:	ec ee       	ldi	r30, 0xEC	; 236
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	84 60       	ori	r24, 0x04	; 4
 3e0:	80 83       	st	Z, r24
    spawn(blink, 4);
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	8d e4       	ldi	r24, 0x4D	; 77
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 1f 02 	call	0x43e	; 0x43e <spawn>
    spawn(button, 0);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	8a e5       	ldi	r24, 0x5A	; 90
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 1f 02 	call	0x43e	; 0x43e <spawn>
	primes();
 3fa:	0e 94 82 01 	call	0x304	; 0x304 <primes>

000003fe <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 d0       	rcall	.+0      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 40c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <current>
 410:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <current+0x1>
 414:	06 96       	adiw	r24, 0x06	; 6
 416:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <setjmp>
 41a:	89 2b       	or	r24, r25
 41c:	59 f4       	brne	.+22     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
        current = next;
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <current+0x1>
 426:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <current>
        longjmp(next->context,1);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	06 96       	adiw	r24, 0x06	; 6
 430:	0e 94 9c 03 	call	0x738	; 0x738 <longjmp>
    }
}
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <spawn>:

void spawn(void (* function)(int), int arg) {
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <spawn+0x6>
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 448:	f8 94       	cli
    //lock(&MTX2);
    if (!initialized) initialize();
 44a:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <initialized>
 44e:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <initialized+0x1>
 452:	23 2b       	or	r18, r19
 454:	a1 f5       	brne	.+104    	; 0x4be <spawn+0x80>
long interrupts = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 456:	24 e0       	ldi	r18, 0x04	; 4
 458:	32 e0       	ldi	r19, 0x02	; 2
 45a:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <threads+0x5>
 45e:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <threads+0x4>
 462:	21 e7       	ldi	r18, 0x71	; 113
 464:	32 e0       	ldi	r19, 0x02	; 2
 466:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <threads+0x72>
 46a:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <threads+0x71>
 46e:	2e ed       	ldi	r18, 0xDE	; 222
 470:	32 e0       	ldi	r19, 0x02	; 2
 472:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <threads+0xdf>
 476:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 47a:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <threads+0x14c>
 47e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <threads+0x14b>

    //Set compare match
    PORTB = PORTB | (1 << PB5);
 482:	2d 9a       	sbi	0x05, 5	; 5
    PORTB = PORTB | (1 << PB7);
 484:	2f 9a       	sbi	0x05, 7	; 5
    
    //Set timer enabler
    TIMSK1 = (1 << OCIE1A);
 486:	22 e0       	ldi	r18, 0x02	; 2
 488:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    
    //Set pre-scaling factor and CTC
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 48c:	2d e0       	ldi	r18, 0x0D	; 13
 48e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

    //8 000 000 / 1024 /1000 * 50 * 100 (Target Time)
    OCR1A = 10;//390.625*10;
 492:	2a e0       	ldi	r18, 0x0A	; 10
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 49a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    
    //Set timer
	TCNT1 = 0;
 49e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 4a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    EIMSK = EIMSK | (1<<PCINT15);
 4a6:	ef 9a       	sbi	0x1d, 7	; 29
    PCMSK1 = PCMSK1 | (1<<PCINT15);
 4a8:	ec e6       	ldi	r30, 0x6C	; 108
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	20 81       	ld	r18, Z
 4ae:	20 68       	ori	r18, 0x80	; 128
 4b0:	20 83       	st	Z, r18

    initialized = 1;
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <initialized+0x1>
 4ba:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <initialized>
        *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4be:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <freeQ>
 4c2:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <freeQ+0x1>
 4c6:	3a 83       	std	Y+2, r19	; 0x02
 4c8:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 4ca:	23 2b       	or	r18, r19
 4cc:	a9 f0       	breq	.+42     	; 0x4f8 <spawn+0xba>
        *queue = (*queue)->next;
 4ce:	e9 81       	ldd	r30, Y+1	; 0x01
 4d0:	fa 81       	ldd	r31, Y+2	; 0x02
 4d2:	44 81       	ldd	r20, Z+4	; 0x04
 4d4:	55 81       	ldd	r21, Z+5	; 0x05
 4d6:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <freeQ+0x1>
 4da:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <freeQ>
    DISABLE();
    //lock(&MTX2);
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 4de:	91 83       	std	Z+1, r25	; 0x01
 4e0:	80 83       	st	Z, r24
    newp->arg = arg;
 4e2:	73 83       	std	Z+3, r23	; 0x03
 4e4:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 4e6:	15 82       	std	Z+5, r1	; 0x05
 4e8:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 4ea:	cf 01       	movw	r24, r30
 4ec:	06 96       	adiw	r24, 0x06	; 6
 4ee:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <setjmp>
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	b1 f5       	brne	.+108    	; 0x562 <__stack+0x63>
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <spawn+0xbc>
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <spawn+0xba>
        ENABLE();
 4fa:	78 94       	sei
        //unlock(&MTX2);
        current->function(current->arg);
 4fc:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <current>
 500:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <current+0x1>
 504:	ed 91       	ld	r30, X+
 506:	fc 91       	ld	r31, X
 508:	11 97       	sbiw	r26, 0x01	; 1
 50a:	12 96       	adiw	r26, 0x02	; 2
 50c:	8d 91       	ld	r24, X+
 50e:	9c 91       	ld	r25, X
 510:	13 97       	sbiw	r26, 0x03	; 3
 512:	09 95       	icall
        DISABLE();
 514:	f8 94       	cli
        //lock(&MTX2);

        enqueue(current, &freeQ);
 516:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <current>
 51a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 51e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <freeQ>
 522:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <freeQ+0x1>
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	29 f4       	brne	.+10     	; 0x534 <__stack+0x35>
        *queue = p;
 52a:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <freeQ+0x1>
 52e:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <freeQ>
 532:	06 c0       	rjmp	.+12     	; 0x540 <__stack+0x41>
    } else {
        thread q = *queue;
        p->next = q;
 534:	95 83       	std	Z+5, r25	; 0x05
 536:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 538:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <freeQ+0x1>
 53c:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 540:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 544:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
    if (*queue) {
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	51 f0       	breq	.+20     	; 0x560 <__stack+0x61>
        *queue = (*queue)->next;
 54c:	fc 01       	movw	r30, r24
 54e:	24 81       	ldd	r18, Z+4	; 0x04
 550:	35 81       	ldd	r19, Z+5	; 0x05
 552:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <readyQ+0x1>
 556:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <readyQ>
        current->function(current->arg);
        DISABLE();
        //lock(&MTX2);

        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 55a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <dispatch>
 55e:	01 c0       	rjmp	.+2      	; 0x562 <__stack+0x63>
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stack+0x61>
    }
    SETSTACK(&newp->context, &newp->stack);
 562:	e9 81       	ldd	r30, Y+1	; 0x01
 564:	fa 81       	ldd	r31, Y+2	; 0x02
 566:	36 96       	adiw	r30, 0x06	; 6
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	9a 81       	ldd	r25, Y+2	; 0x02
 56c:	87 59       	subi	r24, 0x97	; 151
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	91 8b       	std	Z+17, r25	; 0x11
 572:	80 8b       	std	Z+16, r24	; 0x10
 574:	93 8b       	std	Z+19, r25	; 0x13
 576:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(current, &readyQ);
 578:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <current>
 57c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 580:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 584:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	29 f4       	brne	.+10     	; 0x596 <__stack+0x97>
        *queue = p;
 58c:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <readyQ+0x1>
 590:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <readyQ>
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <__stack+0xa3>
    } else {
        thread q = *queue;
        p->next = q;
 596:	95 83       	std	Z+5, r25	; 0x05
 598:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 59a:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <readyQ+0x1>
 59e:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <readyQ>
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(current, &readyQ);

    dispatch(newp);
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	9a 81       	ldd	r25, Y+2	; 0x02
 5a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <dispatch>
    ENABLE();
 5aa:	78 94       	sei
}
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <lock>:

void lock(mutex *m) {
 5b6:	fc 01       	movw	r30, r24
    DISABLE();
 5b8:	f8 94       	cli
    if (m->locked == 0) {
 5ba:	80 81       	ld	r24, Z
 5bc:	91 81       	ldd	r25, Z+1	; 0x01
 5be:	89 2b       	or	r24, r25
 5c0:	29 f4       	brne	.+10     	; 0x5cc <lock+0x16>
        m->locked = 1;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	91 83       	std	Z+1, r25	; 0x01
 5c8:	80 83       	st	Z, r24
 5ca:	22 c0       	rjmp	.+68     	; 0x610 <lock+0x5a>
    }
    else {
        //Add current thread to wait queue
        enqueue(current, &(m->waitQ));
 5cc:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <current>
 5d0:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 5d4:	82 81       	ldd	r24, Z+2	; 0x02
 5d6:	93 81       	ldd	r25, Z+3	; 0x03
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	19 f4       	brne	.+6      	; 0x5e2 <lock+0x2c>
        *queue = p;
 5dc:	b3 83       	std	Z+3, r27	; 0x03
 5de:	a2 83       	std	Z+2, r26	; 0x02
 5e0:	06 c0       	rjmp	.+12     	; 0x5ee <lock+0x38>
    } else {
        thread q = *queue;
        p->next = q;
 5e2:	15 96       	adiw	r26, 0x05	; 5
 5e4:	9c 93       	st	X, r25
 5e6:	8e 93       	st	-X, r24
 5e8:	14 97       	sbiw	r26, 0x04	; 4
        *queue = p;
 5ea:	b3 83       	std	Z+3, r27	; 0x03
 5ec:	a2 83       	std	Z+2, r26	; 0x02
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5ee:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 5f2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
    if (*queue) {
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	51 f0       	breq	.+20     	; 0x60e <lock+0x58>
        *queue = (*queue)->next;
 5fa:	fc 01       	movw	r30, r24
 5fc:	24 81       	ldd	r18, Z+4	; 0x04
 5fe:	35 81       	ldd	r19, Z+5	; 0x05
 600:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <readyQ+0x1>
 604:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <readyQ>
    else {
        //Add current thread to wait queue
        enqueue(current, &(m->waitQ));

        //And go to next thread
        dispatch(dequeue(&readyQ));
 608:	0e 94 ff 01 	call	0x3fe	; 0x3fe <dispatch>
 60c:	01 c0       	rjmp	.+2      	; 0x610 <lock+0x5a>
 60e:	ff cf       	rjmp	.-2      	; 0x60e <lock+0x58>
    }
    ENABLE();
 610:	78 94       	sei
 612:	08 95       	ret

00000614 <unlock>:
}

void unlock(mutex *m) {
 614:	fc 01       	movw	r30, r24
    DISABLE();
 616:	f8 94       	cli
    if (m->waitQ == NULL) {
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	93 81       	ldd	r25, Z+3	; 0x03
 61c:	89 2b       	or	r24, r25
 61e:	19 f4       	brne	.+6      	; 0x626 <unlock+0x12>
        m->locked = 0;
 620:	11 82       	std	Z+1, r1	; 0x01
 622:	10 82       	st	Z, r1
 624:	26 c0       	rjmp	.+76     	; 0x672 <unlock+0x5e>
    }
    else {
        // Add current thread to ready queue
        enqueue(current, &readyQ);
 626:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <current>
 62a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 62e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 632:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
 636:	00 97       	sbiw	r24, 0x00	; 0
 638:	29 f4       	brne	.+10     	; 0x644 <unlock+0x30>
        *queue = p;
 63a:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <readyQ+0x1>
 63e:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <readyQ>
 642:	08 c0       	rjmp	.+16     	; 0x654 <unlock+0x40>
    } else {
        thread q = *queue;
        p->next = q;
 644:	15 96       	adiw	r26, 0x05	; 5
 646:	9c 93       	st	X, r25
 648:	8e 93       	st	-X, r24
 64a:	14 97       	sbiw	r26, 0x04	; 4
        *queue = p;
 64c:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <readyQ+0x1>
 650:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <readyQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 654:	82 81       	ldd	r24, Z+2	; 0x02
 656:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	51 f0       	breq	.+20     	; 0x670 <unlock+0x5c>
        *queue = (*queue)->next;
 65c:	dc 01       	movw	r26, r24
 65e:	14 96       	adiw	r26, 0x04	; 4
 660:	2d 91       	ld	r18, X+
 662:	3c 91       	ld	r19, X
 664:	15 97       	sbiw	r26, 0x05	; 5
 666:	33 83       	std	Z+3, r19	; 0x03
 668:	22 83       	std	Z+2, r18	; 0x02
    else {
        // Add current thread to ready queue
        enqueue(current, &readyQ);
        
        //And continue with any waiting threads
        dispatch(dequeue(&m->waitQ));
 66a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <dispatch>
 66e:	01 c0       	rjmp	.+2      	; 0x672 <unlock+0x5e>
 670:	ff cf       	rjmp	.-2      	; 0x670 <unlock+0x5c>
    }
    ENABLE();
 672:	78 94       	sei
 674:	08 95       	ret

00000676 <__divmodsi4>:
 676:	05 2e       	mov	r0, r21
 678:	97 fb       	bst	r25, 7
 67a:	1e f4       	brtc	.+6      	; 0x682 <__divmodsi4+0xc>
 67c:	00 94       	com	r0
 67e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__negsi2>
 682:	57 fd       	sbrc	r21, 7
 684:	07 d0       	rcall	.+14     	; 0x694 <__divmodsi4_neg2>
 686:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__udivmodsi4>
 68a:	07 fc       	sbrc	r0, 7
 68c:	03 d0       	rcall	.+6      	; 0x694 <__divmodsi4_neg2>
 68e:	4e f4       	brtc	.+18     	; 0x6a2 <__divmodsi4_exit>
 690:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__negsi2>

00000694 <__divmodsi4_neg2>:
 694:	50 95       	com	r21
 696:	40 95       	com	r20
 698:	30 95       	com	r19
 69a:	21 95       	neg	r18
 69c:	3f 4f       	sbci	r19, 0xFF	; 255
 69e:	4f 4f       	sbci	r20, 0xFF	; 255
 6a0:	5f 4f       	sbci	r21, 0xFF	; 255

000006a2 <__divmodsi4_exit>:
 6a2:	08 95       	ret

000006a4 <__negsi2>:
 6a4:	90 95       	com	r25
 6a6:	80 95       	com	r24
 6a8:	70 95       	com	r23
 6aa:	61 95       	neg	r22
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	08 95       	ret

000006b4 <__udivmodsi4>:
 6b4:	a1 e2       	ldi	r26, 0x21	; 33
 6b6:	1a 2e       	mov	r1, r26
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	fd 01       	movw	r30, r26
 6be:	0d c0       	rjmp	.+26     	; 0x6da <__udivmodsi4_ep>

000006c0 <__udivmodsi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	ee 1f       	adc	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	a2 17       	cp	r26, r18
 6ca:	b3 07       	cpc	r27, r19
 6cc:	e4 07       	cpc	r30, r20
 6ce:	f5 07       	cpc	r31, r21
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__udivmodsi4_ep>
 6d2:	a2 1b       	sub	r26, r18
 6d4:	b3 0b       	sbc	r27, r19
 6d6:	e4 0b       	sbc	r30, r20
 6d8:	f5 0b       	sbc	r31, r21

000006da <__udivmodsi4_ep>:
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a 94       	dec	r1
 6e4:	69 f7       	brne	.-38     	; 0x6c0 <__udivmodsi4_loop>
 6e6:	60 95       	com	r22
 6e8:	70 95       	com	r23
 6ea:	80 95       	com	r24
 6ec:	90 95       	com	r25
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	bd 01       	movw	r22, r26
 6f4:	cf 01       	movw	r24, r30
 6f6:	08 95       	ret

000006f8 <setjmp>:
 6f8:	dc 01       	movw	r26, r24
 6fa:	2d 92       	st	X+, r2
 6fc:	3d 92       	st	X+, r3
 6fe:	4d 92       	st	X+, r4
 700:	5d 92       	st	X+, r5
 702:	6d 92       	st	X+, r6
 704:	7d 92       	st	X+, r7
 706:	8d 92       	st	X+, r8
 708:	9d 92       	st	X+, r9
 70a:	ad 92       	st	X+, r10
 70c:	bd 92       	st	X+, r11
 70e:	cd 92       	st	X+, r12
 710:	dd 92       	st	X+, r13
 712:	ed 92       	st	X+, r14
 714:	fd 92       	st	X+, r15
 716:	0d 93       	st	X+, r16
 718:	1d 93       	st	X+, r17
 71a:	cd 93       	st	X+, r28
 71c:	dd 93       	st	X+, r29
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	8d b7       	in	r24, 0x3d	; 61
 724:	8d 93       	st	X+, r24
 726:	8e b7       	in	r24, 0x3e	; 62
 728:	8d 93       	st	X+, r24
 72a:	8f b7       	in	r24, 0x3f	; 63
 72c:	8d 93       	st	X+, r24
 72e:	ed 93       	st	X+, r30
 730:	fd 93       	st	X+, r31
 732:	88 27       	eor	r24, r24
 734:	99 27       	eor	r25, r25
 736:	09 94       	ijmp

00000738 <longjmp>:
 738:	dc 01       	movw	r26, r24
 73a:	cb 01       	movw	r24, r22
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	91 05       	cpc	r25, r1
 740:	81 1d       	adc	r24, r1
 742:	2d 90       	ld	r2, X+
 744:	3d 90       	ld	r3, X+
 746:	4d 90       	ld	r4, X+
 748:	5d 90       	ld	r5, X+
 74a:	6d 90       	ld	r6, X+
 74c:	7d 90       	ld	r7, X+
 74e:	8d 90       	ld	r8, X+
 750:	9d 90       	ld	r9, X+
 752:	ad 90       	ld	r10, X+
 754:	bd 90       	ld	r11, X+
 756:	cd 90       	ld	r12, X+
 758:	dd 90       	ld	r13, X+
 75a:	ed 90       	ld	r14, X+
 75c:	fd 90       	ld	r15, X+
 75e:	0d 91       	ld	r16, X+
 760:	1d 91       	ld	r17, X+
 762:	cd 91       	ld	r28, X+
 764:	dd 91       	ld	r29, X+
 766:	ed 91       	ld	r30, X+
 768:	fd 91       	ld	r31, X+
 76a:	0d 90       	ld	r0, X+
 76c:	f8 94       	cli
 76e:	fe bf       	out	0x3e, r31	; 62
 770:	0f be       	out	0x3f, r0	; 63
 772:	ed bf       	out	0x3d, r30	; 61
 774:	ed 91       	ld	r30, X+
 776:	fd 91       	ld	r31, X+
 778:	09 94       	ijmp

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
