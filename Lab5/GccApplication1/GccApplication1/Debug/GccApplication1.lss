
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000021e6  0000227a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000385  0080012e  0080012e  000022a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f0e  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001254  00000000  00000000  0000546e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016fe  00000000  00000000  000066c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  00007dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ae  00000000  00000000  00008994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028e0  00000000  00000000  00009342  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000bc22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_1>
       8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_2>
       c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__vector_3>
      10:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__vector_4>
      14:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__vector_9>
      28:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_10>
      2c:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_11>
      30:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_12>
      34:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_13>
      38:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_14>
      3c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_15>
      40:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_16>
      44:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_17>
      48:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_18>
      4c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_19>
      50:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_20>
      54:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_21>
      58:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 ee       	ldi	r30, 0xE6	; 230
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ae 32       	cpi	r26, 0x2E	; 46
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ae e2       	ldi	r26, 0x2E	; 46
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a3 3b       	cpi	r26, 0xB3	; 179
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
      92:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
#include "Gui.h"
#include <stdint.h>

uint16_t sccMap[] = {0x1551, 0x2080, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x1b51, 0x0000};

void writeChar(char ch, int pos) {
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
      a2:	66 30       	cpi	r22, 0x06	; 6
      a4:	71 05       	cpc	r23, r1
      a6:	08 f0       	brcs	.+2      	; 0xaa <writeChar+0x10>
      a8:	4b c0       	rjmp	.+150    	; 0x140 <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
      aa:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
      ac:	8a 30       	cpi	r24, 0x0A	; 10
      ae:	08 f0       	brcs	.+2      	; 0xb2 <writeChar+0x18>
		intCh = 10;
      b0:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
      b2:	fb 01       	movw	r30, r22
      b4:	f5 95       	asr	r31
      b6:	e7 95       	ror	r30
      b8:	e4 51       	subi	r30, 0x14	; 20
      ba:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
      bc:	60 ff       	sbrs	r22, 0
      be:	02 c0       	rjmp	.+4      	; 0xc4 <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
      c0:	50 ef       	ldi	r21, 0xF0	; 240
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
      c4:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
      c6:	a8 2f       	mov	r26, r24
      c8:	b0 e0       	ldi	r27, 0x00	; 0
      ca:	aa 0f       	add	r26, r26
      cc:	bb 1f       	adc	r27, r27
      ce:	a0 50       	subi	r26, 0x00	; 0
      d0:	bf 4f       	sbci	r27, 0xFF	; 255
      d2:	cd 91       	ld	r28, X+
      d4:	dc 91       	ld	r29, X
      d6:	61 e0       	ldi	r22, 0x01	; 1
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
      de:	15 2f       	mov	r17, r21
      e0:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
      e2:	01 2f       	mov	r16, r17
      e4:	06 66       	ori	r16, 0x66	; 102
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <writeChar+0x56>
      e8:	14 96       	adiw	r26, 0x04	; 4
      ea:	35 96       	adiw	r30, 0x05	; 5
      ec:	6f 5f       	subi	r22, 0xFF	; 255
      ee:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
      f0:	ce 01       	movw	r24, r28
      f2:	0a 2e       	mov	r0, r26
      f4:	02 c0       	rjmp	.+4      	; 0xfa <writeChar+0x60>
      f6:	96 95       	lsr	r25
      f8:	87 95       	ror	r24
      fa:	0a 94       	dec	r0
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <writeChar+0x5c>
      fe:	48 2f       	mov	r20, r24
     100:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
     102:	61 30       	cpi	r22, 0x01	; 1
     104:	71 05       	cpc	r23, r1
     106:	69 f4       	brne	.+26     	; 0x122 <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
     108:	80 81       	ld	r24, Z
     10a:	90 2f       	mov	r25, r16
     10c:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
     10e:	80 e1       	ldi	r24, 0x10	; 16
     110:	48 9f       	mul	r20, r24
     112:	90 01       	movw	r18, r0
     114:	11 24       	eor	r1, r1
     116:	84 2f       	mov	r24, r20
     118:	82 2b       	or	r24, r18
     11a:	85 23       	and	r24, r21
     11c:	89 2b       	or	r24, r25
     11e:	80 83       	st	Z, r24
     120:	e3 cf       	rjmp	.-58     	; 0xe8 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
     122:	80 81       	ld	r24, Z
     124:	91 2f       	mov	r25, r17
     126:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
     128:	80 e1       	ldi	r24, 0x10	; 16
     12a:	48 9f       	mul	r20, r24
     12c:	90 01       	movw	r18, r0
     12e:	11 24       	eor	r1, r1
     130:	84 2f       	mov	r24, r20
     132:	82 2b       	or	r24, r18
     134:	85 23       	and	r24, r21
     136:	89 2b       	or	r24, r25
     138:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
     13a:	64 30       	cpi	r22, 0x04	; 4
     13c:	71 05       	cpc	r23, r1
     13e:	a4 f2       	brlt	.-88     	; 0xe8 <writeChar+0x4e>

	}
	return;
	
	
}
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	1f 91       	pop	r17
     146:	0f 91       	pop	r16
     148:	08 95       	ret

0000014a <printAt>:

void printAt(Gui *self, uint8_t num) {
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	d6 2f       	mov	r29, r22
    int pp = self->pos;
     154:	fc 01       	movw	r30, r24
     156:	04 81       	ldd	r16, Z+4	; 0x04
     158:	10 e0       	ldi	r17, 0x00	; 0
    writeChar( (num % 100) / 10 + '0', pp);
     15a:	89 e2       	ldi	r24, 0x29	; 41
     15c:	68 9f       	mul	r22, r24
     15e:	81 2d       	mov	r24, r1
     160:	11 24       	eor	r1, r1
     162:	82 95       	swap	r24
     164:	8f 70       	andi	r24, 0x0F	; 15
     166:	26 2f       	mov	r18, r22
     168:	f4 e6       	ldi	r31, 0x64	; 100
     16a:	8f 9f       	mul	r24, r31
     16c:	20 19       	sub	r18, r0
     16e:	11 24       	eor	r1, r1
     170:	cd ec       	ldi	r28, 0xCD	; 205
     172:	2c 9f       	mul	r18, r28
     174:	81 2d       	mov	r24, r1
     176:	11 24       	eor	r1, r1
     178:	86 95       	lsr	r24
     17a:	86 95       	lsr	r24
     17c:	86 95       	lsr	r24
     17e:	b8 01       	movw	r22, r16
     180:	80 5d       	subi	r24, 0xD0	; 208
     182:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     186:	b8 01       	movw	r22, r16
     188:	6f 5f       	subi	r22, 0xFF	; 255
     18a:	7f 4f       	sbci	r23, 0xFF	; 255
     18c:	dc 9f       	mul	r29, r28
     18e:	c1 2d       	mov	r28, r1
     190:	11 24       	eor	r1, r1
     192:	c6 95       	lsr	r28
     194:	c6 95       	lsr	r28
     196:	c6 95       	lsr	r28
     198:	cc 0f       	add	r28, r28
     19a:	8c 2f       	mov	r24, r28
     19c:	88 0f       	add	r24, r24
     19e:	88 0f       	add	r24, r24
     1a0:	c8 0f       	add	r28, r24
     1a2:	8d 2f       	mov	r24, r29
     1a4:	8c 1b       	sub	r24, r28
     1a6:	80 5d       	subi	r24, 0xD0	; 208
     1a8:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	08 95       	ret

000001b6 <switchActive>:

void switchActive(Gui *self, uint8_t status) {

	// Set active signifier in gui to status

	if (self->pos == 0) {
     1b6:	fc 01       	movw	r30, r24
     1b8:	84 81       	ldd	r24, Z+4	; 0x04
     1ba:	81 11       	cpse	r24, r1
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <switchActive+0x18>
		LCDDR0 = (LCDDR0 & ~(0x1 << 1)) | (status << 1);
     1be:	ec ee       	ldi	r30, 0xEC	; 236
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	66 0f       	add	r22, r22
     1c8:	68 2b       	or	r22, r24
     1ca:	60 83       	st	Z, r22
     1cc:	08 95       	ret
	}
	else if (self->pos == 4) {
     1ce:	84 30       	cpi	r24, 0x04	; 4
     1d0:	51 f4       	brne	.+20     	; 0x1e6 <switchActive+0x30>
		LCDDR1 = (LCDDR1 & ~(0x1 << 6)) | (status << 6);
     1d2:	ed ee       	ldi	r30, 0xED	; 237
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 7b       	andi	r24, 0xBF	; 191
     1da:	90 e4       	ldi	r25, 0x40	; 64
     1dc:	69 9f       	mul	r22, r25
     1de:	b0 01       	movw	r22, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	68 2b       	or	r22, r24
     1e4:	60 83       	st	Z, r22
     1e6:	08 95       	ret

000001e8 <readObserver>:

#include "InputHandler.h"



void readObserver(InputHandler *self){
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	5c 01       	movw	r10, r24
	
	char RecievedData = UDR0; // Get data from simulator
     1fc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	#define NORTHBOUND_ARRIVE   RecievedData & (1 << 0)
	#define NORTHBOUND_ENTRY	RecievedData & (1 << 1)
	#define SOUTHBOUND_ARRIVE	RecievedData & (1 << 2)
	#define SOUTHBOUND_ENTRY	RecievedData & (1 << 3)
	
	if (NORTHBOUND_ARRIVE)	{ ASYNC(self->state,   carArrived      , 	1)	; } //a
     200:	c0 ff       	sbrs	r28, 0
     202:	14 c0       	rjmp	.+40     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
     204:	fc 01       	movw	r30, r24
     206:	04 81       	ldd	r16, Z+4	; 0x04
     208:	15 81       	ldd	r17, Z+5	; 0x05
     20a:	cc 24       	eor	r12, r12
     20c:	c3 94       	inc	r12
     20e:	d1 2c       	mov	r13, r1
     210:	0f 2e       	mov	r0, r31
     212:	fe e7       	ldi	r31, 0x7E	; 126
     214:	ef 2e       	mov	r14, r31
     216:	f2 e0       	ldi	r31, 0x02	; 2
     218:	ff 2e       	mov	r15, r31
     21a:	f0 2d       	mov	r31, r0
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	a9 01       	movw	r20, r18
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	cb 01       	movw	r24, r22
     228:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
	if (NORTHBOUND_ENTRY)   { ASYNC(self->state,   startCrossing   , 	1)	; }	//b	
     22c:	c1 ff       	sbrs	r28, 1
     22e:	14 c0       	rjmp	.+40     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     230:	f5 01       	movw	r30, r10
     232:	04 81       	ldd	r16, Z+4	; 0x04
     234:	15 81       	ldd	r17, Z+5	; 0x05
     236:	cc 24       	eor	r12, r12
     238:	c3 94       	inc	r12
     23a:	d1 2c       	mov	r13, r1
     23c:	0f 2e       	mov	r0, r31
     23e:	f2 e4       	ldi	r31, 0x42	; 66
     240:	ef 2e       	mov	r14, r31
     242:	f3 e0       	ldi	r31, 0x03	; 3
     244:	ff 2e       	mov	r15, r31
     246:	f0 2d       	mov	r31, r0
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	a9 01       	movw	r20, r18
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	cb 01       	movw	r24, r22
     254:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
	if (SOUTHBOUND_ARRIVE)	{ ASYNC(self->state,   carArrived      , 	-1)	; } //d
     258:	c2 ff       	sbrs	r28, 2
     25a:	14 c0       	rjmp	.+40     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
     25c:	f5 01       	movw	r30, r10
     25e:	04 81       	ldd	r16, Z+4	; 0x04
     260:	15 81       	ldd	r17, Z+5	; 0x05
     262:	cc 24       	eor	r12, r12
     264:	ca 94       	dec	r12
     266:	dc 2c       	mov	r13, r12
     268:	0f 2e       	mov	r0, r31
     26a:	fe e7       	ldi	r31, 0x7E	; 126
     26c:	ef 2e       	mov	r14, r31
     26e:	f2 e0       	ldi	r31, 0x02	; 2
     270:	ff 2e       	mov	r15, r31
     272:	f0 2d       	mov	r31, r0
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	cb 01       	movw	r24, r22
     280:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
	if (SOUTHBOUND_ENTRY)   { ASYNC(self->state,   startCrossing   , 	-1)	; } //h
     284:	c3 ff       	sbrs	r28, 3
     286:	14 c0       	rjmp	.+40     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
     288:	f5 01       	movw	r30, r10
     28a:	04 81       	ldd	r16, Z+4	; 0x04
     28c:	15 81       	ldd	r17, Z+5	; 0x05
     28e:	cc 24       	eor	r12, r12
     290:	ca 94       	dec	r12
     292:	dc 2c       	mov	r13, r12
     294:	0f 2e       	mov	r0, r31
     296:	f2 e4       	ldi	r31, 0x42	; 66
     298:	ef 2e       	mov	r14, r31
     29a:	f3 e0       	ldi	r31, 0x03	; 3
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	cb 01       	movw	r24, r22
     2ac:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	bf 90       	pop	r11
     2c0:	af 90       	pop	r10
     2c2:	08 95       	ret

000002c4 <main>:
TrafficLight NL = initTrafficLight(0);
TrafficLight SL = initTrafficLight(0);


int main(void)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
	initUtil(&utility, MYUBRR);
     2c8:	63 e3       	ldi	r22, 0x33	; 51
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	8c e5       	ldi	r24, 0x5C	; 92
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 83 10 	call	0x2106	; 0x2106 <initUtil>
	inputHandler.state = &state;
     2d4:	e4 e4       	ldi	r30, 0x44	; 68
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <inputHandler+0x5>
     2dc:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <inputHandler+0x4>
	state.gui[0] = &gui[0];
     2e0:	26 e1       	ldi	r18, 0x16	; 22
     2e2:	31 e0       	ldi	r19, 0x01	; 1
     2e4:	31 8b       	std	Z+17, r19	; 0x11
     2e6:	20 8b       	std	Z+16, r18	; 0x10
	state.gui[1] = &gui[1];
     2e8:	8b e1       	ldi	r24, 0x1B	; 27
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	93 8b       	std	Z+19, r25	; 0x13
     2ee:	82 8b       	std	Z+18, r24	; 0x12
	state.gui[2] = &gui[2];
     2f0:	80 e2       	ldi	r24, 0x20	; 32
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	95 8b       	std	Z+21, r25	; 0x15
     2f6:	84 8b       	std	Z+20, r24	; 0x14
	SL.lightGui = &gui[0];
     2f8:	ae e2       	ldi	r26, 0x2E	; 46
     2fa:	b1 e0       	ldi	r27, 0x01	; 1
     2fc:	15 96       	adiw	r26, 0x05	; 5
     2fe:	3c 93       	st	X, r19
     300:	2e 93       	st	-X, r18
     302:	14 97       	sbiw	r26, 0x04	; 4
	NL.lightGui = &gui[2];
     304:	c6 e3       	ldi	r28, 0x36	; 54
     306:	d1 e0       	ldi	r29, 0x01	; 1
     308:	9d 83       	std	Y+5, r25	; 0x05
     30a:	8c 83       	std	Y+4, r24	; 0x04
	state.northLight = &NL;
     30c:	d3 87       	std	Z+11, r29	; 0x0b
     30e:	c2 87       	std	Z+10, r28	; 0x0a
	state.southLight = &SL;
     310:	b1 87       	std	Z+9, r27	; 0x09
     312:	a0 87       	std	Z+8, r26	; 0x08
    INSTALL(&inputHandler, readObserver, IRQ_USART0_RX);
     314:	48 e0       	ldi	r20, 0x08	; 8
     316:	64 ef       	ldi	r22, 0xF4	; 244
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	8e e3       	ldi	r24, 0x3E	; 62
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 35 10 	call	0x206a	; 0x206a <install>
    return TINYTIMBER(&state, initialize, NULL);
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	60 e6       	ldi	r22, 0x60	; 96
     328:	72 e0       	ldi	r23, 0x02	; 2
     32a:	84 e4       	ldi	r24, 0x44	; 68
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 4f 10 	call	0x209e	; 0x209e <tinytimber>
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <timeout>:
    //If there is a queue of cars from a particular direction, better bridge utilization will be achieved by letting more than one car pass from the same direction before allowing cars from the other direction. Delay between cars from the same direction should be 1 second.
    //For our particular scenario, we will assume that a reasonable time for passing the bridge once it is entered is 5 seconds.
    //It is, however, not required to deal with cars that stop on the bridge, make u-turns, ignore green lights, ignore red lights, ignore the one-car-per-green restriction, drive at extreme speeds (high and low), etc. These are not unrealistic assumptions – few real traffic light systems are designed to detect (say) cars that stop in the middle of a crossing due to engine failure.


void timeout(State *self) {
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ec 01       	movw	r28, r24
    self->currTimeout = NULL;
     34a:	1f 86       	std	Y+15, r1	; 0x0f
     34c:	1e 86       	std	Y+14, r1	; 0x0e
    ASYNC(self->southLight, setLamp, false);  
     34e:	08 85       	ldd	r16, Y+8	; 0x08
     350:	19 85       	ldd	r17, Y+9	; 0x09
     352:	c1 2c       	mov	r12, r1
     354:	d1 2c       	mov	r13, r1
     356:	0f 2e       	mov	r0, r31
     358:	fb e6       	ldi	r31, 0x6B	; 107
     35a:	ef 2e       	mov	r14, r31
     35c:	f0 e1       	ldi	r31, 0x10	; 16
     35e:	ff 2e       	mov	r15, r31
     360:	f0 2d       	mov	r31, r0
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	cb 01       	movw	r24, r22
     36e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
    ASYNC(self->northLight, setLamp, false);
     372:	0a 85       	ldd	r16, Y+10	; 0x0a
     374:	1b 85       	ldd	r17, Y+11	; 0x0b
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	a9 01       	movw	r20, r18
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	cb 01       	movw	r24, r22
     382:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
    SYNC(self->gui[0], switchActive, 0);
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	6b ed       	ldi	r22, 0xDB	; 219
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	88 89       	ldd	r24, Y+16	; 0x10
     390:	99 89       	ldd	r25, Y+17	; 0x11
     392:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
    SYNC(self->gui[2], switchActive, 0);  
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	6b ed       	ldi	r22, 0xDB	; 219
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	8c 89       	ldd	r24, Y+20	; 0x14
     3a0:	9d 89       	ldd	r25, Y+21	; 0x15
     3a2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	08 95       	ret

000003b8 <hasCrossed>:
		SYNC(self->gui[1], printAt, abs(self->crossing));    
    }
    AFTER(SEC(5), self, hasCrossed, dir);
}

void hasCrossed(State *self, int dir) {
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	8b 01       	movw	r16, r22

    // Once car has crossed, if its the last one on the road and other queue is waiting, switch lights
    // If no car is waiting, both lights will be red

    self->crossing -= dir;
     3cc:	8c 85       	ldd	r24, Y+12	; 0x0c
     3ce:	9d 85       	ldd	r25, Y+13	; 0x0d
     3d0:	86 1b       	sub	r24, r22
     3d2:	97 0b       	sbc	r25, r23
     3d4:	9d 87       	std	Y+13, r25	; 0x0d
     3d6:	8c 87       	std	Y+12, r24	; 0x0c
	SYNC(self->gui[1], printAt, abs(self->crossing));   
     3d8:	ac 01       	movw	r20, r24
     3da:	99 23       	and	r25, r25
     3dc:	24 f4       	brge	.+8      	; 0x3e6 <hasCrossed+0x2e>
     3de:	44 27       	eor	r20, r20
     3e0:	55 27       	eor	r21, r21
     3e2:	48 1b       	sub	r20, r24
     3e4:	59 0b       	sbc	r21, r25
     3e6:	65 ea       	ldi	r22, 0xA5	; 165
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	8a 89       	ldd	r24, Y+18	; 0x12
     3ec:	9b 89       	ldd	r25, Y+19	; 0x13
     3ee:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
    if (self->crossing == 0) {
     3f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     3f4:	9d 85       	ldd	r25, Y+13	; 0x0d
     3f6:	89 2b       	or	r24, r25
     3f8:	09 f0       	breq	.+2      	; 0x3fc <hasCrossed+0x44>
     3fa:	59 c0       	rjmp	.+178    	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
        switch (dir) {
     3fc:	0f 3f       	cpi	r16, 0xFF	; 255
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	18 07       	cpc	r17, r24
     402:	49 f1       	breq	.+82     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
     404:	01 30       	cpi	r16, 0x01	; 1
     406:	11 05       	cpc	r17, r1
     408:	09 f0       	breq	.+2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
     40a:	51 c0       	rjmp	.+162    	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
            case 1:
                ASYNC(self->northLight, setLamp, false);
     40c:	0a 85       	ldd	r16, Y+10	; 0x0a
     40e:	1b 85       	ldd	r17, Y+11	; 0x0b
     410:	c1 2c       	mov	r12, r1
     412:	d1 2c       	mov	r13, r1
     414:	0f 2e       	mov	r0, r31
     416:	fb e6       	ldi	r31, 0x6B	; 107
     418:	ef 2e       	mov	r14, r31
     41a:	f0 e1       	ldi	r31, 0x10	; 16
     41c:	ff 2e       	mov	r15, r31
     41e:	f0 2d       	mov	r31, r0
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	a9 01       	movw	r20, r18
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	cb 01       	movw	r24, r22
     42c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
                if (self->southQueue > 0) {
     430:	8e 81       	ldd	r24, Y+6	; 0x06
     432:	9f 81       	ldd	r25, Y+7	; 0x07
     434:	18 16       	cp	r1, r24
     436:	19 06       	cpc	r1, r25
     438:	d4 f5       	brge	.+116    	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
                    ASYNC(self->southLight, setLamp, true);
     43a:	08 85       	ldd	r16, Y+8	; 0x08
     43c:	19 85       	ldd	r17, Y+9	; 0x09
     43e:	cc 24       	eor	r12, r12
     440:	c3 94       	inc	r12
     442:	d1 2c       	mov	r13, r1
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	a9 01       	movw	r20, r18
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	cb 01       	movw	r24, r22
     450:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
     454:	2c c0       	rjmp	.+88     	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
                }
                break;
            case -1:
                ASYNC(self->southLight, setLamp, false);
     456:	08 85       	ldd	r16, Y+8	; 0x08
     458:	19 85       	ldd	r17, Y+9	; 0x09
     45a:	c1 2c       	mov	r12, r1
     45c:	d1 2c       	mov	r13, r1
     45e:	0f 2e       	mov	r0, r31
     460:	fb e6       	ldi	r31, 0x6B	; 107
     462:	ef 2e       	mov	r14, r31
     464:	f0 e1       	ldi	r31, 0x10	; 16
     466:	ff 2e       	mov	r15, r31
     468:	f0 2d       	mov	r31, r0
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	a9 01       	movw	r20, r18
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	cb 01       	movw	r24, r22
     476:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
                if (self->northQueue > 0) {
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	18 16       	cp	r1, r24
     480:	19 06       	cpc	r1, r25
     482:	6c f4       	brge	.+26     	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
                    ASYNC(self->northLight, setLamp, true);
     484:	0a 85       	ldd	r16, Y+10	; 0x0a
     486:	1b 85       	ldd	r17, Y+11	; 0x0b
     488:	cc 24       	eor	r12, r12
     48a:	c3 94       	inc	r12
     48c:	d1 2c       	mov	r13, r1
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	a9 01       	movw	r20, r18
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
     49a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
                }
            if (self->currTimeout) {
     49e:	8e 85       	ldd	r24, Y+14	; 0x0e
     4a0:	9f 85       	ldd	r25, Y+15	; 0x0f
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	21 f0       	breq	.+8      	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
                ABORT(self->currTimeout);
     4a6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <ABORT>
                self->currTimeout = NULL;
     4aa:	1f 86       	std	Y+15, r1	; 0x0f
     4ac:	1e 86       	std	Y+14, r1	; 0x0e
            }
        }
    }

}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	08 95       	ret

000004c0 <initialize>:

// 1 north
// -1 south


void initialize(State *self) {
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
	SYNC(self->gui[0], printAt, 0);
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	65 ea       	ldi	r22, 0xA5	; 165
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	88 89       	ldd	r24, Y+16	; 0x10
     4d0:	99 89       	ldd	r25, Y+17	; 0x11
     4d2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
	SYNC(self->gui[1], printAt, 0);
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	65 ea       	ldi	r22, 0xA5	; 165
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	9b 89       	ldd	r25, Y+19	; 0x13
     4e2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
	SYNC(self->gui[2], printAt, 0);
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	65 ea       	ldi	r22, 0xA5	; 165
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	8c 89       	ldd	r24, Y+20	; 0x14
     4f0:	9d 89       	ldd	r25, Y+21	; 0x15
     4f2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <carArrived>:

void carArrived(State *self, int dir) {
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	1f 92       	push	r1
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	5c 01       	movw	r10, r24
		volatile bool oppAct;
        switch (dir) {
     518:	6f 3f       	cpi	r22, 0xFF	; 255
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	78 07       	cpc	r23, r24
     51e:	09 f4       	brne	.+2      	; 0x522 <__stack+0x23>
     520:	57 c0       	rjmp	.+174    	; 0x5d0 <__stack+0xd1>
     522:	61 30       	cpi	r22, 0x01	; 1
     524:	71 05       	cpc	r23, r1
     526:	09 f0       	breq	.+2      	; 0x52a <__stack+0x2b>
     528:	a1 c0       	rjmp	.+322    	; 0x66c <__stack+0x16d>
			case 1:
				self->northQueue += 1;
     52a:	f5 01       	movw	r30, r10
     52c:	44 81       	ldd	r20, Z+4	; 0x04
     52e:	55 81       	ldd	r21, Z+5	; 0x05
     530:	4f 5f       	subi	r20, 0xFF	; 255
     532:	5f 4f       	sbci	r21, 0xFF	; 255
     534:	55 83       	std	Z+5, r21	; 0x05
     536:	44 83       	std	Z+4, r20	; 0x04
				SYNC(self->gui[2], printAt, self->northQueue);
     538:	65 ea       	ldi	r22, 0xA5	; 165
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	84 89       	ldd	r24, Z+20	; 0x14
     53e:	95 89       	ldd	r25, Z+21	; 0x15
     540:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
				oppAct = SYNC(self->southLight, getLamp, NULL);
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	6f e7       	ldi	r22, 0x7F	; 127
     54a:	70 e1       	ldi	r23, 0x10	; 16
     54c:	f5 01       	movw	r30, r10
     54e:	80 85       	ldd	r24, Z+8	; 0x08
     550:	91 85       	ldd	r25, Z+9	; 0x09
     552:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
     556:	21 e0       	ldi	r18, 0x01	; 1
     558:	89 2b       	or	r24, r25
     55a:	09 f4       	brne	.+2      	; 0x55e <__stack+0x5f>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	29 83       	std	Y+1, r18	; 0x01
				if ((self->crossing == 0) && (!oppAct)) {
     560:	f5 01       	movw	r30, r10
     562:	84 85       	ldd	r24, Z+12	; 0x0c
     564:	95 85       	ldd	r25, Z+13	; 0x0d
     566:	89 2b       	or	r24, r25
     568:	09 f0       	breq	.+2      	; 0x56c <__stack+0x6d>
     56a:	80 c0       	rjmp	.+256    	; 0x66c <__stack+0x16d>
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	81 11       	cpse	r24, r1
     570:	7d c0       	rjmp	.+250    	; 0x66c <__stack+0x16d>
					if (self->currTimeout) {
     572:	86 85       	ldd	r24, Z+14	; 0x0e
     574:	97 85       	ldd	r25, Z+15	; 0x0f
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	11 f0       	breq	.+4      	; 0x57e <__stack+0x7f>
						ABORT(self->currTimeout);
     57a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <ABORT>
						}
					self->currTimeout = AFTER(SEC(15), self, timeout, NULL);
     57e:	c1 2c       	mov	r12, r1
     580:	d1 2c       	mov	r13, r1
     582:	0f 2e       	mov	r0, r31
     584:	fc e9       	ldi	r31, 0x9C	; 156
     586:	ef 2e       	mov	r14, r31
     588:	f1 e0       	ldi	r31, 0x01	; 1
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0
     58e:	85 01       	movw	r16, r10
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a9 01       	movw	r20, r18
     596:	6e e0       	ldi	r22, 0x0E	; 14
     598:	77 e2       	ldi	r23, 0x27	; 39
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
     5a2:	f5 01       	movw	r30, r10
     5a4:	97 87       	std	Z+15, r25	; 0x0f
     5a6:	86 87       	std	Z+14, r24	; 0x0e
					ASYNC(self->northLight, setLamp, true);
     5a8:	02 85       	ldd	r16, Z+10	; 0x0a
     5aa:	13 85       	ldd	r17, Z+11	; 0x0b
     5ac:	cc 24       	eor	r12, r12
     5ae:	c3 94       	inc	r12
     5b0:	d1 2c       	mov	r13, r1
     5b2:	0f 2e       	mov	r0, r31
     5b4:	fb e6       	ldi	r31, 0x6B	; 107
     5b6:	ef 2e       	mov	r14, r31
     5b8:	f0 e1       	ldi	r31, 0x10	; 16
     5ba:	ff 2e       	mov	r15, r31
     5bc:	f0 2d       	mov	r31, r0
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	a9 01       	movw	r20, r18
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	cb 01       	movw	r24, r22
     5ca:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
     5ce:	4e c0       	rjmp	.+156    	; 0x66c <__stack+0x16d>
				}
				break;
			case -1:
				self->southQueue += 1;
     5d0:	f5 01       	movw	r30, r10
     5d2:	46 81       	ldd	r20, Z+6	; 0x06
     5d4:	57 81       	ldd	r21, Z+7	; 0x07
     5d6:	4f 5f       	subi	r20, 0xFF	; 255
     5d8:	5f 4f       	sbci	r21, 0xFF	; 255
     5da:	57 83       	std	Z+7, r21	; 0x07
     5dc:	46 83       	std	Z+6, r20	; 0x06
				SYNC(self->gui[0], printAt, self->southQueue);
     5de:	65 ea       	ldi	r22, 0xA5	; 165
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 89       	ldd	r24, Z+16	; 0x10
     5e4:	91 89       	ldd	r25, Z+17	; 0x11
     5e6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
				oppAct = SYNC(self->northLight, getLamp, NULL);
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	6f e7       	ldi	r22, 0x7F	; 127
     5f0:	70 e1       	ldi	r23, 0x10	; 16
     5f2:	f5 01       	movw	r30, r10
     5f4:	82 85       	ldd	r24, Z+10	; 0x0a
     5f6:	93 85       	ldd	r25, Z+11	; 0x0b
     5f8:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	89 2b       	or	r24, r25
     600:	09 f4       	brne	.+2      	; 0x604 <__stack+0x105>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	29 83       	std	Y+1, r18	; 0x01
				if (self->crossing == 0) {
     606:	f5 01       	movw	r30, r10
     608:	84 85       	ldd	r24, Z+12	; 0x0c
     60a:	95 85       	ldd	r25, Z+13	; 0x0d
     60c:	89 2b       	or	r24, r25
     60e:	71 f5       	brne	.+92     	; 0x66c <__stack+0x16d>
					if (self->currTimeout) {
     610:	86 85       	ldd	r24, Z+14	; 0x0e
     612:	97 85       	ldd	r25, Z+15	; 0x0f
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	11 f0       	breq	.+4      	; 0x61c <__stack+0x11d>
						ABORT(self->currTimeout);
     618:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <ABORT>
						}
					self->currTimeout = AFTER(SEC(15), self, timeout, NULL);
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	0f 2e       	mov	r0, r31
     622:	fc e9       	ldi	r31, 0x9C	; 156
     624:	ef 2e       	mov	r14, r31
     626:	f1 e0       	ldi	r31, 0x01	; 1
     628:	ff 2e       	mov	r15, r31
     62a:	f0 2d       	mov	r31, r0
     62c:	85 01       	movw	r16, r10
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	6e e0       	ldi	r22, 0x0E	; 14
     636:	77 e2       	ldi	r23, 0x27	; 39
     638:	87 e0       	ldi	r24, 0x07	; 7
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
     640:	f5 01       	movw	r30, r10
     642:	97 87       	std	Z+15, r25	; 0x0f
     644:	86 87       	std	Z+14, r24	; 0x0e
					ASYNC(self->southLight, setLamp, true);  
     646:	00 85       	ldd	r16, Z+8	; 0x08
     648:	11 85       	ldd	r17, Z+9	; 0x09
     64a:	cc 24       	eor	r12, r12
     64c:	c3 94       	inc	r12
     64e:	d1 2c       	mov	r13, r1
     650:	0f 2e       	mov	r0, r31
     652:	fb e6       	ldi	r31, 0x6B	; 107
     654:	ef 2e       	mov	r14, r31
     656:	f0 e1       	ldi	r31, 0x10	; 16
     658:	ff 2e       	mov	r15, r31
     65a:	f0 2d       	mov	r31, r0
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	a9 01       	movw	r20, r18
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	cb 01       	movw	r24, r22
     668:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
            }
			break;
    }
}
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	08 95       	ret

00000684 <startCrossing>:
    ASYNC(self->northLight, setLamp, false);
    SYNC(self->gui[0], switchActive, 0);
    SYNC(self->gui[2], switchActive, 0);  
}

void startCrossing(State *self, int dir) {
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
     696:	6b 01       	movw	r12, r22
	self->crossing += dir;
     698:	8c 85       	ldd	r24, Y+12	; 0x0c
     69a:	9d 85       	ldd	r25, Y+13	; 0x0d
     69c:	86 0f       	add	r24, r22
     69e:	97 1f       	adc	r25, r23
     6a0:	9d 87       	std	Y+13, r25	; 0x0d
     6a2:	8c 87       	std	Y+12, r24	; 0x0c
	SYNC(self->gui[1], printAt, abs(self->crossing)); 
     6a4:	ac 01       	movw	r20, r24
     6a6:	99 23       	and	r25, r25
     6a8:	24 f4       	brge	.+8      	; 0x6b2 <startCrossing+0x2e>
     6aa:	44 27       	eor	r20, r20
     6ac:	55 27       	eor	r21, r21
     6ae:	48 1b       	sub	r20, r24
     6b0:	59 0b       	sbc	r21, r25
     6b2:	65 ea       	ldi	r22, 0xA5	; 165
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	8a 89       	ldd	r24, Y+18	; 0x12
     6b8:	9b 89       	ldd	r25, Y+19	; 0x13
     6ba:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
    switch (dir) {
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	c8 16       	cp	r12, r24
     6c2:	d8 06       	cpc	r13, r24
     6c4:	89 f0       	breq	.+34     	; 0x6e8 <startCrossing+0x64>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	c8 16       	cp	r12, r24
     6ca:	d1 04       	cpc	r13, r1
     6cc:	c9 f4       	brne	.+50     	; 0x700 <startCrossing+0x7c>
        case 1:
            self->northQueue -= 1;
     6ce:	4c 81       	ldd	r20, Y+4	; 0x04
     6d0:	5d 81       	ldd	r21, Y+5	; 0x05
     6d2:	41 50       	subi	r20, 0x01	; 1
     6d4:	51 09       	sbc	r21, r1
     6d6:	5d 83       	std	Y+5, r21	; 0x05
     6d8:	4c 83       	std	Y+4, r20	; 0x04
			SYNC(self->gui[2], printAt, self->northQueue);
     6da:	65 ea       	ldi	r22, 0xA5	; 165
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	8c 89       	ldd	r24, Y+20	; 0x14
     6e0:	9d 89       	ldd	r25, Y+21	; 0x15
     6e2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
            break;
     6e6:	0c c0       	rjmp	.+24     	; 0x700 <startCrossing+0x7c>
        case -1:
            self->southQueue -= 1;
     6e8:	4e 81       	ldd	r20, Y+6	; 0x06
     6ea:	5f 81       	ldd	r21, Y+7	; 0x07
     6ec:	41 50       	subi	r20, 0x01	; 1
     6ee:	51 09       	sbc	r21, r1
     6f0:	5f 83       	std	Y+7, r21	; 0x07
     6f2:	4e 83       	std	Y+6, r20	; 0x06
			SYNC(self->gui[0], printAt, self->southQueue);
     6f4:	65 ea       	ldi	r22, 0xA5	; 165
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	88 89       	ldd	r24, Y+16	; 0x10
     6fa:	99 89       	ldd	r25, Y+17	; 0x11
     6fc:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
            break;
        self->crossing += dir;
		SYNC(self->gui[1], printAt, abs(self->crossing));    
    }
    AFTER(SEC(5), self, hasCrossed, dir);
     700:	0f 2e       	mov	r0, r31
     702:	fc ed       	ldi	r31, 0xDC	; 220
     704:	ef 2e       	mov	r14, r31
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	ff 2e       	mov	r15, r31
     70a:	f0 2d       	mov	r31, r0
     70c:	8e 01       	movw	r16, r28
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	6a e5       	ldi	r22, 0x5A	; 90
     716:	72 e6       	ldi	r23, 0x62	; 98
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	08 95       	ret

00000732 <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     732:	fb 01       	movw	r30, r22
     734:	a0 81       	ld	r26, Z
     736:	b1 81       	ldd	r27, Z+1	; 0x01
     738:	10 97       	sbiw	r26, 0x00	; 0
     73a:	f1 f0       	breq	.+60     	; 0x778 <remove+0x46>
     73c:	a8 17       	cp	r26, r24
     73e:	b9 07       	cpc	r27, r25
     740:	11 f4       	brne	.+4      	; 0x746 <remove+0x14>
     742:	11 c0       	rjmp	.+34     	; 0x766 <remove+0x34>
     744:	df 01       	movw	r26, r30
     746:	ed 91       	ld	r30, X+
     748:	fc 91       	ld	r31, X
     74a:	11 97       	sbiw	r26, 0x01	; 1
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	b9 f0       	breq	.+46     	; 0x77e <remove+0x4c>
     750:	8e 17       	cp	r24, r30
     752:	9f 07       	cpc	r25, r31
     754:	b9 f7       	brne	.-18     	; 0x744 <remove+0x12>
     756:	16 c0       	rjmp	.+44     	; 0x784 <remove+0x52>
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	8d 93       	st	X+, r24
     75e:	9c 93       	st	X, r25
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	08 95       	ret
     766:	fd 01       	movw	r30, r26
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	fb 01       	movw	r30, r22
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	80 83       	st	Z, r24
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	08 95       	ret
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	08 95       	ret
     784:	10 97       	sbiw	r26, 0x00	; 0
     786:	41 f7       	brne	.-48     	; 0x758 <remove+0x26>
     788:	ef cf       	rjmp	.-34     	; 0x768 <remove+0x36>

0000078a <initialize>:
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <initialize+0x6>
     790:	00 d0       	rcall	.+0      	; 0x792 <initialize+0x8>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	83 e5       	ldi	r24, 0x53	; 83
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	23 e3       	ldi	r18, 0x33	; 51
     79c:	33 e0       	ldi	r19, 0x03	; 3
     79e:	fc 01       	movw	r30, r24
     7a0:	70 97       	sbiw	r30, 0x10	; 16
     7a2:	91 83       	std	Z+1, r25	; 0x01
     7a4:	80 83       	st	Z, r24
     7a6:	40 96       	adiw	r24, 0x10	; 16
     7a8:	82 17       	cp	r24, r18
     7aa:	93 07       	cpc	r25, r19
     7ac:	c1 f7       	brne	.-16     	; 0x79e <initialize+0x14>
     7ae:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <messages+0xe1>
     7b2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <messages+0xe0>
     7b6:	ee e8       	ldi	r30, 0x8E	; 142
     7b8:	f1 e0       	ldi	r31, 0x01	; 1
     7ba:	8b ea       	ldi	r24, 0xAB	; 171
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	91 83       	std	Z+1, r25	; 0x01
     7c0:	80 83       	st	Z, r24
     7c2:	88 ec       	ldi	r24, 0xC8	; 200
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	96 8f       	std	Z+30, r25	; 0x1e
     7c8:	85 8f       	std	Z+29, r24	; 0x1d
     7ca:	a5 ee       	ldi	r26, 0xE5	; 229
     7cc:	b1 e0       	ldi	r27, 0x01	; 1
     7ce:	b3 af       	std	Z+59, r27	; 0x3b
     7d0:	a2 af       	std	Z+58, r26	; 0x3a
     7d2:	1d 92       	st	X+, r1
     7d4:	1c 92       	st	X, r1
     7d6:	fa 83       	std	Y+2, r31	; 0x02
     7d8:	e9 83       	std	Y+1, r30	; 0x01
     7da:	ef e8       	ldi	r30, 0x8F	; 143
     7dc:	f3 e0       	ldi	r31, 0x03	; 3
     7de:	fc 83       	std	Y+4, r31	; 0x04
     7e0:	eb 83       	std	Y+3, r30	; 0x03
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	06 96       	adiw	r24, 0x06	; 6
     7e8:	0e 94 b0 10 	call	0x2160	; 0x2160 <setjmp>
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	e9 81       	ldd	r30, Y+1	; 0x01
     7f2:	fa 81       	ldd	r31, Y+2	; 0x02
     7f4:	97 8b       	std	Z+23, r25	; 0x17
     7f6:	86 8b       	std	Z+22, r24	; 0x16
     7f8:	91 8f       	std	Z+25, r25	; 0x19
     7fa:	80 8f       	std	Z+24, r24	; 0x18
     7fc:	86 e7       	ldi	r24, 0x76	; 118
     7fe:	9f e0       	ldi	r25, 0x0F	; 15
     800:	94 8f       	std	Z+28, r25	; 0x1c
     802:	83 8f       	std	Z+27, r24	; 0x1b
     804:	15 82       	std	Z+5, r1	; 0x05
     806:	14 82       	std	Z+4, r1	; 0x04
     808:	7d 96       	adiw	r30, 0x1d	; 29
     80a:	fa 83       	std	Y+2, r31	; 0x02
     80c:	e9 83       	std	Y+1, r30	; 0x01
     80e:	eb 81       	ldd	r30, Y+3	; 0x03
     810:	fc 81       	ldd	r31, Y+4	; 0x04
     812:	e0 5a       	subi	r30, 0xA0	; 160
     814:	ff 4f       	sbci	r31, 0xFF	; 255
     816:	fc 83       	std	Y+4, r31	; 0x04
     818:	eb 83       	std	Y+3, r30	; 0x03
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	82 50       	subi	r24, 0x02	; 2
     820:	92 40       	sbci	r25, 0x02	; 2
     822:	f9 f6       	brne	.-66     	; 0x7e2 <initialize+0x58>
     824:	e6 e2       	ldi	r30, 0x26	; 38
     826:	f2 e0       	ldi	r31, 0x02	; 2
     828:	11 82       	std	Z+1, r1	; 0x01
     82a:	10 82       	st	Z, r1
     82c:	15 82       	std	Z+5, r1	; 0x05
     82e:	14 82       	std	Z+4, r1	; 0x04
     830:	13 82       	std	Z+3, r1	; 0x03
     832:	12 82       	std	Z+2, r1	; 0x02
     834:	e1 e6       	ldi	r30, 0x61	; 97
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 e8       	ldi	r24, 0x80	; 128
     83a:	80 83       	st	Z, r24
     83c:	10 82       	st	Z, r1
     83e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     842:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <dispatch>:
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <dispatch+0x6>
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <current>
     872:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <current+0x1>
     876:	06 96       	adiw	r24, 0x06	; 6
     878:	0e 94 b0 10 	call	0x2160	; 0x2160 <setjmp>
     87c:	89 2b       	or	r24, r25
     87e:	59 f4       	brne	.+22     	; 0x896 <dispatch+0x36>
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <current+0x1>
     888:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <current>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	06 96       	adiw	r24, 0x06	; 6
     892:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <longjmp>
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <schedule>:
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <msgQ>
     8ac:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <msgQ+0x1>
     8b0:	30 97       	sbiw	r30, 0x00	; 0
     8b2:	61 f1       	breq	.+88     	; 0x90c <schedule+0x6c>
     8b4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
     8b8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	31 f1       	breq	.+76     	; 0x90c <schedule+0x6c>
     8c0:	c0 91 27 01 	lds	r28, 0x0127	; 0x800127 <activeStack>
     8c4:	d0 91 28 01 	lds	r29, 0x0128	; 0x800128 <activeStack+0x1>
     8c8:	aa 81       	ldd	r26, Y+2	; 0x02
     8ca:	bb 81       	ldd	r27, Y+3	; 0x03
     8cc:	10 97       	sbiw	r26, 0x00	; 0
     8ce:	79 f0       	breq	.+30     	; 0x8ee <schedule+0x4e>
     8d0:	46 81       	ldd	r20, Z+6	; 0x06
     8d2:	57 81       	ldd	r21, Z+7	; 0x07
     8d4:	60 85       	ldd	r22, Z+8	; 0x08
     8d6:	71 85       	ldd	r23, Z+9	; 0x09
     8d8:	16 96       	adiw	r26, 0x06	; 6
     8da:	0d 91       	ld	r16, X+
     8dc:	1d 91       	ld	r17, X+
     8de:	2d 91       	ld	r18, X+
     8e0:	3c 91       	ld	r19, X
     8e2:	19 97       	sbiw	r26, 0x09	; 9
     8e4:	40 1b       	sub	r20, r16
     8e6:	51 0b       	sbc	r21, r17
     8e8:	62 0b       	sbc	r22, r18
     8ea:	73 0b       	sbc	r23, r19
     8ec:	7a f4       	brpl	.+30     	; 0x90c <schedule+0x6c>
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 81       	ld	r18, Z
     8f2:	31 81       	ldd	r19, Z+1	; 0x01
     8f4:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <threadPool+0x1>
     8f8:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <threadPool>
     8fc:	d1 83       	std	Z+1, r29	; 0x01
     8fe:	c0 83       	st	Z, r28
     900:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <activeStack+0x1>
     904:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <activeStack>
     908:	0e 94 30 04 	call	0x860	; 0x860 <dispatch>
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	08 95       	ret

00000916 <__vector_1>:
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	2f 93       	push	r18
     922:	3f 93       	push	r19
     924:	4f 93       	push	r20
     926:	5f 93       	push	r21
     928:	6f 93       	push	r22
     92a:	7f 93       	push	r23
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	af 93       	push	r26
     932:	bf 93       	push	r27
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
     938:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     93c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     940:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     944:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     948:	c9 01       	movw	r24, r18
     94a:	03 2e       	mov	r0, r19
     94c:	00 0c       	add	r0, r0
     94e:	aa 0b       	sbc	r26, r26
     950:	bb 0b       	sbc	r27, r27
     952:	dc 01       	movw	r26, r24
     954:	99 27       	eor	r25, r25
     956:	88 27       	eor	r24, r24
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	84 2b       	or	r24, r20
     95e:	95 2b       	or	r25, r21
     960:	a6 2b       	or	r26, r22
     962:	b7 2b       	or	r27, r23
     964:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     968:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     96c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     970:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     974:	b0 9b       	sbis	0x16, 0	; 22
     976:	1b c0       	rjmp	.+54     	; 0x9ae <__vector_1+0x98>
     978:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     97c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     980:	c9 01       	movw	r24, r18
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	09 2e       	mov	r0, r25
     986:	00 0c       	add	r0, r0
     988:	aa 0b       	sbc	r26, r26
     98a:	bb 0b       	sbc	r27, r27
     98c:	dc 01       	movw	r26, r24
     98e:	99 27       	eor	r25, r25
     990:	88 27       	eor	r24, r24
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	84 2b       	or	r24, r20
     998:	95 2b       	or	r25, r21
     99a:	a6 2b       	or	r26, r22
     99c:	b7 2b       	or	r27, r23
     99e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     9a2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     9a6:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     9aa:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     9ae:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable>
     9b2:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <__vector_1+0xb2>
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable>
     9c2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1>
     9c6:	09 95       	icall
     9c8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	bf 91       	pop	r27
     9d2:	af 91       	pop	r26
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	7f 91       	pop	r23
     9da:	6f 91       	pop	r22
     9dc:	5f 91       	pop	r21
     9de:	4f 91       	pop	r20
     9e0:	3f 91       	pop	r19
     9e2:	2f 91       	pop	r18
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	0f 90       	pop	r0
     9ea:	1f 90       	pop	r1
     9ec:	18 95       	reti

000009ee <__vector_2>:
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     a14:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     a18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a20:	c9 01       	movw	r24, r18
     a22:	03 2e       	mov	r0, r19
     a24:	00 0c       	add	r0, r0
     a26:	aa 0b       	sbc	r26, r26
     a28:	bb 0b       	sbc	r27, r27
     a2a:	dc 01       	movw	r26, r24
     a2c:	99 27       	eor	r25, r25
     a2e:	88 27       	eor	r24, r24
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	84 2b       	or	r24, r20
     a36:	95 2b       	or	r25, r21
     a38:	a6 2b       	or	r26, r22
     a3a:	b7 2b       	or	r27, r23
     a3c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     a40:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     a44:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     a48:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     a4c:	b0 9b       	sbis	0x16, 0	; 22
     a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__vector_2+0x98>
     a50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a58:	c9 01       	movw	r24, r18
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	09 2e       	mov	r0, r25
     a5e:	00 0c       	add	r0, r0
     a60:	aa 0b       	sbc	r26, r26
     a62:	bb 0b       	sbc	r27, r27
     a64:	dc 01       	movw	r26, r24
     a66:	99 27       	eor	r25, r25
     a68:	88 27       	eor	r24, r24
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	84 2b       	or	r24, r20
     a70:	95 2b       	or	r25, r21
     a72:	a6 2b       	or	r26, r22
     a74:	b7 2b       	or	r27, r23
     a76:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     a7a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     a7e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     a82:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     a86:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x2>
     a8a:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x3>
     a8e:	30 97       	sbiw	r30, 0x00	; 0
     a90:	39 f0       	breq	.+14     	; 0xaa0 <__vector_2+0xb2>
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x2>
     a9a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x3>
     a9e:	09 95       	icall
     aa0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_3>:
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
     ae8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     aec:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     af0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     af4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     af8:	c9 01       	movw	r24, r18
     afa:	03 2e       	mov	r0, r19
     afc:	00 0c       	add	r0, r0
     afe:	aa 0b       	sbc	r26, r26
     b00:	bb 0b       	sbc	r27, r27
     b02:	dc 01       	movw	r26, r24
     b04:	99 27       	eor	r25, r25
     b06:	88 27       	eor	r24, r24
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	84 2b       	or	r24, r20
     b0e:	95 2b       	or	r25, r21
     b10:	a6 2b       	or	r26, r22
     b12:	b7 2b       	or	r27, r23
     b14:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     b18:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     b1c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     b20:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     b24:	b0 9b       	sbis	0x16, 0	; 22
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <__vector_3+0x98>
     b28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b30:	c9 01       	movw	r24, r18
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	09 2e       	mov	r0, r25
     b36:	00 0c       	add	r0, r0
     b38:	aa 0b       	sbc	r26, r26
     b3a:	bb 0b       	sbc	r27, r27
     b3c:	dc 01       	movw	r26, r24
     b3e:	99 27       	eor	r25, r25
     b40:	88 27       	eor	r24, r24
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	84 2b       	or	r24, r20
     b48:	95 2b       	or	r25, r21
     b4a:	a6 2b       	or	r26, r22
     b4c:	b7 2b       	or	r27, r23
     b4e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     b52:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     b56:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     b5a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     b5e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x4>
     b62:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x5>
     b66:	30 97       	sbiw	r30, 0x00	; 0
     b68:	39 f0       	breq	.+14     	; 0xb78 <__vector_3+0xb2>
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x4>
     b72:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x5>
     b76:	09 95       	icall
     b78:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_4>:
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
     bc0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     bc4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     bc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bd0:	c9 01       	movw	r24, r18
     bd2:	03 2e       	mov	r0, r19
     bd4:	00 0c       	add	r0, r0
     bd6:	aa 0b       	sbc	r26, r26
     bd8:	bb 0b       	sbc	r27, r27
     bda:	dc 01       	movw	r26, r24
     bdc:	99 27       	eor	r25, r25
     bde:	88 27       	eor	r24, r24
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	84 2b       	or	r24, r20
     be6:	95 2b       	or	r25, r21
     be8:	a6 2b       	or	r26, r22
     bea:	b7 2b       	or	r27, r23
     bec:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     bf0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     bf4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     bf8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     bfc:	b0 9b       	sbis	0x16, 0	; 22
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <__vector_4+0x98>
     c00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c08:	c9 01       	movw	r24, r18
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	09 2e       	mov	r0, r25
     c0e:	00 0c       	add	r0, r0
     c10:	aa 0b       	sbc	r26, r26
     c12:	bb 0b       	sbc	r27, r27
     c14:	dc 01       	movw	r26, r24
     c16:	99 27       	eor	r25, r25
     c18:	88 27       	eor	r24, r24
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	84 2b       	or	r24, r20
     c20:	95 2b       	or	r25, r21
     c22:	a6 2b       	or	r26, r22
     c24:	b7 2b       	or	r27, r23
     c26:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     c2a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     c2e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     c32:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     c36:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x6>
     c3a:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x7>
     c3e:	30 97       	sbiw	r30, 0x00	; 0
     c40:	39 f0       	breq	.+14     	; 0xc50 <__vector_4+0xb2>
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x6>
     c4a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x7>
     c4e:	09 95       	icall
     c50:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_5>:
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     c9c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     ca0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ca4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca8:	c9 01       	movw	r24, r18
     caa:	03 2e       	mov	r0, r19
     cac:	00 0c       	add	r0, r0
     cae:	aa 0b       	sbc	r26, r26
     cb0:	bb 0b       	sbc	r27, r27
     cb2:	dc 01       	movw	r26, r24
     cb4:	99 27       	eor	r25, r25
     cb6:	88 27       	eor	r24, r24
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	84 2b       	or	r24, r20
     cbe:	95 2b       	or	r25, r21
     cc0:	a6 2b       	or	r26, r22
     cc2:	b7 2b       	or	r27, r23
     cc4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     cc8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     ccc:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     cd0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     cd4:	b0 9b       	sbis	0x16, 0	; 22
     cd6:	1b c0       	rjmp	.+54     	; 0xd0e <__vector_5+0x98>
     cd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cdc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ce0:	c9 01       	movw	r24, r18
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	09 2e       	mov	r0, r25
     ce6:	00 0c       	add	r0, r0
     ce8:	aa 0b       	sbc	r26, r26
     cea:	bb 0b       	sbc	r27, r27
     cec:	dc 01       	movw	r26, r24
     cee:	99 27       	eor	r25, r25
     cf0:	88 27       	eor	r24, r24
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	84 2b       	or	r24, r20
     cf8:	95 2b       	or	r25, r21
     cfa:	a6 2b       	or	r26, r22
     cfc:	b7 2b       	or	r27, r23
     cfe:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     d02:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     d06:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     d0a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     d0e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x8>
     d12:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x9>
     d16:	30 97       	sbiw	r30, 0x00	; 0
     d18:	39 f0       	breq	.+14     	; 0xd28 <__vector_5+0xb2>
     d1a:	64 e0       	ldi	r22, 0x04	; 4
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x8>
     d22:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x9>
     d26:	09 95       	icall
     d28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_10>:
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     d74:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     d78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d80:	c9 01       	movw	r24, r18
     d82:	03 2e       	mov	r0, r19
     d84:	00 0c       	add	r0, r0
     d86:	aa 0b       	sbc	r26, r26
     d88:	bb 0b       	sbc	r27, r27
     d8a:	dc 01       	movw	r26, r24
     d8c:	99 27       	eor	r25, r25
     d8e:	88 27       	eor	r24, r24
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	84 2b       	or	r24, r20
     d96:	95 2b       	or	r25, r21
     d98:	a6 2b       	or	r26, r22
     d9a:	b7 2b       	or	r27, r23
     d9c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     da0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     da4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     da8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     dac:	b0 9b       	sbis	0x16, 0	; 22
     dae:	1b c0       	rjmp	.+54     	; 0xde6 <__vector_10+0x98>
     db0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     db4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     db8:	c9 01       	movw	r24, r18
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	09 2e       	mov	r0, r25
     dbe:	00 0c       	add	r0, r0
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	dc 01       	movw	r26, r24
     dc6:	99 27       	eor	r25, r25
     dc8:	88 27       	eor	r24, r24
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	84 2b       	or	r24, r20
     dd0:	95 2b       	or	r25, r21
     dd2:	a6 2b       	or	r26, r22
     dd4:	b7 2b       	or	r27, r23
     dd6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     dda:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     dde:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     de2:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     de6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0xa>
     dea:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0xb>
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	39 f0       	breq	.+14     	; 0xe00 <__vector_10+0xb2>
     df2:	65 e0       	ldi	r22, 0x05	; 5
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0xa>
     dfa:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0xb>
     dfe:	09 95       	icall
     e00:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <__vector_11>:
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     e4c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     e50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e58:	c9 01       	movw	r24, r18
     e5a:	03 2e       	mov	r0, r19
     e5c:	00 0c       	add	r0, r0
     e5e:	aa 0b       	sbc	r26, r26
     e60:	bb 0b       	sbc	r27, r27
     e62:	dc 01       	movw	r26, r24
     e64:	99 27       	eor	r25, r25
     e66:	88 27       	eor	r24, r24
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 2b       	or	r24, r20
     e6e:	95 2b       	or	r25, r21
     e70:	a6 2b       	or	r26, r22
     e72:	b7 2b       	or	r27, r23
     e74:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     e78:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     e7c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     e80:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     e84:	b0 9b       	sbis	0x16, 0	; 22
     e86:	1b c0       	rjmp	.+54     	; 0xebe <__vector_11+0x98>
     e88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e90:	c9 01       	movw	r24, r18
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	09 2e       	mov	r0, r25
     e96:	00 0c       	add	r0, r0
     e98:	aa 0b       	sbc	r26, r26
     e9a:	bb 0b       	sbc	r27, r27
     e9c:	dc 01       	movw	r26, r24
     e9e:	99 27       	eor	r25, r25
     ea0:	88 27       	eor	r24, r24
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	84 2b       	or	r24, r20
     ea8:	95 2b       	or	r25, r21
     eaa:	a6 2b       	or	r26, r22
     eac:	b7 2b       	or	r27, r23
     eae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     eb2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     eb6:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     eba:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     ebe:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0xc>
     ec2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0xd>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	39 f0       	breq	.+14     	; 0xed8 <__vector_11+0xb2>
     eca:	66 e0       	ldi	r22, 0x06	; 6
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0xc>
     ed2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0xd>
     ed6:	09 95       	icall
     ed8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_12>:
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     f24:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     f28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f30:	c9 01       	movw	r24, r18
     f32:	03 2e       	mov	r0, r19
     f34:	00 0c       	add	r0, r0
     f36:	aa 0b       	sbc	r26, r26
     f38:	bb 0b       	sbc	r27, r27
     f3a:	dc 01       	movw	r26, r24
     f3c:	99 27       	eor	r25, r25
     f3e:	88 27       	eor	r24, r24
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	84 2b       	or	r24, r20
     f46:	95 2b       	or	r25, r21
     f48:	a6 2b       	or	r26, r22
     f4a:	b7 2b       	or	r27, r23
     f4c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     f50:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     f54:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     f58:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     f5c:	b0 9b       	sbis	0x16, 0	; 22
     f5e:	1b c0       	rjmp	.+54     	; 0xf96 <__vector_12+0x98>
     f60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f68:	c9 01       	movw	r24, r18
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	09 2e       	mov	r0, r25
     f6e:	00 0c       	add	r0, r0
     f70:	aa 0b       	sbc	r26, r26
     f72:	bb 0b       	sbc	r27, r27
     f74:	dc 01       	movw	r26, r24
     f76:	99 27       	eor	r25, r25
     f78:	88 27       	eor	r24, r24
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	84 2b       	or	r24, r20
     f80:	95 2b       	or	r25, r21
     f82:	a6 2b       	or	r26, r22
     f84:	b7 2b       	or	r27, r23
     f86:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     f8a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     f8e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     f92:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     f96:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0xe>
     f9a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0xf>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <__vector_12+0xb2>
     fa2:	67 e0       	ldi	r22, 0x07	; 7
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0xe>
     faa:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0xf>
     fae:	09 95       	icall
     fb0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_13>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     ffc:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1008:	c9 01       	movw	r24, r18
    100a:	03 2e       	mov	r0, r19
    100c:	00 0c       	add	r0, r0
    100e:	aa 0b       	sbc	r26, r26
    1010:	bb 0b       	sbc	r27, r27
    1012:	dc 01       	movw	r26, r24
    1014:	99 27       	eor	r25, r25
    1016:	88 27       	eor	r24, r24
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	84 2b       	or	r24, r20
    101e:	95 2b       	or	r25, r21
    1020:	a6 2b       	or	r26, r22
    1022:	b7 2b       	or	r27, r23
    1024:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1028:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    102c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1030:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1034:	b0 9b       	sbis	0x16, 0	; 22
    1036:	1b c0       	rjmp	.+54     	; 0x106e <__vector_13+0x98>
    1038:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    103c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1040:	c9 01       	movw	r24, r18
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	09 2e       	mov	r0, r25
    1046:	00 0c       	add	r0, r0
    1048:	aa 0b       	sbc	r26, r26
    104a:	bb 0b       	sbc	r27, r27
    104c:	dc 01       	movw	r26, r24
    104e:	99 27       	eor	r25, r25
    1050:	88 27       	eor	r24, r24
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	84 2b       	or	r24, r20
    1058:	95 2b       	or	r25, r21
    105a:	a6 2b       	or	r26, r22
    105c:	b7 2b       	or	r27, r23
    105e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1062:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1066:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    106a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    106e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x10>
    1072:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x11>
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	39 f0       	breq	.+14     	; 0x1088 <__vector_13+0xb2>
    107a:	68 e0       	ldi	r22, 0x08	; 8
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x10>
    1082:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x11>
    1086:	09 95       	icall
    1088:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_14>:
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    10d4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    10d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10e0:	c9 01       	movw	r24, r18
    10e2:	03 2e       	mov	r0, r19
    10e4:	00 0c       	add	r0, r0
    10e6:	aa 0b       	sbc	r26, r26
    10e8:	bb 0b       	sbc	r27, r27
    10ea:	dc 01       	movw	r26, r24
    10ec:	99 27       	eor	r25, r25
    10ee:	88 27       	eor	r24, r24
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	84 2b       	or	r24, r20
    10f6:	95 2b       	or	r25, r21
    10f8:	a6 2b       	or	r26, r22
    10fa:	b7 2b       	or	r27, r23
    10fc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1100:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1104:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1108:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    110c:	b0 9b       	sbis	0x16, 0	; 22
    110e:	1b c0       	rjmp	.+54     	; 0x1146 <__vector_14+0x98>
    1110:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1114:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1118:	c9 01       	movw	r24, r18
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	09 2e       	mov	r0, r25
    111e:	00 0c       	add	r0, r0
    1120:	aa 0b       	sbc	r26, r26
    1122:	bb 0b       	sbc	r27, r27
    1124:	dc 01       	movw	r26, r24
    1126:	99 27       	eor	r25, r25
    1128:	88 27       	eor	r24, r24
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	84 2b       	or	r24, r20
    1130:	95 2b       	or	r25, r21
    1132:	a6 2b       	or	r26, r22
    1134:	b7 2b       	or	r27, r23
    1136:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    113a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    113e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1142:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1146:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x12>
    114a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x13>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	39 f0       	breq	.+14     	; 0x1160 <__vector_14+0xb2>
    1152:	69 e0       	ldi	r22, 0x09	; 9
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x12>
    115a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x13>
    115e:	09 95       	icall
    1160:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_15>:
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    11ac:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    11b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b8:	c9 01       	movw	r24, r18
    11ba:	03 2e       	mov	r0, r19
    11bc:	00 0c       	add	r0, r0
    11be:	aa 0b       	sbc	r26, r26
    11c0:	bb 0b       	sbc	r27, r27
    11c2:	dc 01       	movw	r26, r24
    11c4:	99 27       	eor	r25, r25
    11c6:	88 27       	eor	r24, r24
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	84 2b       	or	r24, r20
    11ce:	95 2b       	or	r25, r21
    11d0:	a6 2b       	or	r26, r22
    11d2:	b7 2b       	or	r27, r23
    11d4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    11d8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    11dc:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    11e0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    11e4:	b0 9b       	sbis	0x16, 0	; 22
    11e6:	1b c0       	rjmp	.+54     	; 0x121e <__vector_15+0x98>
    11e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11f0:	c9 01       	movw	r24, r18
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	09 2e       	mov	r0, r25
    11f6:	00 0c       	add	r0, r0
    11f8:	aa 0b       	sbc	r26, r26
    11fa:	bb 0b       	sbc	r27, r27
    11fc:	dc 01       	movw	r26, r24
    11fe:	99 27       	eor	r25, r25
    1200:	88 27       	eor	r24, r24
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	84 2b       	or	r24, r20
    1208:	95 2b       	or	r25, r21
    120a:	a6 2b       	or	r26, r22
    120c:	b7 2b       	or	r27, r23
    120e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1212:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1216:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    121a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    121e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x14>
    1222:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x15>
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	39 f0       	breq	.+14     	; 0x1238 <__vector_15+0xb2>
    122a:	6a e0       	ldi	r22, 0x0A	; 10
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x14>
    1232:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x15>
    1236:	09 95       	icall
    1238:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_16>:
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1284:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1288:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    128c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1290:	c9 01       	movw	r24, r18
    1292:	03 2e       	mov	r0, r19
    1294:	00 0c       	add	r0, r0
    1296:	aa 0b       	sbc	r26, r26
    1298:	bb 0b       	sbc	r27, r27
    129a:	dc 01       	movw	r26, r24
    129c:	99 27       	eor	r25, r25
    129e:	88 27       	eor	r24, r24
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	84 2b       	or	r24, r20
    12a6:	95 2b       	or	r25, r21
    12a8:	a6 2b       	or	r26, r22
    12aa:	b7 2b       	or	r27, r23
    12ac:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    12b0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    12b4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    12b8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    12bc:	b0 9b       	sbis	0x16, 0	; 22
    12be:	1b c0       	rjmp	.+54     	; 0x12f6 <__vector_16+0x98>
    12c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12c8:	c9 01       	movw	r24, r18
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	09 2e       	mov	r0, r25
    12ce:	00 0c       	add	r0, r0
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	bb 0b       	sbc	r27, r27
    12d4:	dc 01       	movw	r26, r24
    12d6:	99 27       	eor	r25, r25
    12d8:	88 27       	eor	r24, r24
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	84 2b       	or	r24, r20
    12e0:	95 2b       	or	r25, r21
    12e2:	a6 2b       	or	r26, r22
    12e4:	b7 2b       	or	r27, r23
    12e6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    12ea:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    12ee:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    12f2:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    12f6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x16>
    12fa:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x17>
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	39 f0       	breq	.+14     	; 0x1310 <__vector_16+0xb2>
    1302:	6b e0       	ldi	r22, 0x0B	; 11
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x16>
    130a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x17>
    130e:	09 95       	icall
    1310:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_17>:
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    135c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1360:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1364:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1368:	c9 01       	movw	r24, r18
    136a:	03 2e       	mov	r0, r19
    136c:	00 0c       	add	r0, r0
    136e:	aa 0b       	sbc	r26, r26
    1370:	bb 0b       	sbc	r27, r27
    1372:	dc 01       	movw	r26, r24
    1374:	99 27       	eor	r25, r25
    1376:	88 27       	eor	r24, r24
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	84 2b       	or	r24, r20
    137e:	95 2b       	or	r25, r21
    1380:	a6 2b       	or	r26, r22
    1382:	b7 2b       	or	r27, r23
    1384:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1388:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    138c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1390:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1394:	b0 9b       	sbis	0x16, 0	; 22
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <__vector_17+0x98>
    1398:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    139c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13a0:	c9 01       	movw	r24, r18
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	09 2e       	mov	r0, r25
    13a6:	00 0c       	add	r0, r0
    13a8:	aa 0b       	sbc	r26, r26
    13aa:	bb 0b       	sbc	r27, r27
    13ac:	dc 01       	movw	r26, r24
    13ae:	99 27       	eor	r25, r25
    13b0:	88 27       	eor	r24, r24
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	84 2b       	or	r24, r20
    13b8:	95 2b       	or	r25, r21
    13ba:	a6 2b       	or	r26, r22
    13bc:	b7 2b       	or	r27, r23
    13be:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    13c2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    13c6:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    13ca:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    13ce:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x18>
    13d2:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x19>
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <__vector_17+0xb2>
    13da:	6c e0       	ldi	r22, 0x0C	; 12
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x18>
    13e2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x19>
    13e6:	09 95       	icall
    13e8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_18>:
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1434:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1438:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    143c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1440:	c9 01       	movw	r24, r18
    1442:	03 2e       	mov	r0, r19
    1444:	00 0c       	add	r0, r0
    1446:	aa 0b       	sbc	r26, r26
    1448:	bb 0b       	sbc	r27, r27
    144a:	dc 01       	movw	r26, r24
    144c:	99 27       	eor	r25, r25
    144e:	88 27       	eor	r24, r24
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	84 2b       	or	r24, r20
    1456:	95 2b       	or	r25, r21
    1458:	a6 2b       	or	r26, r22
    145a:	b7 2b       	or	r27, r23
    145c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1460:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1464:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1468:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    146c:	b0 9b       	sbis	0x16, 0	; 22
    146e:	1b c0       	rjmp	.+54     	; 0x14a6 <__vector_18+0x98>
    1470:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1474:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1478:	c9 01       	movw	r24, r18
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	09 2e       	mov	r0, r25
    147e:	00 0c       	add	r0, r0
    1480:	aa 0b       	sbc	r26, r26
    1482:	bb 0b       	sbc	r27, r27
    1484:	dc 01       	movw	r26, r24
    1486:	99 27       	eor	r25, r25
    1488:	88 27       	eor	r24, r24
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	84 2b       	or	r24, r20
    1490:	95 2b       	or	r25, r21
    1492:	a6 2b       	or	r26, r22
    1494:	b7 2b       	or	r27, r23
    1496:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    149a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    149e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    14a2:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    14a6:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x1a>
    14aa:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x1b>
    14ae:	30 97       	sbiw	r30, 0x00	; 0
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <__vector_18+0xb2>
    14b2:	6d e0       	ldi	r22, 0x0D	; 13
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x1a>
    14ba:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x1b>
    14be:	09 95       	icall
    14c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	7f 91       	pop	r23
    14d2:	6f 91       	pop	r22
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <__vector_19>:
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	2f 93       	push	r18
    14f2:	3f 93       	push	r19
    14f4:	4f 93       	push	r20
    14f6:	5f 93       	push	r21
    14f8:	6f 93       	push	r22
    14fa:	7f 93       	push	r23
    14fc:	8f 93       	push	r24
    14fe:	9f 93       	push	r25
    1500:	af 93       	push	r26
    1502:	bf 93       	push	r27
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
    1508:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    150c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1510:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1514:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1518:	c9 01       	movw	r24, r18
    151a:	03 2e       	mov	r0, r19
    151c:	00 0c       	add	r0, r0
    151e:	aa 0b       	sbc	r26, r26
    1520:	bb 0b       	sbc	r27, r27
    1522:	dc 01       	movw	r26, r24
    1524:	99 27       	eor	r25, r25
    1526:	88 27       	eor	r24, r24
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	84 2b       	or	r24, r20
    152e:	95 2b       	or	r25, r21
    1530:	a6 2b       	or	r26, r22
    1532:	b7 2b       	or	r27, r23
    1534:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1538:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    153c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1540:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1544:	b0 9b       	sbis	0x16, 0	; 22
    1546:	1b c0       	rjmp	.+54     	; 0x157e <__vector_19+0x98>
    1548:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    154c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1550:	c9 01       	movw	r24, r18
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	aa 0b       	sbc	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	dc 01       	movw	r26, r24
    155e:	99 27       	eor	r25, r25
    1560:	88 27       	eor	r24, r24
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	84 2b       	or	r24, r20
    1568:	95 2b       	or	r25, r21
    156a:	a6 2b       	or	r26, r22
    156c:	b7 2b       	or	r27, r23
    156e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1572:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1576:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    157a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    157e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x1c>
    1582:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x1d>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	39 f0       	breq	.+14     	; 0x1598 <__vector_19+0xb2>
    158a:	6e e0       	ldi	r22, 0x0E	; 14
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x1c>
    1592:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x1d>
    1596:	09 95       	icall
    1598:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_20>:
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    15e4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    15e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15f0:	c9 01       	movw	r24, r18
    15f2:	03 2e       	mov	r0, r19
    15f4:	00 0c       	add	r0, r0
    15f6:	aa 0b       	sbc	r26, r26
    15f8:	bb 0b       	sbc	r27, r27
    15fa:	dc 01       	movw	r26, r24
    15fc:	99 27       	eor	r25, r25
    15fe:	88 27       	eor	r24, r24
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	84 2b       	or	r24, r20
    1606:	95 2b       	or	r25, r21
    1608:	a6 2b       	or	r26, r22
    160a:	b7 2b       	or	r27, r23
    160c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1610:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1614:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1618:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    161c:	b0 9b       	sbis	0x16, 0	; 22
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <__vector_20+0x98>
    1620:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1624:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1628:	c9 01       	movw	r24, r18
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	09 2e       	mov	r0, r25
    162e:	00 0c       	add	r0, r0
    1630:	aa 0b       	sbc	r26, r26
    1632:	bb 0b       	sbc	r27, r27
    1634:	dc 01       	movw	r26, r24
    1636:	99 27       	eor	r25, r25
    1638:	88 27       	eor	r24, r24
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	84 2b       	or	r24, r20
    1640:	95 2b       	or	r25, r21
    1642:	a6 2b       	or	r26, r22
    1644:	b7 2b       	or	r27, r23
    1646:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    164a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    164e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1652:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1656:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x1e>
    165a:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x1f>
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	39 f0       	breq	.+14     	; 0x1670 <__vector_20+0xb2>
    1662:	6f e0       	ldi	r22, 0x0F	; 15
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x1e>
    166a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x1f>
    166e:	09 95       	icall
    1670:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <__vector_21>:
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
    16b8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    16bc:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    16c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16c8:	c9 01       	movw	r24, r18
    16ca:	03 2e       	mov	r0, r19
    16cc:	00 0c       	add	r0, r0
    16ce:	aa 0b       	sbc	r26, r26
    16d0:	bb 0b       	sbc	r27, r27
    16d2:	dc 01       	movw	r26, r24
    16d4:	99 27       	eor	r25, r25
    16d6:	88 27       	eor	r24, r24
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	84 2b       	or	r24, r20
    16de:	95 2b       	or	r25, r21
    16e0:	a6 2b       	or	r26, r22
    16e2:	b7 2b       	or	r27, r23
    16e4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    16e8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    16ec:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    16f0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    16f4:	b0 9b       	sbis	0x16, 0	; 22
    16f6:	1b c0       	rjmp	.+54     	; 0x172e <__vector_21+0x98>
    16f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1700:	c9 01       	movw	r24, r18
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	09 2e       	mov	r0, r25
    1706:	00 0c       	add	r0, r0
    1708:	aa 0b       	sbc	r26, r26
    170a:	bb 0b       	sbc	r27, r27
    170c:	dc 01       	movw	r26, r24
    170e:	99 27       	eor	r25, r25
    1710:	88 27       	eor	r24, r24
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	84 2b       	or	r24, r20
    1718:	95 2b       	or	r25, r21
    171a:	a6 2b       	or	r26, r22
    171c:	b7 2b       	or	r27, r23
    171e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1722:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1726:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    172a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    172e:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0x20>
    1732:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0x21>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	39 f0       	breq	.+14     	; 0x1748 <__vector_21+0xb2>
    173a:	60 e1       	ldi	r22, 0x10	; 16
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0x20>
    1742:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0x21>
    1746:	09 95       	icall
    1748:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_22>:
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1794:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1798:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    179c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17a0:	c9 01       	movw	r24, r18
    17a2:	03 2e       	mov	r0, r19
    17a4:	00 0c       	add	r0, r0
    17a6:	aa 0b       	sbc	r26, r26
    17a8:	bb 0b       	sbc	r27, r27
    17aa:	dc 01       	movw	r26, r24
    17ac:	99 27       	eor	r25, r25
    17ae:	88 27       	eor	r24, r24
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	84 2b       	or	r24, r20
    17b6:	95 2b       	or	r25, r21
    17b8:	a6 2b       	or	r26, r22
    17ba:	b7 2b       	or	r27, r23
    17bc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    17c0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    17c4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    17c8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    17cc:	b0 9b       	sbis	0x16, 0	; 22
    17ce:	1b c0       	rjmp	.+54     	; 0x1806 <__vector_22+0x98>
    17d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17d8:	c9 01       	movw	r24, r18
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	09 2e       	mov	r0, r25
    17de:	00 0c       	add	r0, r0
    17e0:	aa 0b       	sbc	r26, r26
    17e2:	bb 0b       	sbc	r27, r27
    17e4:	dc 01       	movw	r26, r24
    17e6:	99 27       	eor	r25, r25
    17e8:	88 27       	eor	r24, r24
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	84 2b       	or	r24, r20
    17f0:	95 2b       	or	r25, r21
    17f2:	a6 2b       	or	r26, r22
    17f4:	b7 2b       	or	r27, r23
    17f6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    17fa:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    17fe:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1802:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1806:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0x22>
    180a:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0x23>
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	39 f0       	breq	.+14     	; 0x1820 <__vector_22+0xb2>
    1812:	61 e1       	ldi	r22, 0x11	; 17
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0x22>
    181a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0x23>
    181e:	09 95       	icall
    1820:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    1824:	ff 91       	pop	r31
    1826:	ef 91       	pop	r30
    1828:	bf 91       	pop	r27
    182a:	af 91       	pop	r26
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	7f 91       	pop	r23
    1832:	6f 91       	pop	r22
    1834:	5f 91       	pop	r21
    1836:	4f 91       	pop	r20
    1838:	3f 91       	pop	r19
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <enqueueByDeadline>:
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	7b 01       	movw	r14, r22
    1854:	eb 01       	movw	r28, r22
    1856:	a8 81       	ld	r26, Y
    1858:	b9 81       	ldd	r27, Y+1	; 0x01
    185a:	10 97       	sbiw	r26, 0x00	; 0
    185c:	61 f1       	breq	.+88     	; 0x18b6 <enqueueByDeadline+0x70>
    185e:	fc 01       	movw	r30, r24
    1860:	06 81       	ldd	r16, Z+6	; 0x06
    1862:	17 81       	ldd	r17, Z+7	; 0x07
    1864:	20 85       	ldd	r18, Z+8	; 0x08
    1866:	31 85       	ldd	r19, Z+9	; 0x09
    1868:	16 96       	adiw	r26, 0x06	; 6
    186a:	4d 91       	ld	r20, X+
    186c:	5d 91       	ld	r21, X+
    186e:	6d 91       	ld	r22, X+
    1870:	7c 91       	ld	r23, X
    1872:	19 97       	sbiw	r26, 0x09	; 9
    1874:	04 17       	cp	r16, r20
    1876:	15 07       	cpc	r17, r21
    1878:	26 07       	cpc	r18, r22
    187a:	37 07       	cpc	r19, r23
    187c:	14 f4       	brge	.+4      	; 0x1882 <enqueueByDeadline+0x3c>
    187e:	1b c0       	rjmp	.+54     	; 0x18b6 <enqueueByDeadline+0x70>
    1880:	df 01       	movw	r26, r30
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	11 97       	sbiw	r26, 0x01	; 1
    1888:	30 97       	sbiw	r30, 0x00	; 0
    188a:	49 f0       	breq	.+18     	; 0x189e <enqueueByDeadline+0x58>
    188c:	46 81       	ldd	r20, Z+6	; 0x06
    188e:	57 81       	ldd	r21, Z+7	; 0x07
    1890:	60 85       	ldd	r22, Z+8	; 0x08
    1892:	71 85       	ldd	r23, Z+9	; 0x09
    1894:	04 17       	cp	r16, r20
    1896:	15 07       	cpc	r17, r21
    1898:	26 07       	cpc	r18, r22
    189a:	37 07       	cpc	r19, r23
    189c:	8c f7       	brge	.-30     	; 0x1880 <enqueueByDeadline+0x3a>
    189e:	ec 01       	movw	r28, r24
    18a0:	f9 83       	std	Y+1, r31	; 0x01
    18a2:	e8 83       	st	Y, r30
    18a4:	10 97       	sbiw	r26, 0x00	; 0
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <enqueueByDeadline+0x6a>
    18a8:	f7 01       	movw	r30, r14
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <enqueueByDeadline+0x78>
    18b0:	8d 93       	st	X+, r24
    18b2:	9c 93       	st	X, r25
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <enqueueByDeadline+0x78>
    18b6:	ec 01       	movw	r28, r24
    18b8:	b9 83       	std	Y+1, r27	; 0x01
    18ba:	a8 83       	st	Y, r26
    18bc:	f5 cf       	rjmp	.-22     	; 0x18a8 <enqueueByDeadline+0x62>
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	08 95       	ret

000018cc <enqueueByBaseline>:
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	7b 01       	movw	r14, r22
    18da:	eb 01       	movw	r28, r22
    18dc:	a8 81       	ld	r26, Y
    18de:	b9 81       	ldd	r27, Y+1	; 0x01
    18e0:	10 97       	sbiw	r26, 0x00	; 0
    18e2:	61 f1       	breq	.+88     	; 0x193c <enqueueByBaseline+0x70>
    18e4:	fc 01       	movw	r30, r24
    18e6:	02 81       	ldd	r16, Z+2	; 0x02
    18e8:	13 81       	ldd	r17, Z+3	; 0x03
    18ea:	24 81       	ldd	r18, Z+4	; 0x04
    18ec:	35 81       	ldd	r19, Z+5	; 0x05
    18ee:	12 96       	adiw	r26, 0x02	; 2
    18f0:	4d 91       	ld	r20, X+
    18f2:	5d 91       	ld	r21, X+
    18f4:	6d 91       	ld	r22, X+
    18f6:	7c 91       	ld	r23, X
    18f8:	15 97       	sbiw	r26, 0x05	; 5
    18fa:	04 17       	cp	r16, r20
    18fc:	15 07       	cpc	r17, r21
    18fe:	26 07       	cpc	r18, r22
    1900:	37 07       	cpc	r19, r23
    1902:	14 f4       	brge	.+4      	; 0x1908 <enqueueByBaseline+0x3c>
    1904:	1b c0       	rjmp	.+54     	; 0x193c <enqueueByBaseline+0x70>
    1906:	df 01       	movw	r26, r30
    1908:	ed 91       	ld	r30, X+
    190a:	fc 91       	ld	r31, X
    190c:	11 97       	sbiw	r26, 0x01	; 1
    190e:	30 97       	sbiw	r30, 0x00	; 0
    1910:	49 f0       	breq	.+18     	; 0x1924 <enqueueByBaseline+0x58>
    1912:	42 81       	ldd	r20, Z+2	; 0x02
    1914:	53 81       	ldd	r21, Z+3	; 0x03
    1916:	64 81       	ldd	r22, Z+4	; 0x04
    1918:	75 81       	ldd	r23, Z+5	; 0x05
    191a:	04 17       	cp	r16, r20
    191c:	15 07       	cpc	r17, r21
    191e:	26 07       	cpc	r18, r22
    1920:	37 07       	cpc	r19, r23
    1922:	8c f7       	brge	.-30     	; 0x1906 <enqueueByBaseline+0x3a>
    1924:	ec 01       	movw	r28, r24
    1926:	f9 83       	std	Y+1, r31	; 0x01
    1928:	e8 83       	st	Y, r30
    192a:	10 97       	sbiw	r26, 0x00	; 0
    192c:	21 f4       	brne	.+8      	; 0x1936 <enqueueByBaseline+0x6a>
    192e:	f7 01       	movw	r30, r14
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <enqueueByBaseline+0x78>
    1936:	8d 93       	st	X+, r24
    1938:	9c 93       	st	X, r25
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <enqueueByBaseline+0x78>
    193c:	ec 01       	movw	r28, r24
    193e:	b9 83       	std	Y+1, r27	; 0x01
    1940:	a8 83       	st	Y, r26
    1942:	f5 cf       	rjmp	.-22     	; 0x192e <enqueueByBaseline+0x62>
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	08 95       	ret

00001952 <dequeue>:
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	00 d0       	rcall	.+0      	; 0x1958 <dequeue+0x6>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	fc 01       	movw	r30, r24
    195e:	20 81       	ld	r18, Z
    1960:	31 81       	ldd	r19, Z+1	; 0x01
    1962:	3a 83       	std	Y+2, r19	; 0x02
    1964:	29 83       	std	Y+1, r18	; 0x01
    1966:	29 81       	ldd	r18, Y+1	; 0x01
    1968:	3a 81       	ldd	r19, Y+2	; 0x02
    196a:	23 2b       	or	r18, r19
    196c:	51 f0       	breq	.+20     	; 0x1982 <dequeue+0x30>
    196e:	e9 81       	ldd	r30, Y+1	; 0x01
    1970:	fa 81       	ldd	r31, Y+2	; 0x02
    1972:	20 81       	ld	r18, Z
    1974:	31 81       	ldd	r19, Z+1	; 0x01
    1976:	fc 01       	movw	r30, r24
    1978:	31 83       	std	Z+1, r19	; 0x01
    197a:	20 83       	st	Z, r18
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	0b c0       	rjmp	.+22     	; 0x1998 <dequeue+0x46>
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1988:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    198c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	83 bf       	out	0x33, r24	; 51
    1994:	88 95       	sleep
    1996:	fd cf       	rjmp	.-6      	; 0x1992 <dequeue+0x40>
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <__vector_9>:
    19a2:	1f 92       	push	r1
    19a4:	0f 92       	push	r0
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	0f 92       	push	r0
    19aa:	11 24       	eor	r1, r1
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	4f 93       	push	r20
    19b2:	5f 93       	push	r21
    19b4:	6f 93       	push	r22
    19b6:	7f 93       	push	r23
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	ef 93       	push	r30
    19be:	ff 93       	push	r31
    19c0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    19c4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <overflows+0x1>
    19ce:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <overflows>
    19d2:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    19d6:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	01 f1       	breq	.+64     	; 0x1a1e <__vector_9+0x7c>
    19de:	42 81       	ldd	r20, Z+2	; 0x02
    19e0:	53 81       	ldd	r21, Z+3	; 0x03
    19e2:	64 81       	ldd	r22, Z+4	; 0x04
    19e4:	75 81       	ldd	r23, Z+5	; 0x05
    19e6:	86 17       	cp	r24, r22
    19e8:	97 07       	cpc	r25, r23
    19ea:	c9 f4       	brne	.+50     	; 0x1a1e <__vector_9+0x7c>
    19ec:	ca 01       	movw	r24, r20
    19ee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f6:	42 1b       	sub	r20, r18
    19f8:	53 0b       	sbc	r21, r19
    19fa:	41 30       	cpi	r20, 0x01	; 1
    19fc:	51 05       	cpc	r21, r1
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <__vector_9+0x68>
    1a00:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a04:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a0e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a12:	ef e6       	ldi	r30, 0x6F	; 111
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	82 60       	ori	r24, 0x02	; 2
    1a1a:	80 83       	st	Z, r24
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <__vector_9+0x86>
    1a1e:	ef e6       	ldi	r30, 0x6F	; 111
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8d 7f       	andi	r24, 0xFD	; 253
    1a26:	80 83       	st	Z, r24
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	7f 91       	pop	r23
    1a32:	6f 91       	pop	r22
    1a34:	5f 91       	pop	r21
    1a36:	4f 91       	pop	r20
    1a38:	3f 91       	pop	r19
    1a3a:	2f 91       	pop	r18
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <__vector_7>:
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	2f 93       	push	r18
    1a5a:	3f 93       	push	r19
    1a5c:	4f 93       	push	r20
    1a5e:	5f 93       	push	r21
    1a60:	6f 93       	push	r22
    1a62:	7f 93       	push	r23
    1a64:	8f 93       	push	r24
    1a66:	9f 93       	push	r25
    1a68:	af 93       	push	r26
    1a6a:	bf 93       	push	r27
    1a6c:	ef 93       	push	r30
    1a6e:	ff 93       	push	r31
    1a70:	c0 90 60 01 	lds	r12, 0x0160	; 0x800160 <overflows>
    1a74:	d0 90 61 01 	lds	r13, 0x0161	; 0x800161 <overflows+0x1>
    1a78:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a7c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a80:	b0 99       	sbic	0x16, 0	; 22
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <__vector_7+0x5c>
    1a84:	0d 2c       	mov	r0, r13
    1a86:	00 0c       	add	r0, r0
    1a88:	ee 08       	sbc	r14, r14
    1a8a:	ff 08       	sbc	r15, r15
    1a8c:	d6 01       	movw	r26, r12
    1a8e:	99 27       	eor	r25, r25
    1a90:	88 27       	eor	r24, r24
    1a92:	69 01       	movw	r12, r18
    1a94:	e1 2c       	mov	r14, r1
    1a96:	f1 2c       	mov	r15, r1
    1a98:	c8 2a       	or	r12, r24
    1a9a:	d9 2a       	or	r13, r25
    1a9c:	ea 2a       	or	r14, r26
    1a9e:	fb 2a       	or	r15, r27
    1aa0:	15 c0       	rjmp	.+42     	; 0x1acc <__vector_7+0x86>
    1aa2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aa6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	c8 1a       	sub	r12, r24
    1aae:	d8 0a       	sbc	r13, r24
    1ab0:	0d 2c       	mov	r0, r13
    1ab2:	00 0c       	add	r0, r0
    1ab4:	ee 08       	sbc	r14, r14
    1ab6:	ff 08       	sbc	r15, r15
    1ab8:	d6 01       	movw	r26, r12
    1aba:	99 27       	eor	r25, r25
    1abc:	88 27       	eor	r24, r24
    1abe:	69 01       	movw	r12, r18
    1ac0:	e1 2c       	mov	r14, r1
    1ac2:	f1 2c       	mov	r15, r1
    1ac4:	c8 2a       	or	r12, r24
    1ac6:	d9 2a       	or	r13, r25
    1ac8:	ea 2a       	or	r14, r26
    1aca:	fb 2a       	or	r15, r27
    1acc:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1ad0:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <__vector_7+0x94>
    1ad8:	42 c0       	rjmp	.+132    	; 0x1b5e <__vector_7+0x118>
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	a4 81       	ldd	r26, Z+4	; 0x04
    1ae0:	b5 81       	ldd	r27, Z+5	; 0x05
    1ae2:	8c 19       	sub	r24, r12
    1ae4:	9d 09       	sbc	r25, r13
    1ae6:	ae 09       	sbc	r26, r14
    1ae8:	bf 09       	sbc	r27, r15
    1aea:	18 16       	cp	r1, r24
    1aec:	19 06       	cpc	r1, r25
    1aee:	1a 06       	cpc	r1, r26
    1af0:	1b 06       	cpc	r1, r27
    1af2:	ec f1       	brlt	.+122    	; 0x1b6e <__vector_7+0x128>
    1af4:	86 e6       	ldi	r24, 0x66	; 102
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <dequeue>
    1afc:	68 e6       	ldi	r22, 0x68	; 104
    1afe:	71 e0       	ldi	r23, 0x01	; 1
    1b00:	0e 94 23 0c 	call	0x1846	; 0x1846 <enqueueByDeadline>
    1b04:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1b08:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1b0c:	30 97       	sbiw	r30, 0x00	; 0
    1b0e:	39 f1       	breq	.+78     	; 0x1b5e <__vector_7+0x118>
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	a4 81       	ldd	r26, Z+4	; 0x04
    1b16:	b5 81       	ldd	r27, Z+5	; 0x05
    1b18:	8c 19       	sub	r24, r12
    1b1a:	9d 09       	sbc	r25, r13
    1b1c:	ae 09       	sbc	r26, r14
    1b1e:	bf 09       	sbc	r27, r15
    1b20:	18 16       	cp	r1, r24
    1b22:	19 06       	cpc	r1, r25
    1b24:	1a 06       	cpc	r1, r26
    1b26:	1b 06       	cpc	r1, r27
    1b28:	2c f7       	brge	.-54     	; 0x1af4 <__vector_7+0xae>
    1b2a:	21 c0       	rjmp	.+66     	; 0x1b6e <__vector_7+0x128>
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b36:	84 1b       	sub	r24, r20
    1b38:	95 0b       	sbc	r25, r21
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	31 f4       	brne	.+12     	; 0x1b4a <__vector_7+0x104>
    1b3e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b42:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b46:	2f 5f       	subi	r18, 0xFF	; 255
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b4e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b52:	ef e6       	ldi	r30, 0x6F	; 111
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	82 60       	ori	r24, 0x02	; 2
    1b5a:	80 83       	st	Z, r24
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <__vector_7+0x122>
    1b5e:	ef e6       	ldi	r30, 0x6F	; 111
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8d 7f       	andi	r24, 0xFD	; 253
    1b66:	80 83       	st	Z, r24
    1b68:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    1b6c:	0c c0       	rjmp	.+24     	; 0x1b86 <__vector_7+0x140>
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	a4 81       	ldd	r26, Z+4	; 0x04
    1b74:	b5 81       	ldd	r27, Z+5	; 0x05
    1b76:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1b7a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1b7e:	2a 17       	cp	r18, r26
    1b80:	3b 07       	cpc	r19, r27
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <__vector_7+0x118>
    1b84:	d3 cf       	rjmp	.-90     	; 0x1b2c <__vector_7+0xe6>
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	7f 91       	pop	r23
    1b94:	6f 91       	pop	r22
    1b96:	5f 91       	pop	r21
    1b98:	4f 91       	pop	r20
    1b9a:	3f 91       	pop	r19
    1b9c:	2f 91       	pop	r18
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <async>:
    1bb0:	3f 92       	push	r3
    1bb2:	4f 92       	push	r4
    1bb4:	5f 92       	push	r5
    1bb6:	6f 92       	push	r6
    1bb8:	7f 92       	push	r7
    1bba:	8f 92       	push	r8
    1bbc:	9f 92       	push	r9
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	2b 01       	movw	r4, r22
    1bd4:	3c 01       	movw	r6, r24
    1bd6:	49 01       	movw	r8, r18
    1bd8:	5a 01       	movw	r10, r20
    1bda:	8f b7       	in	r24, 0x3f	; 63
    1bdc:	80 78       	andi	r24, 0x80	; 128
    1bde:	38 2e       	mov	r3, r24
    1be0:	f8 94       	cli
    1be2:	8b e2       	ldi	r24, 0x2B	; 43
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <dequeue>
    1bea:	ec 01       	movw	r28, r24
    1bec:	1b 87       	std	Y+11, r17	; 0x0b
    1bee:	0a 87       	std	Y+10, r16	; 0x0a
    1bf0:	fd 86       	std	Y+13, r15	; 0x0d
    1bf2:	ec 86       	std	Y+12, r14	; 0x0c
    1bf4:	df 86       	std	Y+15, r13	; 0x0f
    1bf6:	ce 86       	std	Y+14, r12	; 0x0e
    1bf8:	33 20       	and	r3, r3
    1bfa:	61 f0       	breq	.+24     	; 0x1c14 <async+0x64>
    1bfc:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <current>
    1c00:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <current+0x1>
    1c04:	02 80       	ldd	r0, Z+2	; 0x02
    1c06:	f3 81       	ldd	r31, Z+3	; 0x03
    1c08:	e0 2d       	mov	r30, r0
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c10:	b5 81       	ldd	r27, Z+5	; 0x05
    1c12:	08 c0       	rjmp	.+16     	; 0x1c24 <async+0x74>
    1c14:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <timestamp>
    1c18:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <timestamp+0x1>
    1c1c:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <timestamp+0x2>
    1c20:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <timestamp+0x3>
    1c24:	48 0e       	add	r4, r24
    1c26:	59 1e       	adc	r5, r25
    1c28:	6a 1e       	adc	r6, r26
    1c2a:	7b 1e       	adc	r7, r27
    1c2c:	4a 82       	std	Y+2, r4	; 0x02
    1c2e:	5b 82       	std	Y+3, r5	; 0x03
    1c30:	6c 82       	std	Y+4, r6	; 0x04
    1c32:	7d 82       	std	Y+5, r7	; 0x05
    1c34:	18 14       	cp	r1, r8
    1c36:	19 04       	cpc	r1, r9
    1c38:	1a 04       	cpc	r1, r10
    1c3a:	1b 04       	cpc	r1, r11
    1c3c:	44 f0       	brlt	.+16     	; 0x1c4e <async+0x9e>
    1c3e:	0f 2e       	mov	r0, r31
    1c40:	88 24       	eor	r8, r8
    1c42:	8a 94       	dec	r8
    1c44:	98 2c       	mov	r9, r8
    1c46:	a8 2c       	mov	r10, r8
    1c48:	ff e7       	ldi	r31, 0x7F	; 127
    1c4a:	bf 2e       	mov	r11, r31
    1c4c:	f0 2d       	mov	r31, r0
    1c4e:	84 0c       	add	r8, r4
    1c50:	95 1c       	adc	r9, r5
    1c52:	a6 1c       	adc	r10, r6
    1c54:	b7 1c       	adc	r11, r7
    1c56:	8e 82       	std	Y+6, r8	; 0x06
    1c58:	9f 82       	std	Y+7, r9	; 0x07
    1c5a:	a8 86       	std	Y+8, r10	; 0x08
    1c5c:	b9 86       	std	Y+9, r11	; 0x09
    1c5e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1c62:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1c66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c6e:	b0 99       	sbic	0x16, 0	; 22
    1c70:	0e c0       	rjmp	.+28     	; 0x1c8e <async+0xde>
    1c72:	09 2e       	mov	r0, r25
    1c74:	00 0c       	add	r0, r0
    1c76:	aa 0b       	sbc	r26, r26
    1c78:	bb 0b       	sbc	r27, r27
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	99 27       	eor	r25, r25
    1c7e:	88 27       	eor	r24, r24
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	84 2b       	or	r24, r20
    1c86:	95 2b       	or	r25, r21
    1c88:	a6 2b       	or	r26, r22
    1c8a:	b7 2b       	or	r27, r23
    1c8c:	13 c0       	rjmp	.+38     	; 0x1cb4 <async+0x104>
    1c8e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c92:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	09 2e       	mov	r0, r25
    1c9a:	00 0c       	add	r0, r0
    1c9c:	aa 0b       	sbc	r26, r26
    1c9e:	bb 0b       	sbc	r27, r27
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	99 27       	eor	r25, r25
    1ca4:	88 27       	eor	r24, r24
    1ca6:	a9 01       	movw	r20, r18
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	84 2b       	or	r24, r20
    1cae:	95 2b       	or	r25, r21
    1cb0:	a6 2b       	or	r26, r22
    1cb2:	b7 2b       	or	r27, r23
    1cb4:	48 1a       	sub	r4, r24
    1cb6:	59 0a       	sbc	r5, r25
    1cb8:	6a 0a       	sbc	r6, r26
    1cba:	7b 0a       	sbc	r7, r27
    1cbc:	14 14       	cp	r1, r4
    1cbe:	15 04       	cpc	r1, r5
    1cc0:	16 04       	cpc	r1, r6
    1cc2:	17 04       	cpc	r1, r7
    1cc4:	ac f5       	brge	.+106    	; 0x1d30 <async+0x180>
    1cc6:	66 e6       	ldi	r22, 0x66	; 102
    1cc8:	71 e0       	ldi	r23, 0x01	; 1
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <enqueueByBaseline>
    1cd0:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1cd4:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1cd8:	30 97       	sbiw	r30, 0x00	; 0
    1cda:	21 f1       	breq	.+72     	; 0x1d24 <async+0x174>
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ce2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce4:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1ce8:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1cec:	2a 17       	cp	r18, r26
    1cee:	3b 07       	cpc	r19, r27
    1cf0:	c9 f4       	brne	.+50     	; 0x1d24 <async+0x174>
    1cf2:	9c 01       	movw	r18, r24
    1cf4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cf8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cfc:	84 1b       	sub	r24, r20
    1cfe:	95 0b       	sbc	r25, r21
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	31 f4       	brne	.+12     	; 0x1d10 <async+0x160>
    1d04:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d08:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d14:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d18:	ef e6       	ldi	r30, 0x6F	; 111
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	80 83       	st	Z, r24
    1d22:	41 c0       	rjmp	.+130    	; 0x1da6 <async+0x1f6>
    1d24:	ef e6       	ldi	r30, 0x6F	; 111
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8d 7f       	andi	r24, 0xFD	; 253
    1d2c:	80 83       	st	Z, r24
    1d2e:	3b c0       	rjmp	.+118    	; 0x1da6 <async+0x1f6>
    1d30:	68 e6       	ldi	r22, 0x68	; 104
    1d32:	71 e0       	ldi	r23, 0x01	; 1
    1d34:	ce 01       	movw	r24, r28
    1d36:	0e 94 23 0c 	call	0x1846	; 0x1846 <enqueueByDeadline>
    1d3a:	33 20       	and	r3, r3
    1d3c:	b9 f1       	breq	.+110    	; 0x1dac <async+0x1fc>
    1d3e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
    1d42:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	81 f1       	breq	.+96     	; 0x1daa <async+0x1fa>
    1d4a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    1d4e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    1d52:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <msgQ>
    1d56:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <msgQ+0x1>
    1d5a:	02 81       	ldd	r16, Z+2	; 0x02
    1d5c:	13 81       	ldd	r17, Z+3	; 0x03
    1d5e:	d9 01       	movw	r26, r18
    1d60:	16 96       	adiw	r26, 0x06	; 6
    1d62:	4d 91       	ld	r20, X+
    1d64:	5d 91       	ld	r21, X+
    1d66:	6d 91       	ld	r22, X+
    1d68:	7c 91       	ld	r23, X
    1d6a:	19 97       	sbiw	r26, 0x09	; 9
    1d6c:	d8 01       	movw	r26, r16
    1d6e:	16 96       	adiw	r26, 0x06	; 6
    1d70:	0d 91       	ld	r16, X+
    1d72:	1d 91       	ld	r17, X+
    1d74:	2d 91       	ld	r18, X+
    1d76:	3c 91       	ld	r19, X
    1d78:	19 97       	sbiw	r26, 0x09	; 9
    1d7a:	40 1b       	sub	r20, r16
    1d7c:	51 0b       	sbc	r21, r17
    1d7e:	62 0b       	sbc	r22, r18
    1d80:	73 0b       	sbc	r23, r19
    1d82:	9a f4       	brpl	.+38     	; 0x1daa <async+0x1fa>
    1d84:	dc 01       	movw	r26, r24
    1d86:	2d 91       	ld	r18, X+
    1d88:	3c 91       	ld	r19, X
    1d8a:	11 97       	sbiw	r26, 0x01	; 1
    1d8c:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <threadPool+0x1>
    1d90:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <threadPool>
    1d94:	ed 93       	st	X+, r30
    1d96:	fc 93       	st	X, r31
    1d98:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <activeStack+0x1>
    1d9c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <activeStack>
    1da0:	0e 94 30 04 	call	0x860	; 0x860 <dispatch>
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <async+0x1fa>
    1da6:	33 20       	and	r3, r3
    1da8:	09 f0       	breq	.+2      	; 0x1dac <async+0x1fc>
    1daa:	78 94       	sei
    1dac:	ce 01       	movw	r24, r28
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	cf 90       	pop	r12
    1dbe:	bf 90       	pop	r11
    1dc0:	af 90       	pop	r10
    1dc2:	9f 90       	pop	r9
    1dc4:	8f 90       	pop	r8
    1dc6:	7f 90       	pop	r7
    1dc8:	6f 90       	pop	r6
    1dca:	5f 90       	pop	r5
    1dcc:	4f 90       	pop	r4
    1dce:	3f 90       	pop	r3
    1dd0:	08 95       	ret

00001dd2 <sync>:
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	7b 01       	movw	r14, r22
    1de6:	6a 01       	movw	r12, r20
    1de8:	1f b7       	in	r17, 0x3f	; 63
    1dea:	10 78       	andi	r17, 0x80	; 128
    1dec:	f8 94       	cli
    1dee:	a8 81       	ld	r26, Y
    1df0:	b9 81       	ldd	r27, Y+1	; 0x01
    1df2:	10 97       	sbiw	r26, 0x00	; 0
    1df4:	61 f1       	breq	.+88     	; 0x1e4e <sync+0x7c>
    1df6:	14 96       	adiw	r26, 0x04	; 4
    1df8:	ed 91       	ld	r30, X+
    1dfa:	fc 91       	ld	r31, X
    1dfc:	15 97       	sbiw	r26, 0x05	; 5
    1dfe:	30 97       	sbiw	r30, 0x00	; 0
    1e00:	41 f0       	breq	.+16     	; 0x1e12 <sync+0x40>
    1e02:	a0 81       	ld	r26, Z
    1e04:	b1 81       	ldd	r27, Z+1	; 0x01
    1e06:	14 96       	adiw	r26, 0x04	; 4
    1e08:	ed 91       	ld	r30, X+
    1e0a:	fc 91       	ld	r31, X
    1e0c:	15 97       	sbiw	r26, 0x05	; 5
    1e0e:	30 97       	sbiw	r30, 0x00	; 0
    1e10:	c1 f7       	brne	.-16     	; 0x1e02 <sync+0x30>
    1e12:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <current>
    1e16:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <current+0x1>
    1e1a:	2a 17       	cp	r18, r26
    1e1c:	3b 07       	cpc	r19, r27
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <sync+0x56>
    1e20:	11 23       	and	r17, r17
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <sync+0x54>
    1e24:	3d c0       	rjmp	.+122    	; 0x1ea0 <sync+0xce>
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <sync+0x64>
    1e28:	11 23       	and	r17, r17
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <sync+0x5c>
    1e2c:	3c c0       	rjmp	.+120    	; 0x1ea6 <sync+0xd4>
    1e2e:	78 94       	sei
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	52 c0       	rjmp	.+164    	; 0x1eda <sync+0x108>
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	d1 f1       	breq	.+116    	; 0x1eb2 <sync+0xe0>
    1e3e:	fc 01       	movw	r30, r24
    1e40:	15 82       	std	Z+5, r1	; 0x05
    1e42:	14 82       	std	Z+4, r1	; 0x04
    1e44:	36 c0       	rjmp	.+108    	; 0x1eb2 <sync+0xe0>
    1e46:	78 94       	sei
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	46 c0       	rjmp	.+140    	; 0x1eda <sync+0x108>
    1e4e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <current>
    1e52:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <current+0x1>
    1e56:	99 83       	std	Y+1, r25	; 0x01
    1e58:	88 83       	st	Y, r24
    1e5a:	11 23       	and	r17, r17
    1e5c:	29 f0       	breq	.+10     	; 0x1e68 <sync+0x96>
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <sync+0x96>
    1e66:	78 94       	sei
    1e68:	b6 01       	movw	r22, r12
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	f7 01       	movw	r30, r14
    1e6e:	09 95       	icall
    1e70:	f8 2e       	mov	r15, r24
    1e72:	09 2f       	mov	r16, r25
    1e74:	8f b7       	in	r24, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	19 82       	std	Y+1, r1	; 0x01
    1e7a:	18 82       	st	Y, r1
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	91 05       	cpc	r25, r1
    1e84:	38 f0       	brcs	.+14     	; 0x1e94 <sync+0xc2>
    1e86:	1b 82       	std	Y+3, r1	; 0x03
    1e88:	1a 82       	std	Y+2, r1	; 0x02
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	15 82       	std	Z+5, r1	; 0x05
    1e8e:	14 82       	std	Z+4, r1	; 0x04
    1e90:	0e 94 30 04 	call	0x860	; 0x860 <dispatch>
    1e94:	11 23       	and	r17, r17
    1e96:	51 f0       	breq	.+20     	; 0x1eac <sync+0xda>
    1e98:	78 94       	sei
    1e9a:	8f 2d       	mov	r24, r15
    1e9c:	90 2f       	mov	r25, r16
    1e9e:	1d c0       	rjmp	.+58     	; 0x1eda <sync+0x108>
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	9f ef       	ldi	r25, 0xFF	; 255
    1ea4:	1a c0       	rjmp	.+52     	; 0x1eda <sync+0x108>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	17 c0       	rjmp	.+46     	; 0x1eda <sync+0x108>
    1eac:	8f 2d       	mov	r24, r15
    1eae:	90 2f       	mov	r25, r16
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <sync+0x108>
    1eb2:	3b 83       	std	Y+3, r19	; 0x03
    1eb4:	2a 83       	std	Y+2, r18	; 0x02
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	d5 83       	std	Z+5, r29	; 0x05
    1eba:	c4 83       	std	Z+4, r28	; 0x04
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 30 04 	call	0x860	; 0x860 <dispatch>
    1ec2:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <current>
    1ec6:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <current+0x1>
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	89 2b       	or	r24, r25
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <sync+0x102>
    1ed2:	b9 cf       	rjmp	.-142    	; 0x1e46 <sync+0x74>
    1ed4:	f9 83       	std	Y+1, r31	; 0x01
    1ed6:	e8 83       	st	Y, r30
    1ed8:	c2 cf       	rjmp	.-124    	; 0x1e5e <sync+0x8c>
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	08 95       	ret

00001eec <run>:
    1eec:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <current>
    1ef0:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <current+0x1>
    1ef4:	88 e6       	ldi	r24, 0x68	; 104
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <dequeue>
    1efc:	ec 01       	movw	r28, r24
    1efe:	d8 01       	movw	r26, r16
    1f00:	13 96       	adiw	r26, 0x03	; 3
    1f02:	9c 93       	st	X, r25
    1f04:	8e 93       	st	-X, r24
    1f06:	12 97       	sbiw	r26, 0x02	; 2
    1f08:	78 94       	sei
    1f0a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f0c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f10:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f16:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
    1f1a:	8f b7       	in	r24, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <msgPool>
    1f22:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <msgPool+0x1>
    1f26:	99 83       	std	Y+1, r25	; 0x01
    1f28:	88 83       	st	Y, r24
    1f2a:	d0 93 2c 01 	sts	0x012C, r29	; 0x80012c <msgPool+0x1>
    1f2e:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <msgPool>
    1f32:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    1f36:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    1f3a:	00 81       	ld	r16, Z
    1f3c:	11 81       	ldd	r17, Z+1	; 0x01
    1f3e:	e8 01       	movw	r28, r16
    1f40:	2a 81       	ldd	r18, Y+2	; 0x02
    1f42:	3b 81       	ldd	r19, Y+3	; 0x03
    1f44:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <msgQ>
    1f48:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <msgQ+0x1>
    1f4c:	10 97       	sbiw	r26, 0x00	; 0
    1f4e:	c1 f0       	breq	.+48     	; 0x1f80 <run+0x94>
    1f50:	21 15       	cp	r18, r1
    1f52:	31 05       	cpc	r19, r1
    1f54:	59 f2       	breq	.-106    	; 0x1eec <run>
    1f56:	16 96       	adiw	r26, 0x06	; 6
    1f58:	8d 91       	ld	r24, X+
    1f5a:	9d 91       	ld	r25, X+
    1f5c:	0d 90       	ld	r0, X+
    1f5e:	bc 91       	ld	r27, X
    1f60:	a0 2d       	mov	r26, r0
    1f62:	e9 01       	movw	r28, r18
    1f64:	4e 81       	ldd	r20, Y+6	; 0x06
    1f66:	5f 81       	ldd	r21, Y+7	; 0x07
    1f68:	68 85       	ldd	r22, Y+8	; 0x08
    1f6a:	79 85       	ldd	r23, Y+9	; 0x09
    1f6c:	84 1b       	sub	r24, r20
    1f6e:	95 0b       	sbc	r25, r21
    1f70:	a6 0b       	sbc	r26, r22
    1f72:	b7 0b       	sbc	r27, r23
    1f74:	18 16       	cp	r1, r24
    1f76:	19 06       	cpc	r1, r25
    1f78:	1a 06       	cpc	r1, r26
    1f7a:	1b 06       	cpc	r1, r27
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <run+0x94>
    1f7e:	b6 cf       	rjmp	.-148    	; 0x1eec <run>
    1f80:	10 93 28 01 	sts	0x0128, r17	; 0x800128 <activeStack+0x1>
    1f84:	00 93 27 01 	sts	0x0127, r16	; 0x800127 <activeStack>
    1f88:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
    1f8c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
    1f94:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <threadPool+0x1>
    1f98:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <threadPool>
    1f9c:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <activeStack>
    1fa0:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <activeStack+0x1>
    1fa4:	14 96       	adiw	r26, 0x04	; 4
    1fa6:	ed 91       	ld	r30, X+
    1fa8:	fc 91       	ld	r31, X
    1faa:	15 97       	sbiw	r26, 0x05	; 5
    1fac:	30 97       	sbiw	r30, 0x00	; 0
    1fae:	41 f0       	breq	.+16     	; 0x1fc0 <run+0xd4>
    1fb0:	a0 81       	ld	r26, Z
    1fb2:	b1 81       	ldd	r27, Z+1	; 0x01
    1fb4:	14 96       	adiw	r26, 0x04	; 4
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	15 97       	sbiw	r26, 0x05	; 5
    1fbc:	30 97       	sbiw	r30, 0x00	; 0
    1fbe:	c1 f7       	brne	.-16     	; 0x1fb0 <run+0xc4>
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 30 04 	call	0x860	; 0x860 <dispatch>
    1fc6:	92 cf       	rjmp	.-220    	; 0x1eec <run>

00001fc8 <ABORT>:
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	1f b7       	in	r17, 0x3f	; 63
    1fd2:	10 78       	andi	r17, 0x80	; 128
    1fd4:	f8 94       	cli
    1fd6:	66 e6       	ldi	r22, 0x66	; 102
    1fd8:	71 e0       	ldi	r23, 0x01	; 1
    1fda:	0e 94 99 03 	call	0x732	; 0x732 <remove>
    1fde:	89 2b       	or	r24, r25
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <ABORT+0x28>
    1fe2:	68 e6       	ldi	r22, 0x68	; 104
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	0e 94 99 03 	call	0x732	; 0x732 <remove>
    1fec:	89 2b       	or	r24, r25
    1fee:	59 f0       	breq	.+22     	; 0x2006 <ABORT+0x3e>
    1ff0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <msgPool>
    1ff4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <msgPool+0x1>
    1ff8:	99 83       	std	Y+1, r25	; 0x01
    1ffa:	88 83       	st	Y, r24
    1ffc:	d0 93 2c 01 	sts	0x012C, r29	; 0x80012c <msgPool+0x1>
    2000:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <msgPool>
    2004:	2b c0       	rjmp	.+86     	; 0x205c <ABORT+0x94>
    2006:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    200a:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    200e:	30 97       	sbiw	r30, 0x00	; 0
    2010:	29 f1       	breq	.+74     	; 0x205c <ABORT+0x94>
    2012:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <current>
    2016:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <current+0x1>
    201a:	2e 17       	cp	r18, r30
    201c:	3f 07       	cpc	r19, r31
    201e:	c9 f0       	breq	.+50     	; 0x2052 <ABORT+0x8a>
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	c8 17       	cp	r28, r24
    2026:	d9 07       	cpc	r29, r25
    2028:	a1 f4       	brne	.+40     	; 0x2052 <ABORT+0x8a>
    202a:	44 81       	ldd	r20, Z+4	; 0x04
    202c:	55 81       	ldd	r21, Z+5	; 0x05
    202e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2030:	9b 85       	ldd	r25, Y+11	; 0x0b
    2032:	48 17       	cp	r20, r24
    2034:	59 07       	cpc	r21, r25
    2036:	69 f4       	brne	.+26     	; 0x2052 <ABORT+0x8a>
    2038:	13 82       	std	Z+3, r1	; 0x03
    203a:	12 82       	std	Z+2, r1	; 0x02
    203c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <msgPool>
    2040:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <msgPool+0x1>
    2044:	99 83       	std	Y+1, r25	; 0x01
    2046:	88 83       	st	Y, r24
    2048:	d0 93 2c 01 	sts	0x012C, r29	; 0x80012c <msgPool+0x1>
    204c:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <msgPool>
    2050:	05 c0       	rjmp	.+10     	; 0x205c <ABORT+0x94>
    2052:	01 90       	ld	r0, Z+
    2054:	f0 81       	ld	r31, Z
    2056:	e0 2d       	mov	r30, r0
    2058:	30 97       	sbiw	r30, 0x00	; 0
    205a:	f9 f6       	brne	.-66     	; 0x201a <ABORT+0x52>
    205c:	11 23       	and	r17, r17
    205e:	09 f0       	breq	.+2      	; 0x2062 <ABORT+0x9a>
    2060:	78 94       	sei
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	1f 91       	pop	r17
    2068:	08 95       	ret

0000206a <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    206a:	42 31       	cpi	r20, 0x12	; 18
    206c:	b8 f4       	brcc	.+46     	; 0x209c <install+0x32>
        char status;
        DISABLE(status);
    206e:	2f b7       	in	r18, 0x3f	; 63
    2070:	f8 94       	cli
        otable[i] = obj;
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	44 0f       	add	r20, r20
    2076:	55 1f       	adc	r21, r21
    2078:	fa 01       	movw	r30, r20
    207a:	e6 59       	subi	r30, 0x96	; 150
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
        mtable[i] = m;
    2082:	fa 01       	movw	r30, r20
    2084:	ee 5f       	subi	r30, 0xFE	; 254
    2086:	fd 4f       	sbci	r31, 0xFD	; 253
    2088:	71 83       	std	Z+1, r23	; 0x01
    208a:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	fc 01       	movw	r30, r24
    2092:	53 83       	std	Z+3, r21	; 0x03
    2094:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2096:	22 23       	and	r18, r18
    2098:	0c f4       	brge	.+2      	; 0x209c <install+0x32>
    209a:	78 94       	sei
    209c:	08 95       	ret

0000209e <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    209e:	8c 01       	movw	r16, r24
    20a0:	7b 01       	movw	r14, r22
    20a2:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    20a4:	8f b7       	in	r24, 0x3f	; 63
    20a6:	f8 94       	cli
    initialize();
    20a8:	0e 94 c5 03 	call	0x78a	; 0x78a <initialize>
    ENABLE(1);
    20ac:	78 94       	sei
    if (m != NULL)
    20ae:	e1 14       	cp	r14, r1
    20b0:	f1 04       	cpc	r15, r1
    20b2:	41 f0       	breq	.+16     	; 0x20c4 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	a9 01       	movw	r20, r18
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	cb 01       	movw	r24, r22
    20c0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <async>
    DISABLE(status);
    20c4:	8f b7       	in	r24, 0x3f	; 63
    20c6:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    20c8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <schedule>
    ENABLE(1);
    20cc:	78 94       	sei
    while (1) {
        SLEEP();
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	83 bf       	out	0x33, r24	; 51
    20d2:	88 95       	sleep
    20d4:	fd cf       	rjmp	.-6      	; 0x20d0 <tinytimber+0x32>

000020d6 <setLamp>:
#include "TinyTimber.h"
#include "TrafficLight.h"
#include "Gui.h"
#include <stdint.h>

void setLamp (TrafficLight *self, int newActive) {
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ec 01       	movw	r28, r24
    20e0:	8b 01       	movw	r16, r22
	SYNC(self->lightGui, switchActive, newActive);
    20e2:	ab 01       	movw	r20, r22
    20e4:	6b ed       	ldi	r22, 0xDB	; 219
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sync>
    self->act = newActive;
    20f0:	1f 83       	std	Y+7, r17	; 0x07
    20f2:	0e 83       	std	Y+6, r16	; 0x06
}
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	08 95       	ret

000020fe <getLamp>:

int getLamp(TrafficLight *self) {
	return self->act;
    20fe:	fc 01       	movw	r30, r24
    2100:	86 81       	ldd	r24, Z+6	; 0x06
    2102:	97 81       	ldd	r25, Z+7	; 0x07
    2104:	08 95       	ret

00002106 <initUtil>:
#include <avr/io.h>
#include "Utility.h"

void initUtil (Utility *self, unsigned int ubrr){
    CLKPR = 0x80;
    2106:	e1 e6       	ldi	r30, 0x61	; 97
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	80 83       	st	Z, r24
	CLKPR = 0x00;
    210e:	10 82       	st	Z, r1

	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
    2110:	8f e0       	ldi	r24, 0x0F	; 15
    2112:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
    2116:	87 eb       	ldi	r24, 0xB7	; 183
    2118:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
    211c:	87 e0       	ldi	r24, 0x07	; 7
    211e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
    2122:	90 ec       	ldi	r25, 0xC0	; 192
    2124:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

    PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
    2128:	85 b1       	in	r24, 0x05	; 5
    212a:	80 6d       	ori	r24, 0xD0	; 208
    212c:	85 b9       	out	0x05, r24	; 5
    PORTE |= (1<<PE2)|(1<<PE3);
    212e:	8e b1       	in	r24, 0x0e	; 14
    2130:	8c 60       	ori	r24, 0x0C	; 12
    2132:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
    2134:	8f e2       	ldi	r24, 0x2F	; 47
    2136:	84 b9       	out	0x04, r24	; 4
	DDRE   = (1<<DDE6)|(1<<DDE4);
    2138:	80 e5       	ldi	r24, 0x50	; 80
    213a:	8d b9       	out	0x0d, r24	; 13
   
	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
    213c:	8c e0       	ldi	r24, 0x0C	; 12
    213e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
    2142:	80 ed       	ldi	r24, 0xD0	; 208
    2144:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
    2148:	9d bb       	out	0x1d, r25	; 29

    /* Set Baud Rate*/
    UBRR0H = (unsigned char)(ubrr>>8);
    214a:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (unsigned char)ubrr;
    214e:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    2152:	88 e9       	ldi	r24, 0x98	; 152
    2154:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
    2158:	86 e0       	ldi	r24, 0x06	; 6
    215a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
    215e:	08 95       	ret

00002160 <setjmp>:
    2160:	dc 01       	movw	r26, r24
    2162:	2d 92       	st	X+, r2
    2164:	3d 92       	st	X+, r3
    2166:	4d 92       	st	X+, r4
    2168:	5d 92       	st	X+, r5
    216a:	6d 92       	st	X+, r6
    216c:	7d 92       	st	X+, r7
    216e:	8d 92       	st	X+, r8
    2170:	9d 92       	st	X+, r9
    2172:	ad 92       	st	X+, r10
    2174:	bd 92       	st	X+, r11
    2176:	cd 92       	st	X+, r12
    2178:	dd 92       	st	X+, r13
    217a:	ed 92       	st	X+, r14
    217c:	fd 92       	st	X+, r15
    217e:	0d 93       	st	X+, r16
    2180:	1d 93       	st	X+, r17
    2182:	cd 93       	st	X+, r28
    2184:	dd 93       	st	X+, r29
    2186:	ff 91       	pop	r31
    2188:	ef 91       	pop	r30
    218a:	8d b7       	in	r24, 0x3d	; 61
    218c:	8d 93       	st	X+, r24
    218e:	8e b7       	in	r24, 0x3e	; 62
    2190:	8d 93       	st	X+, r24
    2192:	8f b7       	in	r24, 0x3f	; 63
    2194:	8d 93       	st	X+, r24
    2196:	ed 93       	st	X+, r30
    2198:	fd 93       	st	X+, r31
    219a:	88 27       	eor	r24, r24
    219c:	99 27       	eor	r25, r25
    219e:	09 94       	ijmp

000021a0 <longjmp>:
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	91 05       	cpc	r25, r1
    21a8:	81 1d       	adc	r24, r1
    21aa:	2d 90       	ld	r2, X+
    21ac:	3d 90       	ld	r3, X+
    21ae:	4d 90       	ld	r4, X+
    21b0:	5d 90       	ld	r5, X+
    21b2:	6d 90       	ld	r6, X+
    21b4:	7d 90       	ld	r7, X+
    21b6:	8d 90       	ld	r8, X+
    21b8:	9d 90       	ld	r9, X+
    21ba:	ad 90       	ld	r10, X+
    21bc:	bd 90       	ld	r11, X+
    21be:	cd 90       	ld	r12, X+
    21c0:	dd 90       	ld	r13, X+
    21c2:	ed 90       	ld	r14, X+
    21c4:	fd 90       	ld	r15, X+
    21c6:	0d 91       	ld	r16, X+
    21c8:	1d 91       	ld	r17, X+
    21ca:	cd 91       	ld	r28, X+
    21cc:	dd 91       	ld	r29, X+
    21ce:	ed 91       	ld	r30, X+
    21d0:	fd 91       	ld	r31, X+
    21d2:	0d 90       	ld	r0, X+
    21d4:	f8 94       	cli
    21d6:	fe bf       	out	0x3e, r31	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	ed bf       	out	0x3d, r30	; 61
    21dc:	ed 91       	ld	r30, X+
    21de:	fd 91       	ld	r31, X+
    21e0:	09 94       	ijmp

000021e2 <_exit>:
    21e2:	f8 94       	cli

000021e4 <__stop_program>:
    21e4:	ff cf       	rjmp	.-2      	; 0x21e4 <__stop_program>
