
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000576  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  0080011a  0080011a  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc9  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abf  00000000  00000000  000016ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051c  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000559  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067c  00000000  00000000  00002d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e7       	ldi	r30, 0x76	; 118
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 33       	cpi	r26, 0x3F	; 63
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  92:	0c 94 b9 02 	jmp	0x572	; 0x572 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:
uint16_t sccMap[] = {0x1551, 0x2080, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x1b51, 0x0000};


void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	
	//Part 2
	TCCR1B = (1 << CS12);
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
  b8:	08 95       	ret

000000ba <writeChar>:
	return;
}


void writeChar(char ch, int pos) {
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
  c2:	66 30       	cpi	r22, 0x06	; 6
  c4:	71 05       	cpc	r23, r1
  c6:	08 f0       	brcs	.+2      	; 0xca <writeChar+0x10>
  c8:	4b c0       	rjmp	.+150    	; 0x160 <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
  ca:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	08 f0       	brcs	.+2      	; 0xd2 <writeChar+0x18>
		intCh = 10;
  d0:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
  d2:	fb 01       	movw	r30, r22
  d4:	f5 95       	asr	r31
  d6:	e7 95       	ror	r30
  d8:	e4 51       	subi	r30, 0x14	; 20
  da:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
  dc:	60 ff       	sbrs	r22, 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
  e0:	50 ef       	ldi	r21, 0xF0	; 240
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
  e4:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
  e6:	a8 2f       	mov	r26, r24
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	aa 0f       	add	r26, r26
  ec:	bb 1f       	adc	r27, r27
  ee:	a0 50       	subi	r26, 0x00	; 0
  f0:	bf 4f       	sbci	r27, 0xFF	; 255
  f2:	cd 91       	ld	r28, X+
  f4:	dc 91       	ld	r29, X
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
  fe:	15 2f       	mov	r17, r21
 100:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 102:	01 2f       	mov	r16, r17
 104:	06 66       	ori	r16, 0x66	; 102
 106:	04 c0       	rjmp	.+8      	; 0x110 <writeChar+0x56>
 108:	14 96       	adiw	r26, 0x04	; 4
 10a:	35 96       	adiw	r30, 0x05	; 5
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
 110:	ce 01       	movw	r24, r28
 112:	0a 2e       	mov	r0, r26
 114:	02 c0       	rjmp	.+4      	; 0x11a <writeChar+0x60>
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <writeChar+0x5c>
 11e:	48 2f       	mov	r20, r24
 120:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	71 05       	cpc	r23, r1
 126:	69 f4       	brne	.+26     	; 0x142 <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 128:	80 81       	ld	r24, Z
 12a:	90 2f       	mov	r25, r16
 12c:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	48 9f       	mul	r20, r24
 132:	90 01       	movw	r18, r0
 134:	11 24       	eor	r1, r1
 136:	84 2f       	mov	r24, r20
 138:	82 2b       	or	r24, r18
 13a:	85 23       	and	r24, r21
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
 140:	e3 cf       	rjmp	.-58     	; 0x108 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 142:	80 81       	ld	r24, Z
 144:	91 2f       	mov	r25, r17
 146:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	48 9f       	mul	r20, r24
 14c:	90 01       	movw	r18, r0
 14e:	11 24       	eor	r1, r1
 150:	84 2f       	mov	r24, r20
 152:	82 2b       	or	r24, r18
 154:	85 23       	and	r24, r21
 156:	89 2b       	or	r24, r25
 158:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
 15a:	64 30       	cpi	r22, 0x04	; 4
 15c:	71 05       	cpc	r23, r1
 15e:	a4 f2       	brlt	.-88     	; 0x108 <writeChar+0x4e>

	}
	return;
	
	
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <is_prime>:

bool is_prime(long i) {
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	4b 01       	movw	r8, r22
 17c:	5c 01       	movw	r10, r24
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	88 16       	cp	r8, r24
 182:	91 04       	cpc	r9, r1
 184:	a1 04       	cpc	r10, r1
 186:	b1 04       	cpc	r11, r1
 188:	94 f1       	brlt	.+100    	; 0x1ee <is_prime+0x84>
		if (i % j == 0) {
 18a:	d5 01       	movw	r26, r10
 18c:	c4 01       	movw	r24, r8
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	99 27       	eor	r25, r25
 192:	aa 27       	eor	r26, r26
 194:	b0 78       	andi	r27, 0x80	; 128
 196:	bb 23       	and	r27, r27
 198:	54 f4       	brge	.+20     	; 0x1ae <is_prime+0x44>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 09       	sbc	r26, r1
 19e:	b1 09       	sbc	r27, r1
 1a0:	8e 6f       	ori	r24, 0xFE	; 254
 1a2:	9f 6f       	ori	r25, 0xFF	; 255
 1a4:	af 6f       	ori	r26, 0xFF	; 255
 1a6:	bf 6f       	ori	r27, 0xFF	; 255
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	a1 1d       	adc	r26, r1
 1ac:	b1 1d       	adc	r27, r1
 1ae:	89 2b       	or	r24, r25
 1b0:	8a 2b       	or	r24, r26
 1b2:	8b 2b       	or	r24, r27
 1b4:	f1 f0       	breq	.+60     	; 0x1f2 <is_prime+0x88>
 1b6:	c1 2c       	mov	r12, r1
 1b8:	d1 2c       	mov	r13, r1
 1ba:	76 01       	movw	r14, r12
 1bc:	68 94       	set
 1be:	c1 f8       	bld	r12, 1
 1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <is_prime+0x6c>
 1c2:	c5 01       	movw	r24, r10
 1c4:	b4 01       	movw	r22, r8
 1c6:	a7 01       	movw	r20, r14
 1c8:	96 01       	movw	r18, r12
 1ca:	0e 94 37 02 	call	0x46e	; 0x46e <__divmodsi4>
 1ce:	67 2b       	or	r22, r23
 1d0:	68 2b       	or	r22, r24
 1d2:	69 2b       	or	r22, r25
 1d4:	81 f0       	breq	.+32     	; 0x1f6 <is_prime+0x8c>
}

bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	c8 1a       	sub	r12, r24
 1da:	d8 0a       	sbc	r13, r24
 1dc:	e8 0a       	sbc	r14, r24
 1de:	f8 0a       	sbc	r15, r24
 1e0:	8c 14       	cp	r8, r12
 1e2:	9d 04       	cpc	r9, r13
 1e4:	ae 04       	cpc	r10, r14
 1e6:	bf 04       	cpc	r11, r15
 1e8:	61 f7       	brne	.-40     	; 0x1c2 <is_prime+0x58>
		if (i % j == 0) {
			return false;
		}
	}
	return true;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <is_prime+0x8e>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <is_prime+0x8e>
bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
		if (i % j == 0) {
			return false;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <is_prime+0x8e>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	bf 90       	pop	r11
 202:	af 90       	pop	r10
 204:	9f 90       	pop	r9
 206:	8f 90       	pop	r8
 208:	08 95       	ret

0000020a <printAt>:

void printAt(long num, int pos) {
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	4b 01       	movw	r8, r22
 220:	5c 01       	movw	r10, r24
 222:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 224:	24 e6       	ldi	r18, 0x64	; 100
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	0e 94 37 02 	call	0x46e	; 0x46e <__divmodsi4>
 230:	0f 2e       	mov	r0, r31
 232:	fa e0       	ldi	r31, 0x0A	; 10
 234:	cf 2e       	mov	r12, r31
 236:	d1 2c       	mov	r13, r1
 238:	e1 2c       	mov	r14, r1
 23a:	f1 2c       	mov	r15, r1
 23c:	f0 2d       	mov	r31, r0
 23e:	a7 01       	movw	r20, r14
 240:	96 01       	movw	r18, r12
 242:	0e 94 37 02 	call	0x46e	; 0x46e <__divmodsi4>
 246:	be 01       	movw	r22, r28
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	82 0f       	add	r24, r18
 24c:	0e 94 5d 00 	call	0xba	; 0xba <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 250:	21 96       	adiw	r28, 0x01	; 1
 252:	c5 01       	movw	r24, r10
 254:	b4 01       	movw	r22, r8
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 37 02 	call	0x46e	; 0x46e <__divmodsi4>
 25e:	86 2f       	mov	r24, r22
 260:	be 01       	movw	r22, r28
 262:	80 5d       	subi	r24, 0xD0	; 208
 264:	0e 94 5d 00 	call	0xba	; 0xba <writeChar>
	yield();
 268:	0e 94 1e 02 	call	0x43c	; 0x43c <yield>
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	9f 90       	pop	r9
 27e:	8f 90       	pop	r8
 280:	08 95       	ret

00000282 <computePrimes>:

void computePrimes(int pos) {
 282:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 284:	c1 2c       	mov	r12, r1
 286:	d1 2c       	mov	r13, r1
 288:	76 01       	movw	r14, r12
 28a:	c3 94       	inc	r12
        if (is_prime(n)) {
 28c:	c7 01       	movw	r24, r14
 28e:	b6 01       	movw	r22, r12
 290:	0e 94 b5 00 	call	0x16a	; 0x16a <is_prime>
 294:	88 23       	and	r24, r24
 296:	29 f0       	breq	.+10     	; 0x2a2 <computePrimes+0x20>
            printAt(n, pos);
 298:	ae 01       	movw	r20, r28
 29a:	c7 01       	movw	r24, r14
 29c:	b6 01       	movw	r22, r12
 29e:	0e 94 05 01 	call	0x20a	; 0x20a <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	c8 1a       	sub	r12, r24
 2a6:	d8 0a       	sbc	r13, r24
 2a8:	e8 0a       	sbc	r14, r24
 2aa:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 2ac:	ef cf       	rjmp	.-34     	; 0x28c <computePrimes+0xa>

000002ae <main>:
}

int main() {
	LCD_Init();
 2ae:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
    spawn(computePrimes, 0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	81 e4       	ldi	r24, 0x41	; 65
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 9a 01 	call	0x334	; 0x334 <spawn>
    computePrimes(3);
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 41 01 	call	0x282	; 0x282 <computePrimes>

000002c6 <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 2c6:	dc 01       	movw	r26, r24
 2c8:	15 96       	adiw	r26, 0x05	; 5
 2ca:	1c 92       	st	X, r1
 2cc:	1e 92       	st	-X, r1
 2ce:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 2d0:	db 01       	movw	r26, r22
 2d2:	ed 91       	ld	r30, X+
 2d4:	fc 91       	ld	r31, X
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	30 97       	sbiw	r30, 0x00	; 0
 2da:	21 f4       	brne	.+8      	; 0x2e4 <enqueue+0x1e>
        *queue = p;
 2dc:	8d 93       	st	X+, r24
 2de:	9c 93       	st	X, r25
 2e0:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 2e2:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 2e4:	24 81       	ldd	r18, Z+4	; 0x04
 2e6:	35 81       	ldd	r19, Z+5	; 0x05
 2e8:	21 15       	cp	r18, r1
 2ea:	31 05       	cpc	r19, r1
 2ec:	d1 f7       	brne	.-12     	; 0x2e2 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 2ee:	95 83       	std	Z+5, r25	; 0x05
 2f0:	84 83       	std	Z+4, r24	; 0x04
 2f2:	08 95       	ret

000002f4 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <dispatch+0x6>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	9a 83       	std	Y+2, r25	; 0x02
 300:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 302:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 306:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 30a:	06 96       	adiw	r24, 0x06	; 6
 30c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <setjmp>
 310:	89 2b       	or	r24, r25
 312:	59 f4       	brne	.+22     	; 0x32a <dispatch+0x36>
        current = next;
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 31c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
        longjmp(next->context,1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	06 96       	adiw	r24, 0x06	; 6
 326:	0e 94 98 02 	call	0x530	; 0x530 <longjmp>
    }
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <spawn>:

void spawn(void (* function)(int), int arg) {
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <spawn+0x6>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 33e:	f8 94       	cli
    if (!initialized) initialize();
 340:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 344:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 348:	23 2b       	or	r18, r19
 34a:	e1 f4       	brne	.+56     	; 0x384 <spawn+0x50>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 34c:	28 ef       	ldi	r18, 0xF8	; 248
 34e:	31 e0       	ldi	r19, 0x01	; 1
 350:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <threads+0x5>
 354:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <threads+0x4>
 358:	25 e6       	ldi	r18, 0x65	; 101
 35a:	32 e0       	ldi	r19, 0x02	; 2
 35c:	30 93 fd 01 	sts	0x01FD, r19	; 0x8001fd <threads+0x72>
 360:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <threads+0x71>
 364:	22 ed       	ldi	r18, 0xD2	; 210
 366:	32 e0       	ldi	r19, 0x02	; 2
 368:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <threads+0xdf>
 36c:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 370:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <threads+0x14c>
 374:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <threads+0x14b>


    initialized = 1;
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 380:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 384:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <freeQ>
 388:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <freeQ+0x1>
 38c:	3a 83       	std	Y+2, r19	; 0x02
 38e:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 390:	23 2b       	or	r18, r19
 392:	a9 f0       	breq	.+42     	; 0x3be <spawn+0x8a>
        *queue = (*queue)->next;
 394:	e9 81       	ldd	r30, Y+1	; 0x01
 396:	fa 81       	ldd	r31, Y+2	; 0x02
 398:	44 81       	ldd	r20, Z+4	; 0x04
 39a:	55 81       	ldd	r21, Z+5	; 0x05
 39c:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <freeQ+0x1>
 3a0:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3a4:	91 83       	std	Z+1, r25	; 0x01
 3a6:	80 83       	st	Z, r24
    newp->arg = arg;
 3a8:	73 83       	std	Z+3, r23	; 0x03
 3aa:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 3ac:	15 82       	std	Z+5, r1	; 0x05
 3ae:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 3b0:	cf 01       	movw	r24, r30
 3b2:	06 96       	adiw	r24, 0x06	; 6
 3b4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <setjmp>
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	49 f5       	brne	.+82     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <spawn+0x8c>
 3be:	ff cf       	rjmp	.-2      	; 0x3be <spawn+0x8a>
        ENABLE();
 3c0:	78 94       	sei
        current->function(current->arg);
 3c2:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <current>
 3c6:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <current+0x1>
 3ca:	ed 91       	ld	r30, X+
 3cc:	fc 91       	ld	r31, X
 3ce:	11 97       	sbiw	r26, 0x01	; 1
 3d0:	12 96       	adiw	r26, 0x02	; 2
 3d2:	8d 91       	ld	r24, X+
 3d4:	9c 91       	ld	r25, X
 3d6:	13 97       	sbiw	r26, 0x03	; 3
 3d8:	09 95       	icall
        DISABLE();
 3da:	f8 94       	cli
        enqueue(current, &freeQ);
 3dc:	68 e1       	ldi	r22, 0x18	; 24
 3de:	71 e0       	ldi	r23, 0x01	; 1
 3e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 3e4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 3e8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3ec:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 3f0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	51 f0       	breq	.+20     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
        *queue = (*queue)->next;
 3f8:	fc 01       	movw	r30, r24
 3fa:	24 81       	ldd	r18, Z+4	; 0x04
 3fc:	35 81       	ldd	r19, Z+5	; 0x05
 3fe:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 402:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 406:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <dispatch>
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
    }
    SETSTACK(&newp->context, &newp->stack);
 40e:	e9 81       	ldd	r30, Y+1	; 0x01
 410:	fa 81       	ldd	r31, Y+2	; 0x02
 412:	36 96       	adiw	r30, 0x06	; 6
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	9a 81       	ldd	r25, Y+2	; 0x02
 418:	87 59       	subi	r24, 0x97	; 151
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	91 8b       	std	Z+17, r25	; 0x11
 41e:	80 8b       	std	Z+16, r24	; 0x10
 420:	93 8b       	std	Z+19, r25	; 0x13
 422:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 424:	6c e1       	ldi	r22, 0x1C	; 28
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <enqueue>
    ENABLE();
 430:	78 94       	sei
}
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <yield>:

void yield(void) {
	enqueue(current, &readyQ);
 43c:	6c e1       	ldi	r22, 0x1C	; 28
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 444:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 448:	0e 94 63 01 	call	0x2c6	; 0x2c6 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 44c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 450:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	51 f0       	breq	.+20     	; 0x46c <yield+0x30>
        *queue = (*queue)->next;
 458:	fc 01       	movw	r30, r24
 45a:	24 81       	ldd	r18, Z+4	; 0x04
 45c:	35 81       	ldd	r19, Z+5	; 0x05
 45e:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 462:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    ENABLE();
}

void yield(void) {
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 466:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <dispatch>
}
 46a:	08 95       	ret
 46c:	ff cf       	rjmp	.-2      	; 0x46c <yield+0x30>

0000046e <__divmodsi4>:
 46e:	05 2e       	mov	r0, r21
 470:	97 fb       	bst	r25, 7
 472:	1e f4       	brtc	.+6      	; 0x47a <__divmodsi4+0xc>
 474:	00 94       	com	r0
 476:	0e 94 4e 02 	call	0x49c	; 0x49c <__negsi2>
 47a:	57 fd       	sbrc	r21, 7
 47c:	07 d0       	rcall	.+14     	; 0x48c <__divmodsi4_neg2>
 47e:	0e 94 56 02 	call	0x4ac	; 0x4ac <__udivmodsi4>
 482:	07 fc       	sbrc	r0, 7
 484:	03 d0       	rcall	.+6      	; 0x48c <__divmodsi4_neg2>
 486:	4e f4       	brtc	.+18     	; 0x49a <__divmodsi4_exit>
 488:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__negsi2>

0000048c <__divmodsi4_neg2>:
 48c:	50 95       	com	r21
 48e:	40 95       	com	r20
 490:	30 95       	com	r19
 492:	21 95       	neg	r18
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	4f 4f       	sbci	r20, 0xFF	; 255
 498:	5f 4f       	sbci	r21, 0xFF	; 255

0000049a <__divmodsi4_exit>:
 49a:	08 95       	ret

0000049c <__negsi2>:
 49c:	90 95       	com	r25
 49e:	80 95       	com	r24
 4a0:	70 95       	com	r23
 4a2:	61 95       	neg	r22
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f 4f       	sbci	r24, 0xFF	; 255
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	08 95       	ret

000004ac <__udivmodsi4>:
 4ac:	a1 e2       	ldi	r26, 0x21	; 33
 4ae:	1a 2e       	mov	r1, r26
 4b0:	aa 1b       	sub	r26, r26
 4b2:	bb 1b       	sub	r27, r27
 4b4:	fd 01       	movw	r30, r26
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__udivmodsi4_ep>

000004b8 <__udivmodsi4_loop>:
 4b8:	aa 1f       	adc	r26, r26
 4ba:	bb 1f       	adc	r27, r27
 4bc:	ee 1f       	adc	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	a2 17       	cp	r26, r18
 4c2:	b3 07       	cpc	r27, r19
 4c4:	e4 07       	cpc	r30, r20
 4c6:	f5 07       	cpc	r31, r21
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <__udivmodsi4_ep>
 4ca:	a2 1b       	sub	r26, r18
 4cc:	b3 0b       	sbc	r27, r19
 4ce:	e4 0b       	sbc	r30, r20
 4d0:	f5 0b       	sbc	r31, r21

000004d2 <__udivmodsi4_ep>:
 4d2:	66 1f       	adc	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a 94       	dec	r1
 4dc:	69 f7       	brne	.-38     	; 0x4b8 <__udivmodsi4_loop>
 4de:	60 95       	com	r22
 4e0:	70 95       	com	r23
 4e2:	80 95       	com	r24
 4e4:	90 95       	com	r25
 4e6:	9b 01       	movw	r18, r22
 4e8:	ac 01       	movw	r20, r24
 4ea:	bd 01       	movw	r22, r26
 4ec:	cf 01       	movw	r24, r30
 4ee:	08 95       	ret

000004f0 <setjmp>:
 4f0:	dc 01       	movw	r26, r24
 4f2:	2d 92       	st	X+, r2
 4f4:	3d 92       	st	X+, r3
 4f6:	4d 92       	st	X+, r4
 4f8:	5d 92       	st	X+, r5
 4fa:	6d 92       	st	X+, r6
 4fc:	7d 92       	st	X+, r7
 4fe:	8d 92       	st	X+, r8
 500:	9d 92       	st	X+, r9
 502:	ad 92       	st	X+, r10
 504:	bd 92       	st	X+, r11
 506:	cd 92       	st	X+, r12
 508:	dd 92       	st	X+, r13
 50a:	ed 92       	st	X+, r14
 50c:	fd 92       	st	X+, r15
 50e:	0d 93       	st	X+, r16
 510:	1d 93       	st	X+, r17
 512:	cd 93       	st	X+, r28
 514:	dd 93       	st	X+, r29
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	8d b7       	in	r24, 0x3d	; 61
 51c:	8d 93       	st	X+, r24
 51e:	8e b7       	in	r24, 0x3e	; 62
 520:	8d 93       	st	X+, r24
 522:	8f b7       	in	r24, 0x3f	; 63
 524:	8d 93       	st	X+, r24
 526:	ed 93       	st	X+, r30
 528:	fd 93       	st	X+, r31
 52a:	88 27       	eor	r24, r24
 52c:	99 27       	eor	r25, r25
 52e:	09 94       	ijmp

00000530 <longjmp>:
 530:	dc 01       	movw	r26, r24
 532:	cb 01       	movw	r24, r22
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	91 05       	cpc	r25, r1
 538:	81 1d       	adc	r24, r1
 53a:	2d 90       	ld	r2, X+
 53c:	3d 90       	ld	r3, X+
 53e:	4d 90       	ld	r4, X+
 540:	5d 90       	ld	r5, X+
 542:	6d 90       	ld	r6, X+
 544:	7d 90       	ld	r7, X+
 546:	8d 90       	ld	r8, X+
 548:	9d 90       	ld	r9, X+
 54a:	ad 90       	ld	r10, X+
 54c:	bd 90       	ld	r11, X+
 54e:	cd 90       	ld	r12, X+
 550:	dd 90       	ld	r13, X+
 552:	ed 90       	ld	r14, X+
 554:	fd 90       	ld	r15, X+
 556:	0d 91       	ld	r16, X+
 558:	1d 91       	ld	r17, X+
 55a:	cd 91       	ld	r28, X+
 55c:	dd 91       	ld	r29, X+
 55e:	ed 91       	ld	r30, X+
 560:	fd 91       	ld	r31, X+
 562:	0d 90       	ld	r0, X+
 564:	f8 94       	cli
 566:	fe bf       	out	0x3e, r31	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	ed bf       	out	0x3d, r30	; 61
 56c:	ed 91       	ld	r30, X+
 56e:	fd 91       	ld	r31, X+
 570:	09 94       	ijmp

00000572 <_exit>:
 572:	f8 94       	cli

00000574 <__stop_program>:
 574:	ff cf       	rjmp	.-2      	; 0x574 <__stop_program>
