
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006b0  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080011a  0080011a  0000075e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b9  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b17  00000000  00000000  00001a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b0  00000000  00000000  0000335e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 eb       	ldi	r30, 0xB0	; 176
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  92:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
		i += 1;
	}
}

void blink() {
	LCDDR0 = (LCDDR0 & 0xfd) | ((~LCDDR0) & 0x2);
  9a:	ec ee       	ldi	r30, 0xEC	; 236
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	90 81       	ld	r25, Z
  a0:	80 81       	ld	r24, Z
  a2:	80 95       	com	r24
  a4:	82 70       	andi	r24, 0x02	; 2
  a6:	9d 7f       	andi	r25, 0xFD	; 253
  a8:	89 2b       	or	r24, r25
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <LCD_Init>:
long numPressed = 0;
bool prev = false;

void LCD_Init(void) {
	//Part 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
  b4:	87 eb       	ldi	r24, 0xB7	; 183
  b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  c0:	80 ec       	ldi	r24, 0xC0	; 192
  c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c6:	08 95       	ret

000000c8 <writeChar>:
	bool wrapped;
}blinkData; 



void writeChar(char ch, int pos) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
  d0:	66 30       	cpi	r22, 0x06	; 6
  d2:	71 05       	cpc	r23, r1
  d4:	08 f0       	brcs	.+2      	; 0xd8 <writeChar+0x10>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
  d8:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	08 f0       	brcs	.+2      	; 0xe0 <writeChar+0x18>
		intCh = 10;
  de:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
  e0:	fb 01       	movw	r30, r22
  e2:	f5 95       	asr	r31
  e4:	e7 95       	ror	r30
  e6:	e4 51       	subi	r30, 0x14	; 20
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
  ea:	60 ff       	sbrs	r22, 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
  ee:	50 ef       	ldi	r21, 0xF0	; 240
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
  f2:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
  f4:	a8 2f       	mov	r26, r24
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	a0 50       	subi	r26, 0x00	; 0
  fe:	bf 4f       	sbci	r27, 0xFF	; 255
 100:	cd 91       	ld	r28, X+
 102:	dc 91       	ld	r29, X
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 10c:	15 2f       	mov	r17, r21
 10e:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 110:	01 2f       	mov	r16, r17
 112:	06 66       	ori	r16, 0x66	; 102
 114:	04 c0       	rjmp	.+8      	; 0x11e <writeChar+0x56>
 116:	14 96       	adiw	r26, 0x04	; 4
 118:	35 96       	adiw	r30, 0x05	; 5
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
 11e:	ce 01       	movw	r24, r28
 120:	0a 2e       	mov	r0, r26
 122:	02 c0       	rjmp	.+4      	; 0x128 <writeChar+0x60>
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <writeChar+0x5c>
 12c:	48 2f       	mov	r20, r24
 12e:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
 130:	61 30       	cpi	r22, 0x01	; 1
 132:	71 05       	cpc	r23, r1
 134:	69 f4       	brne	.+26     	; 0x150 <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
 136:	80 81       	ld	r24, Z
 138:	90 2f       	mov	r25, r16
 13a:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	48 9f       	mul	r20, r24
 140:	90 01       	movw	r18, r0
 142:	11 24       	eor	r1, r1
 144:	84 2f       	mov	r24, r20
 146:	82 2b       	or	r24, r18
 148:	85 23       	and	r24, r21
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	e3 cf       	rjmp	.-58     	; 0x116 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
 150:	80 81       	ld	r24, Z
 152:	91 2f       	mov	r25, r17
 154:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	48 9f       	mul	r20, r24
 15a:	90 01       	movw	r18, r0
 15c:	11 24       	eor	r1, r1
 15e:	84 2f       	mov	r24, r20
 160:	82 2b       	or	r24, r18
 162:	85 23       	and	r24, r21
 164:	89 2b       	or	r24, r25
 166:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
 168:	64 30       	cpi	r22, 0x04	; 4
 16a:	71 05       	cpc	r23, r1
 16c:	a4 f2       	brlt	.-88     	; 0x116 <writeChar+0x4e>

	}
	return;
	
	
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <is_prime>:

bool is_prime(long i) {
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	4b 01       	movw	r8, r22
 18a:	5c 01       	movw	r10, r24
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	88 16       	cp	r8, r24
 190:	91 04       	cpc	r9, r1
 192:	a1 04       	cpc	r10, r1
 194:	b1 04       	cpc	r11, r1
 196:	94 f1       	brlt	.+100    	; 0x1fc <is_prime+0x84>
		if (i % j == 0) {
 198:	d5 01       	movw	r26, r10
 19a:	c4 01       	movw	r24, r8
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	99 27       	eor	r25, r25
 1a0:	aa 27       	eor	r26, r26
 1a2:	b0 78       	andi	r27, 0x80	; 128
 1a4:	bb 23       	and	r27, r27
 1a6:	54 f4       	brge	.+20     	; 0x1bc <is_prime+0x44>
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	a1 09       	sbc	r26, r1
 1ac:	b1 09       	sbc	r27, r1
 1ae:	8e 6f       	ori	r24, 0xFE	; 254
 1b0:	9f 6f       	ori	r25, 0xFF	; 255
 1b2:	af 6f       	ori	r26, 0xFF	; 255
 1b4:	bf 6f       	ori	r27, 0xFF	; 255
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	a1 1d       	adc	r26, r1
 1ba:	b1 1d       	adc	r27, r1
 1bc:	89 2b       	or	r24, r25
 1be:	8a 2b       	or	r24, r26
 1c0:	8b 2b       	or	r24, r27
 1c2:	f1 f0       	breq	.+60     	; 0x200 <__EEPROM_REGION_LENGTH__>
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
 1c8:	76 01       	movw	r14, r12
 1ca:	68 94       	set
 1cc:	c1 f8       	bld	r12, 1
 1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <is_prime+0x6c>
 1d0:	c5 01       	movw	r24, r10
 1d2:	b4 01       	movw	r22, r8
 1d4:	a7 01       	movw	r20, r14
 1d6:	96 01       	movw	r18, r12
 1d8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodsi4>
 1dc:	67 2b       	or	r22, r23
 1de:	68 2b       	or	r22, r24
 1e0:	69 2b       	or	r22, r25
 1e2:	81 f0       	breq	.+32     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
}

bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	c8 1a       	sub	r12, r24
 1e8:	d8 0a       	sbc	r13, r24
 1ea:	e8 0a       	sbc	r14, r24
 1ec:	f8 0a       	sbc	r15, r24
 1ee:	8c 14       	cp	r8, r12
 1f0:	9d 04       	cpc	r9, r13
 1f2:	ae 04       	cpc	r10, r14
 1f4:	bf 04       	cpc	r11, r15
 1f6:	61 f7       	brne	.-40     	; 0x1d0 <is_prime+0x58>
		if (i % j == 0) {
			return false;
		}
	}
	return true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
bool is_prime(long i) {
	
	// Check for division with every number
	for(long j = 2; j < i; j++) {
		if (i % j == 0) {
			return false;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	01 c0       	rjmp	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 204:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	bf 90       	pop	r11
 210:	af 90       	pop	r10
 212:	9f 90       	pop	r9
 214:	8f 90       	pop	r8
 216:	08 95       	ret

00000218 <printAt>:

void printAt(long num, int pos) {
 218:	cf 92       	push	r12
 21a:	df 92       	push	r13
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	00 d0       	rcall	.+0      	; 0x22a <printAt+0x12>
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	6b 01       	movw	r12, r22
 230:	7c 01       	movw	r14, r24
 232:	8a 01       	movw	r16, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodsi4>
 240:	2a e0       	ldi	r18, 0x0A	; 10
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodsi4>
 24c:	b8 01       	movw	r22, r16
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	82 0f       	add	r24, r18
 252:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
	for(volatile int i = 0; i < 1000; i++);
 256:	1a 82       	std	Y+2, r1	; 0x02
 258:	19 82       	std	Y+1, r1	; 0x01
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	88 3e       	cpi	r24, 0xE8	; 232
 260:	93 40       	sbci	r25, 0x03	; 3
 262:	54 f4       	brge	.+20     	; 0x278 <printAt+0x60>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	9a 81       	ldd	r25, Y+2	; 0x02
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	88 3e       	cpi	r24, 0xE8	; 232
 274:	93 40       	sbci	r25, 0x03	; 3
 276:	b4 f3       	brlt	.-20     	; 0x264 <printAt+0x4c>
    pp++;
    writeChar( num % 10 + '0', pp);
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	c7 01       	movw	r24, r14
 27e:	b6 01       	movw	r22, r12
 280:	2a e0       	ldi	r18, 0x0A	; 10
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodsi4>
 28c:	86 2f       	mov	r24, r22
 28e:	b8 01       	movw	r22, r16
 290:	80 5d       	subi	r24, 0xD0	; 208
 292:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>

}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	08 95       	ret

000002ac <button>:
	//LCDDR0 = !LCDDR0;
}


void button() {
	LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
 2ac:	ec ee       	ldi	r30, 0xEC	; 236
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	90 81       	ld	r25, Z
 2b2:	80 81       	ld	r24, Z
 2b4:	80 95       	com	r24
 2b6:	84 74       	andi	r24, 0x44	; 68
 2b8:	9b 7b       	andi	r25, 0xBB	; 187
 2ba:	89 2b       	or	r24, r25
 2bc:	80 83       	st	Z, r24
	numPressed += 1;
 2be:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 2c2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 2c6:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__data_end+0x2>
 2ca:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__data_end+0x3>
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	6f 5f       	subi	r22, 0xFF	; 255
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
 2d6:	8f 4f       	sbci	r24, 0xFF	; 255
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end>
 2de:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x1>
 2e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x2>
 2e6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x3>
	printAt(numPressed, 4);
 2ea:	44 e0       	ldi	r20, 0x04	; 4
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	0e 94 0c 01 	call	0x218	; 0x218 <printAt>
 2f2:	08 95       	ret

000002f4 <primes>:
    writeChar( num % 10 + '0', pp);

}

void primes() {
    long i = 0;
 2f4:	c1 2c       	mov	r12, r1
 2f6:	d1 2c       	mov	r13, r1
 2f8:	76 01       	movw	r14, r12
	while(1) {
		if (is_prime(i)) {
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 bc 00 	call	0x178	; 0x178 <is_prime>
 302:	88 23       	and	r24, r24
 304:	31 f0       	breq	.+12     	; 0x312 <primes+0x1e>
			printAt(i, 0);
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	0e 94 0c 01 	call	0x218	; 0x218 <printAt>
		}
		i += 1;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	c8 1a       	sub	r12, r24
 316:	d8 0a       	sbc	r13, r24
 318:	e8 0a       	sbc	r14, r24
 31a:	f8 0a       	sbc	r15, r24
	}
 31c:	ee cf       	rjmp	.-36     	; 0x2fa <primes+0x6>

0000031e <__vector_7>:
	LCDDR0 =  (LCDDR0 & 0xbb) | ((~LCDDR0) & 0x44);
	numPressed += 1;
	printAt(numPressed, 4);
}

ISR(TIMER1_COMPA_vect) { //Blink
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	spawn(blink, 0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8d e4       	ldi	r24, 0x4D	; 77
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 15 02 	call	0x42a	; 0x42a <spawn>
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_3>:

ISR(PCINT1_vect) { //Button
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	if(!(PINB & (1<<PINB7))) {
 390:	1f 99       	sbic	0x03, 7	; 3
 392:	06 c0       	rjmp	.+12     	; 0x3a0 <__vector_3+0x32>
		spawn(button, 0);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	86 e5       	ldi	r24, 0x56	; 86
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 15 02 	call	0x42a	; 0x42a <spawn>
	}
}
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <main>:
	


int main(void)
{
    CLKPR = 0x80;
 3c2:	e1 e6       	ldi	r30, 0x61	; 97
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 e8       	ldi	r24, 0x80	; 128
 3c8:	80 83       	st	Z, r24
	CLKPR = 0x00;
 3ca:	10 82       	st	Z, r1
    LCD_Init();
 3cc:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
	LCDDR0 = LCDDR0 | (1 << 2);
 3d0:	ec ee       	ldi	r30, 0xEC	; 236
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	84 60       	ori	r24, 0x04	; 4
 3d8:	80 83       	st	Z, r24
    spawn(blink, 0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	8d e4       	ldi	r24, 0x4D	; 77
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 15 02 	call	0x42a	; 0x42a <spawn>
	primes();
 3e6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <primes>

000003ea <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <dispatch+0x6>
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	9a 83       	std	Y+2, r25	; 0x02
 3f6:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 3f8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 3fc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 400:	06 96       	adiw	r24, 0x06	; 6
 402:	0e 94 15 03 	call	0x62a	; 0x62a <setjmp>
 406:	89 2b       	or	r24, r25
 408:	59 f4       	brne	.+22     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
        current = next;
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	9a 81       	ldd	r25, Y+2	; 0x02
 40e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 412:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
        longjmp(next->context,1);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	06 96       	adiw	r24, 0x06	; 6
 41c:	0e 94 35 03 	call	0x66a	; 0x66a <longjmp>
    }
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <spawn>:

void spawn(void (* function)(int), int arg) {
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	00 d0       	rcall	.+0      	; 0x430 <spawn+0x6>
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 434:	f8 94       	cli
    //lock(&MTX2);
    if (!initialized) initialize();
 436:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <initialized>
 43a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <initialized+0x1>
 43e:	23 2b       	or	r18, r19
 440:	b9 f5       	brne	.+110    	; 0x4b0 <spawn+0x86>
long interrupts = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 442:	2c ef       	ldi	r18, 0xFC	; 252
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 44a:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 44e:	29 e6       	ldi	r18, 0x69	; 105
 450:	32 e0       	ldi	r19, 0x02	; 2
 452:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 456:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 45a:	26 ed       	ldi	r18, 0xD6	; 214
 45c:	32 e0       	ldi	r19, 0x02	; 2
 45e:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 462:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 466:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 46a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    //Set compare match
    TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 46e:	20 ec       	ldi	r18, 0xC0	; 192
 470:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>

    PORTB = PORTB | (1 << PB5);
 474:	2d 9a       	sbi	0x05, 5	; 5
    PORTB = PORTB | (1 << PB7);
 476:	2f 9a       	sbi	0x05, 7	; 5
    
    //Set timer enabler
    TIMSK1 = (1 << OCIE1A);
 478:	22 e0       	ldi	r18, 0x02	; 2
 47a:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    
    //Set pre-scaling factor and CTC
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 47e:	2d e0       	ldi	r18, 0x0D	; 13
 480:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>

    //8 000 000 / 1024 /1000 * 50 * 100 (Target Time)
    OCR1A = 390.625*10;
 484:	22 e4       	ldi	r18, 0x42	; 66
 486:	3f e0       	ldi	r19, 0x0F	; 15
 488:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 48c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    
    //Set timer
	TCNT1 = 0;
 490:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 494:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    EIMSK = EIMSK | (1<<PCINT15);
 498:	ef 9a       	sbi	0x1d, 7	; 29
    PCMSK1 = PCMSK1 | (1<<PCINT15);
 49a:	ec e6       	ldi	r30, 0x6C	; 108
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	20 81       	ld	r18, Z
 4a0:	20 68       	ori	r18, 0x80	; 128
 4a2:	20 83       	st	Z, r18

    initialized = 1;
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <initialized+0x1>
 4ac:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <initialized>
        *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4b0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <freeQ>
 4b4:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <freeQ+0x1>
 4b8:	3a 83       	std	Y+2, r19	; 0x02
 4ba:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 4bc:	23 2b       	or	r18, r19
 4be:	a9 f0       	breq	.+42     	; 0x4ea <spawn+0xc0>
        *queue = (*queue)->next;
 4c0:	e9 81       	ldd	r30, Y+1	; 0x01
 4c2:	fa 81       	ldd	r31, Y+2	; 0x02
 4c4:	44 81       	ldd	r20, Z+4	; 0x04
 4c6:	55 81       	ldd	r21, Z+5	; 0x05
 4c8:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <freeQ+0x1>
 4cc:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <freeQ>
    DISABLE();
    //lock(&MTX2);
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 4d0:	91 83       	std	Z+1, r25	; 0x01
 4d2:	80 83       	st	Z, r24
    newp->arg = arg;
 4d4:	73 83       	std	Z+3, r23	; 0x03
 4d6:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 4d8:	15 82       	std	Z+5, r1	; 0x05
 4da:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 4dc:	cf 01       	movw	r24, r30
 4de:	06 96       	adiw	r24, 0x06	; 6
 4e0:	0e 94 15 03 	call	0x62a	; 0x62a <setjmp>
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	b1 f5       	brne	.+108    	; 0x554 <__stack+0x55>
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <spawn+0xc2>
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <spawn+0xc0>
        ENABLE();
 4ec:	78 94       	sei
        //unlock(&MTX2);
        current->function(current->arg);
 4ee:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <current>
 4f2:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <current+0x1>
 4f6:	ed 91       	ld	r30, X+
 4f8:	fc 91       	ld	r31, X
 4fa:	11 97       	sbiw	r26, 0x01	; 1
 4fc:	12 96       	adiw	r26, 0x02	; 2
 4fe:	8d 91       	ld	r24, X+
 500:	9c 91       	ld	r25, X
 502:	13 97       	sbiw	r26, 0x03	; 3
 504:	09 95       	icall
        DISABLE();
 506:	f8 94       	cli
        //lock(&MTX2);

        enqueue(current, &freeQ);
 508:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <current>
 50c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 510:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <freeQ>
 514:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <freeQ+0x1>
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	29 f4       	brne	.+10     	; 0x526 <__stack+0x27>
        *queue = p;
 51c:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <freeQ+0x1>
 520:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <freeQ>
 524:	06 c0       	rjmp	.+12     	; 0x532 <__stack+0x33>
    } else {
        thread q = *queue;
        p->next = q;
 526:	95 83       	std	Z+5, r25	; 0x05
 528:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 52a:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <freeQ+0x1>
 52e:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 532:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 536:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 53a:	00 97       	sbiw	r24, 0x00	; 0
 53c:	51 f0       	breq	.+20     	; 0x552 <__stack+0x53>
        *queue = (*queue)->next;
 53e:	fc 01       	movw	r30, r24
 540:	24 81       	ldd	r18, Z+4	; 0x04
 542:	35 81       	ldd	r19, Z+5	; 0x05
 544:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 548:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        current->function(current->arg);
        DISABLE();
        //lock(&MTX2);

        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 54c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <dispatch>
 550:	01 c0       	rjmp	.+2      	; 0x554 <__stack+0x55>
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stack+0x53>
    }
    SETSTACK(&newp->context, &newp->stack);
 554:	e9 81       	ldd	r30, Y+1	; 0x01
 556:	fa 81       	ldd	r31, Y+2	; 0x02
 558:	36 96       	adiw	r30, 0x06	; 6
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	9a 81       	ldd	r25, Y+2	; 0x02
 55e:	87 59       	subi	r24, 0x97	; 151
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	91 8b       	std	Z+17, r25	; 0x11
 564:	80 8b       	std	Z+16, r24	; 0x10
 566:	93 8b       	std	Z+19, r25	; 0x13
 568:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(current, &readyQ);
 56a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <current>
 56e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <current+0x1>

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 572:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 576:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	29 f4       	brne	.+10     	; 0x588 <__stack+0x89>
        *queue = p;
 57e:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <readyQ+0x1>
 582:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <readyQ>
 586:	06 c0       	rjmp	.+12     	; 0x594 <__stack+0x95>
    } else {
        thread q = *queue;
        p->next = q;
 588:	95 83       	std	Z+5, r25	; 0x05
 58a:	84 83       	std	Z+4, r24	; 0x04
        *queue = p;
 58c:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <readyQ+0x1>
 590:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <readyQ>
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(current, &readyQ);

    dispatch(newp);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	0e 94 f5 01 	call	0x3ea	; 0x3ea <dispatch>
    ENABLE();
 59c:	78 94       	sei
}
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <__divmodsi4>:
 5a8:	05 2e       	mov	r0, r21
 5aa:	97 fb       	bst	r25, 7
 5ac:	1e f4       	brtc	.+6      	; 0x5b4 <__divmodsi4+0xc>
 5ae:	00 94       	com	r0
 5b0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__negsi2>
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	07 d0       	rcall	.+14     	; 0x5c6 <__divmodsi4_neg2>
 5b8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__udivmodsi4>
 5bc:	07 fc       	sbrc	r0, 7
 5be:	03 d0       	rcall	.+6      	; 0x5c6 <__divmodsi4_neg2>
 5c0:	4e f4       	brtc	.+18     	; 0x5d4 <__divmodsi4_exit>
 5c2:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__negsi2>

000005c6 <__divmodsi4_neg2>:
 5c6:	50 95       	com	r21
 5c8:	40 95       	com	r20
 5ca:	30 95       	com	r19
 5cc:	21 95       	neg	r18
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	4f 4f       	sbci	r20, 0xFF	; 255
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255

000005d4 <__divmodsi4_exit>:
 5d4:	08 95       	ret

000005d6 <__negsi2>:
 5d6:	90 95       	com	r25
 5d8:	80 95       	com	r24
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	08 95       	ret

000005e6 <__udivmodsi4>:
 5e6:	a1 e2       	ldi	r26, 0x21	; 33
 5e8:	1a 2e       	mov	r1, r26
 5ea:	aa 1b       	sub	r26, r26
 5ec:	bb 1b       	sub	r27, r27
 5ee:	fd 01       	movw	r30, r26
 5f0:	0d c0       	rjmp	.+26     	; 0x60c <__udivmodsi4_ep>

000005f2 <__udivmodsi4_loop>:
 5f2:	aa 1f       	adc	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	ee 1f       	adc	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	a2 17       	cp	r26, r18
 5fc:	b3 07       	cpc	r27, r19
 5fe:	e4 07       	cpc	r30, r20
 600:	f5 07       	cpc	r31, r21
 602:	20 f0       	brcs	.+8      	; 0x60c <__udivmodsi4_ep>
 604:	a2 1b       	sub	r26, r18
 606:	b3 0b       	sbc	r27, r19
 608:	e4 0b       	sbc	r30, r20
 60a:	f5 0b       	sbc	r31, r21

0000060c <__udivmodsi4_ep>:
 60c:	66 1f       	adc	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	1a 94       	dec	r1
 616:	69 f7       	brne	.-38     	; 0x5f2 <__udivmodsi4_loop>
 618:	60 95       	com	r22
 61a:	70 95       	com	r23
 61c:	80 95       	com	r24
 61e:	90 95       	com	r25
 620:	9b 01       	movw	r18, r22
 622:	ac 01       	movw	r20, r24
 624:	bd 01       	movw	r22, r26
 626:	cf 01       	movw	r24, r30
 628:	08 95       	ret

0000062a <setjmp>:
 62a:	dc 01       	movw	r26, r24
 62c:	2d 92       	st	X+, r2
 62e:	3d 92       	st	X+, r3
 630:	4d 92       	st	X+, r4
 632:	5d 92       	st	X+, r5
 634:	6d 92       	st	X+, r6
 636:	7d 92       	st	X+, r7
 638:	8d 92       	st	X+, r8
 63a:	9d 92       	st	X+, r9
 63c:	ad 92       	st	X+, r10
 63e:	bd 92       	st	X+, r11
 640:	cd 92       	st	X+, r12
 642:	dd 92       	st	X+, r13
 644:	ed 92       	st	X+, r14
 646:	fd 92       	st	X+, r15
 648:	0d 93       	st	X+, r16
 64a:	1d 93       	st	X+, r17
 64c:	cd 93       	st	X+, r28
 64e:	dd 93       	st	X+, r29
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	8d b7       	in	r24, 0x3d	; 61
 656:	8d 93       	st	X+, r24
 658:	8e b7       	in	r24, 0x3e	; 62
 65a:	8d 93       	st	X+, r24
 65c:	8f b7       	in	r24, 0x3f	; 63
 65e:	8d 93       	st	X+, r24
 660:	ed 93       	st	X+, r30
 662:	fd 93       	st	X+, r31
 664:	88 27       	eor	r24, r24
 666:	99 27       	eor	r25, r25
 668:	09 94       	ijmp

0000066a <longjmp>:
 66a:	dc 01       	movw	r26, r24
 66c:	cb 01       	movw	r24, r22
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	91 05       	cpc	r25, r1
 672:	81 1d       	adc	r24, r1
 674:	2d 90       	ld	r2, X+
 676:	3d 90       	ld	r3, X+
 678:	4d 90       	ld	r4, X+
 67a:	5d 90       	ld	r5, X+
 67c:	6d 90       	ld	r6, X+
 67e:	7d 90       	ld	r7, X+
 680:	8d 90       	ld	r8, X+
 682:	9d 90       	ld	r9, X+
 684:	ad 90       	ld	r10, X+
 686:	bd 90       	ld	r11, X+
 688:	cd 90       	ld	r12, X+
 68a:	dd 90       	ld	r13, X+
 68c:	ed 90       	ld	r14, X+
 68e:	fd 90       	ld	r15, X+
 690:	0d 91       	ld	r16, X+
 692:	1d 91       	ld	r17, X+
 694:	cd 91       	ld	r28, X+
 696:	dd 91       	ld	r29, X+
 698:	ed 91       	ld	r30, X+
 69a:	fd 91       	ld	r31, X+
 69c:	0d 90       	ld	r0, X+
 69e:	f8 94       	cli
 6a0:	fe bf       	out	0x3e, r31	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	ed bf       	out	0x3d, r30	; 61
 6a6:	ed 91       	ld	r30, X+
 6a8:	fd 91       	ld	r31, X+
 6aa:	09 94       	ijmp

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
